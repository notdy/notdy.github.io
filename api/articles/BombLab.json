{"title":"BombLab","uid":"6b7ecf7eef1b5950a2257e592952f69a","slug":"BombLab","date":"2023-10-26T06:08:49.000Z","updated":"2023-10-26T06:25:32.825Z","comments":true,"path":"api/articles/BombLab.json","keywords":null,"cover":[],"content":"<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><p>6关卡，每个关卡需要输入相应的内容，通过逆向工程来获取对应关卡的通过条件</p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>需要用到gdb调试器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apt-get install gdb</code></pre>\n<p>系统: Ubuntu 22.04</p>\n<p>本实验会用到的gdb调试器的指令如下</p>\n<blockquote>\n<p>r或者 run或者run filename \t\t运行程序,run filename就是用filename中的内容作为输入<br>b *address\t\t\t在某个地址设置断点<br>d或delete\t\t\t\t删除所有断点<br>d 断点号\t\t\t\t删除指定断点<br>info b\t\t\t\t\t查看所有断点信息<br>x&#x2F;参数 地址\t\t\t查看指针解引用后的值，参数可以是s(字符串),d(十进制),x(十六进制),地址若是寄存器需要加上$<br>info register 或info r\t查看所有寄存器的值<br>disas functionName\t生成functionName的汇编代码<br>stepi 执行一个汇编指令<br>layout asm 窗口分为两部分，上面是将要执行的汇编代码，下面输入gdb调试命令</p>\n</blockquote>\n<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><h3 id=\"寄存器的东西\"><a href=\"#寄存器的东西\" class=\"headerlink\" title=\"寄存器的东西\"></a>寄存器的东西</h3><p>这里面有一些寄存器的知识，了解即可<br>%rsp (register stack pointer) 栈指针<br>%esi:通用寄存器，长应用于指针或索引<br>%rax:<strong>存储函数的返回值</strong>,存储临时数据,系统调用号<br>%r12,%rbx:通用寄存器,参数传递的<br>%rbp(register base pointer):通常是当作基址指针来用</p>\n<h3 id=\"指令相关\"><a href=\"#指令相关\" class=\"headerlink\" title=\"指令相关\"></a>指令相关</h3><h3 id=\"test-destination-source\"><a href=\"#test-destination-source\" class=\"headerlink\" title=\"test destination,source\"></a>test destination,source</h3><p>destination和source可以是寄存器,内存地址,立即数.对两个操作数进行<strong>按位逻辑与</strong>操作,会更新下面寄存器的状态</p>\n<ul>\n<li><strong>Zero flag(ZF):若结果为0，则设置为1,反之为0，这个若为1表明两个操作数相等或者某个操作数等于0</strong></li>\n<li>Sign flag (SF):若结果最高位为1,则为1,反之为0</li>\n<li>Overflow flag(OF):有符号数溢出则为1,反之为0</li>\n<li>Carry flag(CF):无符号数溢出则为1,反之为0</li>\n<li>Parity flag(PF):结果的低8位包含奇数个1则为1，反之为0</li>\n</ul>\n<h3 id=\"je-destination\"><a href=\"#je-destination\" class=\"headerlink\" title=\"je destination\"></a>je destination</h3><p>若ZF为1则跳转到destination处</p>\n<h1 id=\"开干\"><a href=\"#开干\" class=\"headerlink\" title=\"开干\"></a>开干</h1><h2 id=\"Phase-1-字符串比较\"><a href=\"#Phase-1-字符串比较\" class=\"headerlink\" title=\"Phase 1 字符串比较\"></a>Phase 1 字符串比较</h2><p>终端输入gdb bomb<br>在输入disas phase_1,结果如下</p>\n<pre class=\"line-numbers language-assembly\" data-language=\"assembly\"><code class=\"language-assembly\">0x0000000000400ee0 &lt;+0&gt;:\tsub    $0x8,%rsp &#x2F;&#x2F; 把栈指针减少8，给局部变量提供空间\n0x0000000000400ee4 &lt;+4&gt;:\tmov    $0x402400,%esi &#x2F;&#x2F; 将0x402400存储到%esi中，这个有可能是存放我们输入的值或者存放内置字符串的\n0x0000000000400ee9 &lt;+9&gt;:\tcall   0x401338 &lt;strings_not_equal&gt;&#x2F;&#x2F;调用了函数strings_not_equal,估计是判断输入的字符串和内置字符串是否相同，相同返回0\n0x0000000000400eee &lt;+14&gt;:\ttest   %eax,%eax  &#x2F;&#x2F;判断%eax(函数strings_not_equal的返回值)是否为0，若为0则ZF&#x3D;1\n0x0000000000400ef0 &lt;+16&gt;:\tje     0x400ef7 &lt;phase_1+23&gt; &#x2F;&#x2F; ZF为1就跳转，反之顺序执行\n0x0000000000400ef2 &lt;+18&gt;:\tcall   0x40143a &lt;explode_bomb&gt;&#x2F;&#x2F;拆弹失败，炸弹爆炸\n0x0000000000400ef7 &lt;+23&gt;:\tadd    $0x8,%rsp &#x2F;&#x2F;回收栈指针\n0x0000000000400efb &lt;+27&gt;:\tret    </code></pre>\n<p>把断点打到0x0000000000400ee9的位置,开始run,随便输点东西</p>\n<pre class=\"line-numbers language-assembly\" data-language=\"assembly\"><code class=\"language-assembly\">b *0x400ee9\nrun\nx&#x2F;s 0x402400\t</code></pre>\n<p>结果发现0x402400就是我们想要的东西:Border relations with Canada have never been better.<br>那么我们输入的东西到哪里去了?断点打到strings_not_equal里面,查看strings_not_equal汇编代码（在gdb中输入disas strings_not_equal）</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">Dump of assembler code for function strings_not_equal:\n   0x0000000000401338 &lt;+0&gt;:\tpush   %r12\n   0x000000000040133a &lt;+2&gt;:\tpush   %rbp \n   0x000000000040133b &lt;+3&gt;:\tpush   %rbx\n   0x000000000040133c &lt;+4&gt;:\tmov    %rdi,%rbx\n   0x000000000040133f &lt;+7&gt;:\tmov    %rsi,%rbp\n   0x0000000000401342 &lt;+10&gt;:\tcall   0x40131b &lt;string_length&gt;\n   0x0000000000401347 &lt;+15&gt;:\tmov    %eax,%r12d\n   0x000000000040134a &lt;+18&gt;:\tmov    %rbp,%rdi\n   0x000000000040134d &lt;+21&gt;:\tcall   0x40131b &lt;string_length&gt;\n   0x0000000000401352 &lt;+26&gt;:\tmov    $0x1,%edx\n   0x0000000000401357 &lt;+31&gt;:\tcmp    %eax,%r12d\n   0x000000000040135a &lt;+34&gt;:\tjne    0x40139b &lt;strings_not_equal+99&gt;\n   0x000000000040135c &lt;+36&gt;:\tmovzbl (%rbx),%eax\n   0x000000000040135f &lt;+39&gt;:\ttest   %al,%al\n   0x0000000000401361 &lt;+41&gt;:\tje     0x401388 &lt;strings_not_equal+80&gt;\n   0x0000000000401363 &lt;+43&gt;:\tcmp    0x0(%rbp),%al\n   0x0000000000401366 &lt;+46&gt;:\tje     0x401372 &lt;strings_not_equal+58&gt;\n   0x0000000000401368 &lt;+48&gt;:\tjmp    0x40138f &lt;strings_not_equal+87&gt;\n   0x000000000040136a &lt;+50&gt;:\tcmp    0x0(%rbp),%al\n   0x000000000040136d &lt;+53&gt;:\tnopl   (%rax)\n   0x0000000000401370 &lt;+56&gt;:\tjne    0x401396 &lt;strings_not_equal+94&gt;\n   0x0000000000401372 &lt;+58&gt;:\tadd    $0x1,%rbx\n</code></pre>\n<p>断点打到0x401338的位置，运行程序<br>不停的stepi，知道运行到了第一次调用string_length函数,字符串一般来说是需要一个基址的,所以找能充当基指指针的寄存器,下面是试探过程</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">x&#x2F;s $rbp &#x2F;&#x2F;这个是内置字符串\nx&#x2F;s $rbx &#x2F;&#x2F;这个是我们输入的字符串</code></pre>\n<h3 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h3><blockquote>\n<p>Border relations with Canada have never been better.</p>\n</blockquote>\n<p>进入strings_not_equal函数才能看到我们输入的字符串是保存在%rbx这个寄存器当中的</p>\n<h2 id=\"phase-2-循环\"><a href=\"#phase-2-循环\" class=\"headerlink\" title=\"phase_2 循环\"></a>phase_2 循环</h2><p>disas phase_2得到如下代码(我分成了两部分,这个是前面一部分)</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">0x0000000000400efc &lt;+0&gt;:\tpush   %rbp  \n0x0000000000400efd &lt;+1&gt;:\tpush   %rbx \n0x0000000000400efe &lt;+2&gt;:\tsub    $0x28,%rsp\n0x0000000000400f02 &lt;+6&gt;:\tmov    %rsp,%rsi\n0x0000000000400f05 &lt;+9&gt;:\tcall   0x40145c &lt;read_six_numbers&gt; &#x2F;&#x2F;这里从名字可以知道要输入6个数字，那么是整形还是浮点数呢?这里先输入6个整形试试</code></pre>\n<p>输入stepi进入到read_six_numbers函数中，disas read_six_numbers得到下面的代码</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">Dump of assembler code for function read_six_numbers:\n   0x000000000040145c &lt;+0&gt;:\tsub    $0x18,%rsp  &#x2F;&#x2F; 这个不用管\n   0x0000000000401460 &lt;+4&gt;:\tmov    %rsi,%rdx\n   0x0000000000401463 &lt;+7&gt;:\tlea    0x4(%rsi),%rcx\n   0x0000000000401467 &lt;+11&gt;:\tlea    0x14(%rsi),%rax\n   0x000000000040146b &lt;+15&gt;:\tmov    %rax,0x8(%rsp)\n   0x0000000000401470 &lt;+20&gt;:\tlea    0x10(%rsi),%rax\n   0x0000000000401474 &lt;+24&gt;:\tmov    %rax,(%rsp)\n   0x0000000000401478 &lt;+28&gt;:\tlea    0xc(%rsi),%r9\n   0x000000000040147c &lt;+32&gt;:\tlea    0x8(%rsi),%r8\n   0x0000000000401480 &lt;+36&gt;:\tmov    $0x4025c3,%esi   &#x2F;&#x2F;看看%esi寄存器的内容\n   0x0000000000401485 &lt;+41&gt;:\tmov    $0x0,%eax\n   0x000000000040148a &lt;+46&gt;:\tcall   0x400bf0 &lt;__isoc99_sscanf@plt&gt;\n   0x000000000040148f &lt;+51&gt;:\tcmp    $0x5,%eax\n   0x0000000000401492 &lt;+54&gt;:\tjg     0x401499 &lt;read_six_numbers+61&gt;\n   0x0000000000401494 &lt;+56&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n   0x0000000000401499 &lt;+61&gt;:\tadd    $0x18,%rsp\n   0x000000000040149d &lt;+65&gt;:\tret    </code></pre>\n<p>注意这一行<code>mov    $0x4025c3,%esi</code>,因为字符串是不可变的，地址固定死了，所以找立即数<br>esi寄存器的内容为<br><img src=\"/../images/bomb_phrase2.jpg\" alt=\"在这里插入图片描述\"><br>六个整形数据猜测是对的，我们输入1 2 3 4 5 6试试<br>继续阅读phase_2后部分的代码</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">0x0000000000400f05 &lt;+9&gt;:\tcall   0x40145c &lt;read_six_numbers&gt;\n   0x0000000000400f0a &lt;+14&gt;:\tcmpl   $0x1,(%rsp) &#x2F;&#x2F; (%rsp)&#x3D;*rsp 就是我们输入的第一个数字1\n   0x0000000000400f0e &lt;+18&gt;:\tje     0x400f30 &lt;phase_2+52&gt; &#x2F;&#x2F; 判断是否相等，相等就跳转\n   0x0000000000400f10 &lt;+20&gt;:\tcall   0x40143a &lt;explode_bomb&gt; &#x2F;&#x2F;否则就炸了\n   0x0000000000400f15 &lt;+25&gt;:\tjmp    0x400f30 &lt;phase_2+52&gt;\n   0x0000000000400f17 &lt;+27&gt;:\tmov    -0x4(%rbx),%eax &#x2F;&#x2F; eax保存的是我们输入的第一个数，把rbx存放的值减4\n   0x0000000000400f1a &lt;+30&gt;:\tadd    %eax,%eax  &#x2F;&#x2F; eax*&#x3D;2\n   0x0000000000400f1c &lt;+32&gt;:\tcmp    %eax,(%rbx) &#x2F;&#x2F; 比较eax的值和rbx(就是第二个值)是否相等\n   0x0000000000400f1e &lt;+34&gt;:\tje     0x400f25 &lt;phase_2+41&gt; &#x2F;&#x2F; 相等就跳转\n   0x0000000000400f20 &lt;+36&gt;:\tcall   0x40143a &lt;explode_bomb&gt; &#x2F;&#x2F;反之爆炸\n   0x0000000000400f25 &lt;+41&gt;:\tadd    $0x4,%rbx &#x2F;&#x2F; rbx 保存的是第三个值\n   0x0000000000400f29 &lt;+45&gt;:\tcmp    %rbp,%rbx &#x2F;&#x2F; 看看是否遍历完了\n   0x0000000000400f2c &lt;+48&gt;:\tjne    0x400f17 &lt;phase_2+27&gt;\n   0x0000000000400f2e &lt;+50&gt;:\tjmp    0x400f3c &lt;phase_2+64&gt;\n   0x0000000000400f30 &lt;+52&gt;:\tlea    0x4(%rsp),%rbx &#x2F;&#x2F; 0x4(%rsp)&#x3D;我们输入的第二个数,加4的原因是因为int类型是4个字节\n   0x0000000000400f35 &lt;+57&gt;:\tlea    0x18(%rsp),%rbp&#x2F;&#x2F; 0x18转换为十进制数为24,也就是第6个数字后面的第一个存储单元\n   0x0000000000400f3a &lt;+62&gt;:\tjmp    0x400f17 &lt;phase_2+27&gt;\n   0x0000000000400f3c &lt;+64&gt;:\tadd    $0x28,%rsp</code></pre>\n\n\n<p>意思如下<br>程序开始时,将 <code>(%rsp)</code> 的值与立即数<code>$0x1</code>进行比较，所以第一个输入数必须为1，跳转至400f30，用lea指令分别加载<code>%rsp+4</code>和<code>%rsp+24</code>对应的地址到%rbx和%rbp，因为int型数据占4个字节，所以%rbx和%rbp分别存放第2个输入数的地址和第6个输入数的后一块的地址<br>后跳转至400f17，此时<code>(%rbx-4)</code>对应的值即<code>(%rsp)</code>对应的值，将其存放值<code>%eax</code>中，将该值*2后与<code>(%rbx)</code>对应的值（即第二个输入值）进行比较，即后一个数是前一个数的2倍，所以第二个输入值必须为2，后跳转至400f25，得到<code>%rbx=%rbx+4</code>，与<code>%rbp</code>进行比较（<code>%rbx</code>对应的值(地址)是否为<code>%rbp</code>对应的值(地址)），若不相等则又跳转至400f17重复操作，若相等，则跳转至400f3c，结束循环，可知这是一个循环操作，看是否比较完6个数。</p>\n<p>循环中寄存器对应的值为:</p>\n<table>\n<thead>\n<tr>\n<th>%rbx</th>\n<th>%rbp</th>\n<th>%eax</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%rsp+4</td>\n<td>%rsp+24</td>\n<td>(%rsp)*2&#x3D;2</td>\n</tr>\n<tr>\n<td>%rsp+8</td>\n<td></td>\n<td>(%rsp)*2&#x3D;4</td>\n</tr>\n<tr>\n<td>%rsp+12</td>\n<td></td>\n<td>(%rsp)*2&#x3D;8</td>\n</tr>\n<tr>\n<td>%rsp+16</td>\n<td></td>\n<td>(%rsp)*2&#x3D;16</td>\n</tr>\n<tr>\n<td>%rsp+20</td>\n<td></td>\n<td>(%rsp)*2&#x3D;32</td>\n</tr>\n<tr>\n<td>%rsp+24</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>c代码如下</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int main()&#123;\n\tint[] array &#x3D; new int[6];\n\tfor(int i&#x3D;1;i&lt;6;i++)\n\t\tarray[i]&#x3D;array[i-1]*2;\n\treturn 0;\n&#125;</code></pre>\n\n<h3 id=\"答案-1\"><a href=\"#答案-1\" class=\"headerlink\" title=\"答案\"></a>答案</h3><blockquote>\n<p>1 2 4 8 16 32</p>\n</blockquote>\n<p>输入的第一个数时保存在(%rsp)中</p>\n<h2 id=\"phase-3-分支语句\"><a href=\"#phase-3-分支语句\" class=\"headerlink\" title=\"phase_3 分支语句\"></a>phase_3 分支语句</h2><p>对汇编代码进行分析</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">Dump of assembler code for function phase_3:\n   0x0000000000400f43 &lt;+0&gt;:\tsub    $0x18,%rsp\n   0x0000000000400f47 &lt;+4&gt;:\tlea    0xc(%rsp),%rcx &#x2F;&#x2F;这个可能是存储第二个数的\n   0x0000000000400f4c &lt;+9&gt;:\tlea    0x8(%rsp),%rdx&#x2F;&#x2F;这个可能是存储第一个数的\n   0x0000000000400f51 &lt;+14&gt;:\tmov    $0x4025cf,%esi  &#x2F;&#x2F;出现立即数了,后面调用了scanf，这里应该是初始化的，在gdb 中用x&#x2F;s $esi 可以得到 %d %d\n   0x0000000000400f56 &lt;+19&gt;:\tmov    $0x0,%eax\n   0x0000000000400f5b &lt;+24&gt;:\tcall   0x400bf0 &lt;__isoc99_sscanf@plt&gt;\n   0x0000000000400f60 &lt;+29&gt;:\tcmp    $0x1,%eax&#x2F;&#x2F;%eax存储函数的返回值的，scanf的函数返回值就是输入数据的个数\n   0x0000000000400f63 &lt;+32&gt;:\tjg     0x400f6a &lt;phase_3+39&gt;&#x2F;&#x2F;若大于1就跳转\n   0x0000000000400f65 &lt;+34&gt;:\tcall   0x40143a &lt;explode_bomb&gt;&#x2F;&#x2F;否则就爆炸\n   0x0000000000400f6a &lt;+39&gt;:\tcmpl   $0x7,0x8(%rsp)\n   0x0000000000400f6f &lt;+44&gt;:\tja     0x400fad &lt;phase_3+106&gt;&#x2F;&#x2F;无符号大于则跳转，跳转就爆炸了，所以第一个数必须小于7，可以等于,但是不能是负数\n   0x0000000000400f71 &lt;+46&gt;:\tmov    0x8(%rsp),%eax&#x2F;&#x2F;%eax存储的是输入的第一个数\n   0x0000000000400f75 &lt;+50&gt;:\tjmp    *0x402470(,%rax,8) &#x2F;&#x2F;*0x402470 &#x3D; 124,通过x&#x2F;d 0x402470得到, rax是64位的，eax是32位的，就是说eax是rax的低32位，这里应该是124+%rax*8(%rax就是我们输入的第一个数)来实现跳转。\n   0x0000000000400f7c &lt;+57&gt;:\tmov    $0xcf,%eax\n   0x0000000000400f81 &lt;+62&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;\n   0x0000000000400f83 &lt;+64&gt;:\tmov    $0x2c3,%eax\n   0x0000000000400f88 &lt;+69&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;\n   0x0000000000400f8a &lt;+71&gt;:\tmov    $0x100,%eax\n   0x0000000000400f8f &lt;+76&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;\n   0x0000000000400f91 &lt;+78&gt;:\tmov    $0x185,%eax\n   0x0000000000400f96 &lt;+83&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;\n   0x0000000000400f98 &lt;+85&gt;:\tmov    $0xce,%eax\n--Type &lt;RET&gt; for more, q to quit, c to continue without paging--\n   0x0000000000400f9d &lt;+90&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;\n   0x0000000000400f9f &lt;+92&gt;:\tmov    $0x2aa,%eax\n   0x0000000000400fa4 &lt;+97&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;\n   0x0000000000400fa6 &lt;+99&gt;:\tmov    $0x147,%eax\n   0x0000000000400fab &lt;+104&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;\n   0x0000000000400fad &lt;+106&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n   0x0000000000400fb2 &lt;+111&gt;:\tmov    $0x0,%eax\n   0x0000000000400fb7 &lt;+116&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;\n   0x0000000000400fb9 &lt;+118&gt;:\tmov    $0x137,%eax\n   0x0000000000400fbe &lt;+123&gt;:\tcmp    0xc(%rsp),%eax\n   0x0000000000400fc2 &lt;+127&gt;:\tje     0x400fc9 &lt;phase_3+134&gt;\n   0x0000000000400fc4 &lt;+129&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n   0x0000000000400fc9 &lt;+134&gt;:\tadd    $0x18,%rsp\n   0x0000000000400fcd &lt;+138&gt;:\tret    \nEnd of assembler dump.</code></pre>\n<p>第一个数的范围是在[0,7]之间，开始试探<br>n1&#x3D;0,跳转到0x400f7c,若n2!&#x3D;0xcf,则爆炸<br>n1&#x3D;1,跳转到0x400fb9,若n2!&#x3D;0x137,则爆炸<br>n1&#x3D;2,跳转到0x400f83,若n2!&#x3D;0x2c3,则爆炸<br>n1&#x3D;3,跳转到0x400f8a,若n2!&#x3D;0x100,则爆炸<br>n1&#x3D;4,跳转到0x400f91,若n2!&#x3D;0x185,则爆炸<br>n1&#x3D;5,跳转到0x400f98,若n2!&#x3D;0xce,则爆炸<br>n1&#x3D;6,跳转到0x400f9f,若n2!&#x3D;0x2aa,则爆炸<br>n1&#x3D;7,跳转到0x400fa6,若n2!&#x3D;0x147,则爆炸</p>\n<p>c代码</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void phase_3(char* input)&#123;\n\t&#x2F;&#x2F;0x8(%rsp) 0xc(%rsp)\n\tint n1,n2;\n\t&#x2F;&#x2F;res存放返回输入数据的个数\n\tint res &#x3D; sscanf(input,&quot;%d %d&quot;,&amp;n1,&amp;n2);\n\tif(res&lt;&#x3D;1)\n\t\texplode_bomb();\n\tswitch(n1)&#123;\n\t\tcase 0:\n\t\tif(n2!&#x3D;0xcf)\n\t\t\texplode_bomb();\n\t\tbreak;\n\t\tcase 1:\n\t\tif(n2!&#x3D;0x137)\n\t\t\texplode_bomb();\n\t\tbreak;\n\t\tcase 2:\n\t\tif(n2!&#x3D;0x2c3)\n\t\t\texplode_bomb();\n\t\tbreak;\n\t\tcase 3:\n\t\tif(n2!&#x3D;0x100)\n\t\t\texplode_bomb();\n\t\tbreak;\n\t\tcase 4:\n\t\tif(n2!&#x3D;0x185)\n\t\t\texplode_bomb();\n\t\tbreak;\n\t\tcase 5:\n\t\tif(n2!&#x3D;0xce)\n\t\t\texplode_bomb();\n\t\tbreak;\n\t\tcase 6:\n\t\tif(n2!&#x3D;0x2aa)\n\t\t\texplode_bomb();\n\t\tbreak;\n\t\tcase 7:\n\t\tif(n2!&#x3D;0x147)\n\t\t\texplode_bomb();\n\t\tbreak;\n\t&#125;\n&#125;</code></pre>\n\n\n<h3 id=\"答案-2\"><a href=\"#答案-2\" class=\"headerlink\" title=\"答案\"></a>答案</h3><ul>\n<li>0 207</li>\n<li>1 311</li>\n<li>2 707</li>\n<li>3 256</li>\n<li>4 389</li>\n<li>5 206</li>\n<li>6 682</li>\n<li>7 327</li>\n</ul>\n<h2 id=\"phase-4-递归\"><a href=\"#phase-4-递归\" class=\"headerlink\" title=\"phase_4 递归\"></a>phase_4 递归</h2><p>分析汇编代码</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">Dump of assembler code for function phase_4:\n   0x000000000040100c &lt;+0&gt;:\tsub    $0x18,%rsp\t# 给局部变量腾出空间\n   0x0000000000401010 &lt;+4&gt;:\tlea    0xc(%rsp),%rcx   # 我们输入的第二个数\n   0x0000000000401015 &lt;+9&gt;:\tlea    0x8(%rsp),%rdx\t# 我们输入的第一个数\n   0x000000000040101a &lt;+14&gt;:\tmov    $0x4025cf,%esi\t# 通过x&#x2F;s 0x4025cf 可以得到是格式化字符串&quot;%d %d&quot;\n   0x000000000040101f &lt;+19&gt;:\tmov    $0x0,%eax        # 这个就不说了\n   0x0000000000401024 &lt;+24&gt;:\tcall   0x400bf0 &lt;__isoc99_sscanf@plt&gt; # 调用了scanf函数\n   0x0000000000401029 &lt;+29&gt;:\tcmp    $0x2,%eax\t# 如果输入的数字个数不等于2就爆炸了\n   0x000000000040102c &lt;+32&gt;:\tjne    0x401035 &lt;phase_4+41&gt;\n   0x000000000040102e &lt;+34&gt;:\tcmpl   $0xe,0x8(%rsp)  # 比较第一个数与14的大小，若小于就跳转，若大于就爆炸，第一个数的范围[0,14]\n   0x0000000000401033 &lt;+39&gt;:\tjbe    0x40103a &lt;phase_4+46&gt;\n   0x0000000000401035 &lt;+41&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n   0x000000000040103a &lt;+46&gt;:\tmov    $0xe,%edx       \n   0x000000000040103f &lt;+51&gt;:\tmov    $0x0,%esi\n   0x0000000000401044 &lt;+56&gt;:\tmov    0x8(%rsp),%edi\n   0x0000000000401048 &lt;+60&gt;:\tcall   0x400fce &lt;func4&gt; #调用func4 应该是需要%edx %esi %edi这几个参数\n   0x000000000040104d &lt;+65&gt;:\ttest   %eax,%eax\t# 按位逻辑与操作\n   0x000000000040104f &lt;+67&gt;:\tjne    0x401058 &lt;phase_4+76&gt; # 如果%eax不等于0,则跳转至爆炸\n   0x0000000000401051 &lt;+69&gt;:\tcmpl   $0x0,0xc(%rsp)\t#比较第二个数与0的大小关系\n   0x0000000000401056 &lt;+74&gt;:\tje     0x40105d &lt;phase_4+81&gt; #相等就跳转结尾\n   0x0000000000401058 &lt;+76&gt;:\tcall   0x40143a &lt;explode_bomb&gt; #不相等就爆炸\n   0x000000000040105d &lt;+81&gt;:\tadd    $0x18,%rsp\n   0x0000000000401061 &lt;+85&gt;:\tret    </code></pre>\n<p>接下来看看func4干了什么</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">Dump of assembler code for function func4:\n   0x0000000000400fce &lt;+0&gt;:\tsub    $0x8,%rsp   # 为局部变量腾出空间\n   0x0000000000400fd2 &lt;+4&gt;:\tmov    %edx,%eax   # 0xe\n   0x0000000000400fd4 &lt;+6&gt;:\tsub    %esi,%eax   # 0xe-0x0\n   0x0000000000400fd6 &lt;+8&gt;:\tmov    %eax,%ecx   # ecx &#x3D; 0xe\n   0x0000000000400fd8 &lt;+10&gt;:\tshr    $0x1f,%ecx  # %ecx的值逻辑右移31位&#x3D;1110&gt;&gt;31&#x3D;14&#x2F;2^31 &#x3D;0\n   0x0000000000400fdb &lt;+13&gt;:\tadd    %ecx,%eax   # ecx &#x3D; ecx + eax &#x3D; 0 + e\n   0x0000000000400fdd &lt;+15&gt;:\tsar    %eax\t   # 算数右移1位 %eax &#x3D; %eax &#x2F;2 &#x3D; 0xe&#x2F;2 &#x3D; 7 \n   0x0000000000400fdf &lt;+17&gt;:\tlea    (%rax,%rsi,1),%ecx # %eax是%rax的低32位，%esi是%rsi的低32位  %rax + %rsi * 1 &#x3D; 7 + 0&#x3D;7 %ecx&#x3D;7\n   0x0000000000400fe2 &lt;+20&gt;:\tcmp    %edi,%ecx  #  %edi保存的是输入的第一个数字 %ecx &#x3D; 7 \n   0x0000000000400fe4 &lt;+22&gt;:\tjle    0x400ff2 &lt;func4+36&gt;\n   0x0000000000400fe6 &lt;+24&gt;:\tlea    -0x1(%rcx),%edx  # 7 -1 &#x3D;&gt;edx&#x3D;6\n   0x0000000000400fe9 &lt;+27&gt;:\tcall   0x400fce &lt;func4&gt; # 递归调用\n   0x0000000000400fee &lt;+32&gt;:\tadd    %eax,%eax\t# eax*&#x3D;2\n   0x0000000000400ff0 &lt;+34&gt;:\tjmp    0x401007 &lt;func4+57&gt;  # 出口\n   0x0000000000400ff2 &lt;+36&gt;:\tmov    $0x0,%eax  # %eax &#x3D; 0\n   0x0000000000400ff7 &lt;+41&gt;:\tcmp    %edi,%ecx  # n1, 7 \n   0x0000000000400ff9 &lt;+43&gt;:\tjge    0x401007 &lt;func4+57&gt; # n1&gt;&#x3D;7跳转到func7 出口\n   0x0000000000400ffb &lt;+45&gt;:\tlea    0x1(%rcx),%esi  # ecx是rcx的低32位     0x1+7&#x3D;&gt;esi&#x3D;8 \n   0x0000000000400ffe &lt;+48&gt;:\tcall   0x400fce &lt;func4&gt;\t  # 跳转\n   0x0000000000401003 &lt;+53&gt;:\tlea    0x1(%rax,%rax,1),%eax # 0x1 + func4+func4&#x3D;&gt;eax\n   0x0000000000401007 &lt;+57&gt;:\tadd    $0x8,%rsp\n   0x000000000040100b &lt;+61&gt;:\tret    \n</code></pre>\n<p>看看这个</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">0x0000000000401051 &lt;+69&gt;:\tcmpl   $0x0,0xc(%rsp)\t#比较第二个数与0的大小关系\n  0x0000000000401056 &lt;+74&gt;:\tje     0x40105d &lt;phase_4+81&gt; #相等就跳转结尾\n\n0x000000000040104d &lt;+65&gt;:\ttest   %eax,%eax\t# 按位逻辑与操作\n  0x000000000040104f &lt;+67&gt;:\tjne    0x401058 &lt;phase_4+76&gt; # 如果%eax不等于0,则跳转至爆炸</code></pre>\n<p>所以n2必须等于0，n1的值要让函数func4的返回值为4，且n1∈[0,14]</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F;a: %edi b:%esi c:%edx d: %ecx e:%eax\nint func4(int a,int b,int c)\n&#123;&#x2F;&#x2F;a in %rdi,b in %rsi,c in %rdx,e in %rax,d in %ecx\n &#x2F;&#x2F;y的初始值为0，z的初始值为14\n  int t&#x3D;c-b;\n  int d&#x3D;e&gt;&gt;31;\n  e&#x3D;(e+d)&gt;&gt;1;\n  d&#x3D;e+b;\n  if(k&gt;a)\n  &#123;\n    c&#x3D;d-1;\n    func4(a,b,c);\n    e*&#x3D;2;\n    return e;\n  &#125;\n  else\n   &#123;\n     e&#x3D;0;\n     if(d&lt;a)\n     &#123;\n        b&#x3D;da+1;\n        func4(a,b,c);\n        e&#x3D;2*e+1;\n        return e;\n     &#125;\n     else\n         return e;   &#x2F;&#x2F;要使返回值e（%eax）为0，其中一个答案为a&#x3D;d&#x3D;7\n   &#125;\n&#125;</code></pre>\n<p>分析可得一个答案 7 0<br>其余的挨个带进去试</p>\n<h3 id=\"答案-3\"><a href=\"#答案-3\" class=\"headerlink\" title=\"答案\"></a>答案</h3><blockquote>\n<p>7 0</p>\n</blockquote>\n<h2 id=\"phase-5-指针-字符串比较\"><a href=\"#phase-5-指针-字符串比较\" class=\"headerlink\" title=\"phase_5 指针 字符串比较\"></a>phase_5 指针 字符串比较</h2><p>phase_5的汇编代码</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">Dump of assembler code for function phase_5:\n   0x0000000000401062 &lt;+0&gt;:\tpush   %rbx\n   0x0000000000401063 &lt;+1&gt;:\tsub    $0x20,%rsp\n   0x0000000000401067 &lt;+5&gt;:\tmov    %rdi,%rbx   #%rbx存放我们输入的字符串地址\n   0x000000000040106a &lt;+8&gt;:\tmov    %fs:0x28,%rax\t# 栈破坏检测,csapp P199页(金丝雀值),即在栈帧的任何局部缓冲区与栈状态之间存储一个值,在程序返回前检查该值，若该值发生变化，程序提前终止\n   0x0000000000401073 &lt;+17&gt;:\tmov    %rax,0x18(%rsp) \n   0x0000000000401078 &lt;+22&gt;:\txor    %eax,%eax        # 异或清零\n   0x000000000040107a &lt;+24&gt;:\tcall   0x40131b &lt;string_length&gt; \n   0x000000000040107f &lt;+29&gt;:\tcmp    $0x6,%eax\n   0x0000000000401082 &lt;+32&gt;:\tje     0x4010d2 &lt;phase_5+112&gt; # 输入的字符个数必须等于6，否则爆炸\n   0x0000000000401084 &lt;+34&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n   0x0000000000401089 &lt;+39&gt;:\tjmp    0x4010d2 &lt;phase_5+112&gt; \n   0x000000000040108b &lt;+41&gt;:\tmovzbl (%rbx,%rax,1),%ecx # rbx就是我们输入的字符串地址 翻译成语句:%ecx &#x3D; %rbx + %rax*1 &#x3D; %rbx+0*1&#x3D;%rbx&#x3D;我们输入的第一个字符\n   0x000000000040108f &lt;+45&gt;:\tmov    %cl,(%rsp)    # %cl是%ecx的低8位 \n   0x0000000000401092 &lt;+48&gt;:\tmov    (%rsp),%rdx   # %rdx保存我们输入的一位字符\n   0x0000000000401096 &lt;+52&gt;:\tand    $0xf,%edx     # edx是rdx的低32位，取出低4位\n   0x0000000000401099 &lt;+55&gt;:\tmovzbl 0x4024b0(%rdx),%edx # 0x40240b0是字符串&quot;maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?&quot;的基址，设该字符串为str\n\t\t\t\t\t\t\t   # edx &#x3D; str[rdx]\n   0x00000000004010a0 &lt;+62&gt;:\tmov    %dl,0x10(%rsp,%rax,1) # %dl是rdx的低4位\n   0x00000000004010a4 &lt;+66&gt;:\tadd    $0x1,%rax      # 加一\n   0x00000000004010a8 &lt;+70&gt;:\tcmp    $0x6,%rax      # 和6相比\n   0x00000000004010ac &lt;+74&gt;:\tjne    0x40108b &lt;phase_5+41&gt; # 不等于6跳转\n   0x00000000004010ae &lt;+76&gt;:\tmovb   $0x0,0x16(%rsp)\n   0x00000000004010b3 &lt;+81&gt;:\tmov    $0x40245e,%esi  #0x40245e是字符串flyers的地址，用立即数来表示的，应该是内置的\n   0x00000000004010b8 &lt;+86&gt;:\tlea    0x10(%rsp),%rdi # rdi是aduier的地址 ，结合下面的strings_not_equal函数来看，应该是要把我们输入的东西和flyers比较，由于我们输入的是abcdef,a的ASCII码是97，低4位是0001，所以取得是索引为1的,接下来就是要改变我们输入的东西，让其在str中截取得到的字符串为flyers即可\n   0x00000000004010bd &lt;+91&gt;:\tcall   0x401338 &lt;strings_not_equal&gt;\n   0x00000000004010c2 &lt;+96&gt;:\ttest   %eax,%eax \n   0x00000000004010c4 &lt;+98&gt;:\tje     0x4010d9 &lt;phase_5+119&gt;  #相等跳转\n   0x00000000004010c6 &lt;+100&gt;:\tcall   0x40143a &lt;explode_bomb&gt; #不相等就炸\n   0x00000000004010cb &lt;+105&gt;:\tnopl   0x0(%rax,%rax,1)\n   0x00000000004010d0 &lt;+110&gt;:\tjmp    0x4010d9 &lt;phase_5+119&gt;\n   0x00000000004010d2 &lt;+112&gt;:\tmov    $0x0,%eax  # %eax清零\n   0x00000000004010d7 &lt;+117&gt;:\tjmp    0x40108b &lt;phase_5+41&gt; \n   0x00000000004010d9 &lt;+119&gt;:\tmov    0x18(%rsp),%rax\n   0x00000000004010de &lt;+124&gt;:\txor    %fs:0x28,%rax\n   0x00000000004010e7 &lt;+133&gt;:\tje     0x4010ee &lt;phase_5+140&gt;\n   0x00000000004010e9 &lt;+135&gt;:\tcall   0x400b30 &lt;__stack_chk_fail@plt&gt;\n   0x00000000004010ee &lt;+140&gt;:\tadd    $0x20,%rsp\n   0x00000000004010f2 &lt;+144&gt;:\tpop    %rbx\n   0x00000000004010f3 &lt;+145&gt;:\tret    \n</code></pre>\n\n<p>所以过关条件就是通过我们输入的六个字符的ASCII码的低4位作为索引,取切maduier那一大串的东西且返回的结果必须是flyers<br>下面是flyers中各字符在maduier中的位置</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>f</td>\n<td>9</td>\n</tr>\n<tr>\n<td>I</td>\n<td>15</td>\n</tr>\n<tr>\n<td>y</td>\n<td>14</td>\n</tr>\n<tr>\n<td>e</td>\n<td>5</td>\n</tr>\n<tr>\n<td>r</td>\n<td>6</td>\n</tr>\n<tr>\n<td>s</td>\n<td>7</td>\n</tr>\n</tbody></table>\n<p>找到六个字符，他们的ASCII码值的低4位要是表格中的(从上到下，依次符合即可)<br>接下来就是找字符</p>\n<h4 id=\"答案-4\"><a href=\"#答案-4\" class=\"headerlink\" title=\"答案\"></a>答案</h4><p>不唯一</p>\n<blockquote>\n<p>9?&gt;uvw<br>IONEFG</p>\n</blockquote>\n<h3 id=\"phase6-链表\"><a href=\"#phase6-链表\" class=\"headerlink\" title=\"phase6 链表\"></a>phase6 链表</h3><p>这个我确实是很蒙，我尽力记录清楚,过段时间我再回顾一下，我画点图来帮助理解<br>第一部分</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">Dump of assembler code for function phase_6:\n   0x00000000004010f4 &lt;+0&gt;:\tpush   %r14\n   0x00000000004010f6 &lt;+2&gt;:\tpush   %r13\n   0x00000000004010f8 &lt;+4&gt;:\tpush   %r12\n   0x00000000004010fa &lt;+6&gt;:\tpush   %rbp\n   0x00000000004010fb &lt;+7&gt;:\tpush   %rbx\n   0x00000000004010fc &lt;+8&gt;:\tsub    $0x50,%rsp\n   0x0000000000401100 &lt;+12&gt;:\tmov    %rsp,%r13\n   0x0000000000401103 &lt;+15&gt;:\tmov    %rsp,%rsi\n   0x0000000000401106 &lt;+18&gt;:\tcall   0x40145c &lt;read_six_numbers&gt;\n   0x000000000040110b &lt;+23&gt;:\tmov    %rsp,%r14 # 保存我们输入的数的\n   0x000000000040110e &lt;+26&gt;:\tmov    $0x0,%r12d # \n   0x0000000000401114 &lt;+32&gt;:\tmov    %r13,%rbp  \n   0x0000000000401117 &lt;+35&gt;:\tmov    0x0(%r13),%eax # %eax &#x3D; nums[0]\n   0x000000000040111b &lt;+39&gt;:\tsub    $0x1,%eax   # %eax-&#x3D;1\n   0x000000000040111e &lt;+42&gt;:\tcmp    $0x5,%eax  # eax-1&lt;&#x3D;5\n   0x0000000000401121 &lt;+45&gt;:\tjbe    0x401128 &lt;phase_6+52&gt;\n   0x0000000000401123 &lt;+47&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n\n   0x0000000000401128 &lt;+52&gt;:\tadd    $0x1,%r12d # r12d&#x3D;1\n   0x000000000040112c &lt;+56&gt;:\tcmp    $0x6,%r12d \n   0x0000000000401130 &lt;+60&gt;:\tje     0x401153 &lt;phase_6+95&gt;  \n   0x0000000000401132 &lt;+62&gt;:\tmov    %r12d,%ebx # %ebx &#x3D; 1  退出循环的条件是遍历完6个数字\n\n   0x0000000000401135 &lt;+65&gt;:\tmovslq %ebx,%rax  # rax &#x3D; 1\n   0x0000000000401138 &lt;+68&gt;:\tmov    (%rsp,%rax,4),%eax  # eax &#x3D;  2 拿到下一个元素给eax  4是int类型的4个字节\n   0x000000000040113b &lt;+71&gt;:\tcmp    %eax,0x0(%rbp)  # nums[i] !&#x3D;nums[0]\n   0x000000000040113e &lt;+74&gt;:\tjne    0x401145 &lt;phase_6+81&gt;\n   0x0000000000401140 &lt;+76&gt;:\tcall   0x40143a &lt;explode_bomb&gt; \n   0x0000000000401145 &lt;+81&gt;:\tadd    $0x1,%ebx  # ebx&#x3D;2\n   0x0000000000401148 &lt;+84&gt;:\tcmp    $0x5,%ebx  # ebx&lt;&#x3D;5\n   0x000000000040114b &lt;+87&gt;:\tjle    0x401135 &lt;phase_6+65&gt; # 这个循环是判断数组运算是否相等\n   0x000000000040114d &lt;+89&gt;:\tadd    $0x4,%r13\n   0x0000000000401151 &lt;+93&gt;:\tjmp    0x401114 &lt;phase_6+32&gt;\n   \n\n   0x0000000000401153 &lt;+95&gt;:\tlea    0x18(%rsp),%rsi\n   0x0000000000401158 &lt;+100&gt;:\tmov    %r14,%rax\n   0x000000000040115b &lt;+103&gt;:\tmov    $0x7,%ecx\n   0x0000000000401160 &lt;+108&gt;:\tmov    %ecx,%edx\n   0x0000000000401162 &lt;+110&gt;:\tsub    (%rax),%edx\n   0x0000000000401164 &lt;+112&gt;:\tmov    %edx,(%rax)\n   0x0000000000401166 &lt;+114&gt;:\tadd    $0x4,%rax</code></pre>\n<p>伪代码</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">r14 &#x3D; rsp  nums[0]\nrbp &#x3D; r13  nums[0]\neax &#x3D; nums[0]\neax -&#x3D;1\nfor(r12d &#x3D;0;r12d&lt;6;r12d++)&#123;\nif(eax&gt;6)\n    explode_bomb();\nr12d++\n if(r12d&#x3D;&#x3D;6)\n\tbreak\n ebx &#x3D; r12d\n for(ebx&#x3D;r12d;ebx&lt;&#x3D;5;ebx++)&#123;\n\trax &#x3D; nums[rbx]\n \tif(nums[rbx] !&#x3D; rbp)\n\t&#123;ebx++;&#125;\n  else \n    explode_bomb();\n&#125;\nr13++; &#x2F;&#x2F;(这里是加1，但是反应在内存上是加上了1*int类型所占的字节)\n&#125;\n&#125;</code></pre>\n<p><strong>也就是说每个数字必须&lt;&#x3D;6,且6个数字互不相等</strong><br>第二部分</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">0x0000000000401153 &lt;+95&gt;:\tlea    0x18(%rsp),%rsi # rsi &#x3D; 0 ,判定是否遍历完了，第六个元素后面的那个存储单元没有值，那就是0，0x18&#x3D;&gt;24，是因为我们有六个元素，每个元素4个字节，拿到最后一个元素后要地址(0x14)要+4，所以是0x18\n0x0000000000401158 &lt;+100&gt;:\tmov    %r14,%rax  # *r14 &#x3D; 5 &#x3D; nums[0]\n0x000000000040115b &lt;+103&gt;:\tmov    $0x7,%ecx  # ecx &#x3D; 7\n0x0000000000401160 &lt;+108&gt;:\tmov    %ecx,%edx  # edx &#x3D; ecx &#x3D; 7\n0x0000000000401162 &lt;+110&gt;:\tsub    (%rax),%edx # edx &#x3D; edx  - *rax &#x3D; 7 - *rax\n0x0000000000401164 &lt;+112&gt;:\tmov    %edx,(%rax) # *rax &#x3D; edx\n0x0000000000401166 &lt;+114&gt;:\tadd    $0x4,%rax   # rax+&#x3D;4 获取下一个元素\n0x000000000040116a &lt;+118&gt;:\tcmp    %rsi,%rax  # rax &#x3D;num[1]&#x3D;7-num[1]\n0x000000000040116d &lt;+121&gt;:\tjne    0x401160 &lt;phase_6+108&gt;</code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">rsi &#x3D; 0;&#x2F;&#x2F;实际上是nums[6]\necx &#x3D; 7;\nfor(rax&#x3D;0;rax&lt;6;rax++) &#x2F;&#x2F;底层里面nums[6]&#x3D;0,要是不好理解，可以把中间的语句换成rax!&#x3D;rsi,应该好理解点\n\tnums[rax]&#x3D;7-nums[rax];\n\t</code></pre>\n<p>第三部分<br>第三部分中有一条语句</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">0x0000000000401183 &lt;+143&gt;:\tmov    $0x6032d0,%edx  </code></pre>\n<p>通过x&#x2F;30来查看 0x6032d0发现<br><img src=\"/../images/bomb6.3.jpg\" alt=\"在这里插入图片描述\"><br>这是一个链表,但是前面的14c不知道是什么东西，结点如下</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">struct node&#123;\n\tint value;\n\tint number;\n\tnode* next;\n&#125;</code></pre>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">0x000000000040116f &lt;+123&gt;:\tmov    $0x0,%esi  # esi &#x3D; 0 \n0x0000000000401174 &lt;+128&gt;:\tjmp    0x401197 &lt;phase_6+163&gt;\n0x0000000000401176 &lt;+130&gt;:\tmov    0x8(%rdx),%rdx # 是一个node类型 rdx &#x3D; 当前结点的next值\n0x000000000040117a &lt;+134&gt;:\tadd    $0x1,%eax   # eax +&#x3D;1\n0x000000000040117d &lt;+137&gt;:\tcmp    %ecx,%eax   \n0x000000000040117f &lt;+139&gt;:\tjne    0x401176 &lt;phase_6+130&gt; # 不相等继续遍历，rdx最终指向链表的第%eax个结点\n0x0000000000401181 &lt;+141&gt;:\tjmp    0x401188 &lt;phase_6+148&gt;\n0x0000000000401183 &lt;+143&gt;:\tmov    $0x6032d0,%edx  # 0x6032d0是node1的地址\n0x0000000000401188 &lt;+148&gt;:\tmov    %rdx,0x20(%rsp,%rsi,2) # (rsp+32+rsi*2)&#x3D;rdx\n0x000000000040118d &lt;+153&gt;:\tadd    $0x4,%rsi # rsi+&#x3D;4 \n0x0000000000401191 &lt;+157&gt;:\tcmp    $0x18,%rsi # 24\n0x0000000000401195 &lt;+161&gt;:\tje     0x4011ab &lt;phase_6+183&gt;\n0x0000000000401197 &lt;+163&gt;:\tmov    (%rsp,%rsi,1),%ecx  # ecx &#x3D; *(rsp + rsi) \n0x000000000040119a &lt;+166&gt;:\tcmp    $0x1,%ecx # ecx&lt;&#x3D;1\n0x000000000040119d &lt;+169&gt;:\tjle    0x401183 &lt;phase_6+143&gt;\n0x000000000040119f &lt;+171&gt;:\tmov    $0x1,%eax # eax &#x3D; 1\n0x00000000004011a4 &lt;+176&gt;:\tmov    $0x6032d0,%edx # 前面的那个立即数是一个node类型的指针,x&#x2F;30 0x6032d0查看他附近的30个字节\n0x00000000004011a9 &lt;+181&gt;:\tjmp    0x401176 &lt;phase_6+130&gt;</code></pre>\n<p>这部分我很蒙<br>第四部分</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">for(int i&#x3D;6;i&gt;&#x3D;1;i--)\n\tnode[i].next&#x3D;node[i-1]; 183~220\n   0x00000000004011ab &lt;+183&gt;:\tmov    0x20(%rsp),%rbx  # rbx &#x3D; (0x20+rsp)\n   0x00000000004011b0 &lt;+188&gt;:\tlea    0x28(%rsp),%rax  # rax &#x3D; (0x28+rsp)\n   0x00000000004011b5 &lt;+193&gt;:\tlea    0x50(%rsp),%rsi  # rsi &#x3D; (0x50+rsp) 0x50是链表的尾端\n   0x00000000004011ba &lt;+198&gt;:\tmov    %rbx,%rcx   \n   0x00000000004011bd &lt;+201&gt;:\tmov    (%rax),%rdx  # rdx &#x3D; *rax\n   0x00000000004011c0 &lt;+204&gt;:\tmov    %rdx,0x8(%rcx) &#x2F;&#x2F;栈\n   0x00000000004011c4 &lt;+208&gt;:\tadd    $0x8,%rax\n   0x00000000004011c8 &lt;+212&gt;:\tcmp    %rsi,%rax\n   0x00000000004011cb &lt;+215&gt;:\tje     0x4011d2 &lt;phase_6+222&gt;\n   0x00000000004011cd &lt;+217&gt;:\tmov    %rdx,%rcx\n   0x00000000004011d0 &lt;+220&gt;:\tjmp    0x4011bd &lt;phase_6+201&gt;\n   # 这里改一下输入,改成6 5 4 3 2 1\n\n   0x00000000004011d2 &lt;+222&gt;:\tmovq   $0x0,0x8(%rdx)  # 把最后一个结点的next域赋值为0\n   0x00000000004011da &lt;+230&gt;:\tmov    $0x5,%ebp       # ebp &#x3D; 5\n   0x00000000004011df &lt;+235&gt;:\tmov    0x8(%rbx),%rax  # 指向重排后的第i个(1&lt;&#x3D;i&lt;&#x3D;5)\n   0x00000000004011e3 &lt;+239&gt;:\tmov    (%rax),%eax    # \n   0x00000000004011e5 &lt;+241&gt;:\tcmp    %eax,(%rbx)    # rbx指向的是重排后的第i+1个 第1个大于等于第二个,要呈现单调递减的顺序，而且比较的是类似于权重\n   0x00000000004011e7 &lt;+243&gt;:\tjge    0x4011ee &lt;phase_6+250&gt;  # 必须要单调递减\n   0x00000000004011e9 &lt;+245&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n   0x00000000004011ee &lt;+250&gt;:\tmov    0x8(%rbx),%rbx\n   0x00000000004011f2 &lt;+254&gt;:\tsub    $0x1,%ebp\n   0x00000000004011f5 &lt;+257&gt;:\tjne    0x4011df &lt;phase_6+235&gt;\n   0x00000000004011f7 &lt;+259&gt;:\tadd    $0x50,%rsp\n   0x00000000004011fb &lt;+263&gt;:\tpop    %rbx\n   0x00000000004011fc &lt;+264&gt;:\tpop    %rbp\n   0x00000000004011fd &lt;+265&gt;:\tpop    %r12\n   \n   0x00000000004011ff &lt;+267&gt;:\tpop    %r13\n   0x0000000000401201 &lt;+269&gt;:\tpop    %r14\n   0x0000000000401203 &lt;+271&gt;:\tret    </code></pre>\n\n<p>梳理<br>1.输入六个数(&lt;&#x3D;6且互不相同)<br>2.nums[i]&#x3D;7-nums[i]<br>7 -nums[0]&#x3D;nums[0]<br>7 -nums[1]&#x3D;nums[1]<br>7 -nums[2]&#x3D;nums[2]<br>7 -nums[3]&#x3D;nums[3]<br>7 -nums[4]&#x3D;nums[4]<br>7 -nums[5]&#x3D;nums[5]<br>1   2   3   4   5   6<br>332 168 924 691 477 443  这个是各个结点的权重,<br><img src=\"/../images/image1.jpg\" alt=\"在这里插入图片描述\"></p>\n<p>根据nums[i]的内容对node进行重排，确保重排后的各个结点的权重呈单调递减</p>\n<blockquote>\n<p>答案: 4 3 2 1 6 5</p>\n</blockquote>\n<p>全部的分析过程</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">Dump of assembler code for function phase_6:\n   0x00000000004010f4 &lt;+0&gt;:\tpush   %r14\n   0x00000000004010f6 &lt;+2&gt;:\tpush   %r13\n   0x00000000004010f8 &lt;+4&gt;:\tpush   %r12\n   0x00000000004010fa &lt;+6&gt;:\tpush   %rbp\n   0x00000000004010fb &lt;+7&gt;:\tpush   %rbx\n   0x00000000004010fc &lt;+8&gt;:\tsub    $0x50,%rsp\n   0x0000000000401100 &lt;+12&gt;:\tmov    %rsp,%r13\n   0x0000000000401103 &lt;+15&gt;:\tmov    %rsp,%rsi\n   0x0000000000401106 &lt;+18&gt;:\tcall   0x40145c &lt;read_six_numbers&gt;\n   0x000000000040110b &lt;+23&gt;:\tmov    %rsp,%r14 # nums[0] 基址\n   0x000000000040110e &lt;+26&gt;:\tmov    $0x0,%r12d # \n   0x0000000000401114 &lt;+32&gt;:\tmov    %r13,%rbp  # nums[0]\n   0x0000000000401117 &lt;+35&gt;:\tmov    0x0(%r13),%eax # %eax &#x3D; nums[0]\n   0x000000000040111b &lt;+39&gt;:\tsub    $0x1,%eax   # %eax-&#x3D;1\n   0x000000000040111e &lt;+42&gt;:\tcmp    $0x5,%eax  # eax-1&lt;&#x3D;5\n   0x0000000000401121 &lt;+45&gt;:\tjbe    0x401128 &lt;phase_6+52&gt;\n   0x0000000000401123 &lt;+47&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n\n   0x0000000000401128 &lt;+52&gt;:\tadd    $0x1,%r12d # r12d&#x3D;1\n   0x000000000040112c &lt;+56&gt;:\tcmp    $0x6,%r12d \n   0x0000000000401130 &lt;+60&gt;:\tje     0x401153 &lt;phase_6+95&gt;  \n   0x0000000000401132 &lt;+62&gt;:\tmov    %r12d,%ebx # %ebx &#x3D; 1  退出循环的条件是遍历完6个数字\n\n   0x0000000000401135 &lt;+65&gt;:\tmovslq %ebx,%rax  # rax &#x3D; 1\n   0x0000000000401138 &lt;+68&gt;:\tmov    (%rsp,%rax,4),%eax  # eax &#x3D;  2 拿到下一个元素给eax  4是int类型的4个字节\n   0x000000000040113b &lt;+71&gt;:\tcmp    %eax,0x0(%rbp)  # nums[i] !&#x3D;nums[0]\n   0x000000000040113e &lt;+74&gt;:\tjne    0x401145 &lt;phase_6+81&gt;\n   0x0000000000401140 &lt;+76&gt;:\tcall   0x40143a &lt;explode_bomb&gt; \n   0x0000000000401145 &lt;+81&gt;:\tadd    $0x1,%ebx  # ebx&#x3D;2\n   0x0000000000401148 &lt;+84&gt;:\tcmp    $0x5,%ebx  # ebx&lt;&#x3D;5\n   0x000000000040114b &lt;+87&gt;:\tjle    0x401135 &lt;phase_6+65&gt; # 这个循环是判断数组运算是否相等\n   0x000000000040114d &lt;+89&gt;:\tadd    $0x4,%r13\n   0x0000000000401151 &lt;+93&gt;:\tjmp    0x401114 &lt;phase_6+32&gt;\n   \n\n   0x0000000000401153 &lt;+95&gt;:\tlea    0x18(%rsp),%rsi # rsi &#x3D; 0 \n   0x0000000000401158 &lt;+100&gt;:\tmov    %r14,%rax  # *r14 &#x3D; 5\n   0x000000000040115b &lt;+103&gt;:\tmov    $0x7,%ecx  # ecx &#x3D; 7\n   0x0000000000401160 &lt;+108&gt;:\tmov    %ecx,%edx  # edx &#x3D; ecx &#x3D; 7\n   0x0000000000401162 &lt;+110&gt;:\tsub    (%rax),%edx # *edx &#x3D; *edx  - *rax &#x3D; 7 - *rax\n   0x0000000000401164 &lt;+112&gt;:\tmov    %edx,(%rax) # *rax &#x3D; edx\n   0x0000000000401166 &lt;+114&gt;:\tadd    $0x4,%rax   # rax+&#x3D;4 获取下一个元素\n   0x000000000040116a &lt;+118&gt;:\tcmp    %rsi,%rax  # rax &#x3D;num[1]&#x3D;7-num[1]\n   0x000000000040116d &lt;+121&gt;:\tjne    0x401160 &lt;phase_6+108&gt;\n\n4 3 2 1 5 6\n\n   0x000000000040116f &lt;+123&gt;:\tmov    $0x0,%esi  # esi &#x3D; 0 \n   0x0000000000401174 &lt;+128&gt;:\tjmp    0x401197 &lt;phase_6+163&gt;\n   0x0000000000401176 &lt;+130&gt;:\tmov    0x8(%rdx),%rdx # 是一个node类型 rdx &#x3D; 当前结点的next值\n   0x000000000040117a &lt;+134&gt;:\tadd    $0x1,%eax   # eax +&#x3D;1\n   0x000000000040117d &lt;+137&gt;:\tcmp    %ecx,%eax   \n   0x000000000040117f &lt;+139&gt;:\tjne    0x401176 &lt;phase_6+130&gt; # 不相等继续遍历，rdx最终指向链表的第%eax个结点\n   0x0000000000401181 &lt;+141&gt;:\tjmp    0x401188 &lt;phase_6+148&gt;\n   0x0000000000401183 &lt;+143&gt;:\tmov    $0x6032d0,%edx  # 0x6032d0是node1的地址\n   0x0000000000401188 &lt;+148&gt;:\tmov    %rdx,0x20(%rsp,%rsi,2) # (rsp+32+rsi*2)&#x3D;rdx\n   0x000000000040118d &lt;+153&gt;:\tadd    $0x4,%rsi # rsi+&#x3D;4 \n   0x0000000000401191 &lt;+157&gt;:\tcmp    $0x18,%rsi # 24\n   0x0000000000401195 &lt;+161&gt;:\tje     0x4011ab &lt;phase_6+183&gt;\n\n   0x0000000000401197 &lt;+163&gt;:\tmov    (%rsp,%rsi,1),%ecx  # ecx &#x3D; *(rsp + rsi) \n\n   0x000000000040119a &lt;+166&gt;:\tcmp    $0x1,%ecx # ecx&lt;&#x3D;1\n   0x000000000040119d &lt;+169&gt;:\tjle    0x401183 &lt;phase_6+143&gt;\n   0x000000000040119f &lt;+171&gt;:\tmov    $0x1,%eax # eax &#x3D; 1\n   0x00000000004011a4 &lt;+176&gt;:\tmov    $0x6032d0,%edx # 前面的那个立即数是一个node类型的指针,x&#x2F;30 0x6032d0查看他附近的30个字节\n   0x00000000004011a9 &lt;+181&gt;:\tjmp    0x401176 &lt;phase_6+130&gt;\n\n   for(int i&#x3D;6;i&gt;&#x3D;1;i--)\n\tnode[i].next&#x3D;node[i-1]; 183~220\n   0x00000000004011ab &lt;+183&gt;:\tmov    0x20(%rsp),%rbx  # rbx &#x3D; (0x20+rsp)\n   0x00000000004011b0 &lt;+188&gt;:\tlea    0x28(%rsp),%rax  # rax &#x3D; (0x28+rsp)\n   0x00000000004011b5 &lt;+193&gt;:\tlea    0x50(%rsp),%rsi  # rsi &#x3D; (0x50+rsp) 0x50是链表的尾端\n   0x00000000004011ba &lt;+198&gt;:\tmov    %rbx,%rcx   \n   0x00000000004011bd &lt;+201&gt;:\tmov    (%rax),%rdx  # rdx &#x3D; *rax\n   0x00000000004011c0 &lt;+204&gt;:\tmov    %rdx,0x8(%rcx) &#x2F;&#x2F;栈\n   0x00000000004011c4 &lt;+208&gt;:\tadd    $0x8,%rax\n   0x00000000004011c8 &lt;+212&gt;:\tcmp    %rsi,%rax\n   0x00000000004011cb &lt;+215&gt;:\tje     0x4011d2 &lt;phase_6+222&gt;\n   0x00000000004011cd &lt;+217&gt;:\tmov    %rdx,%rcx\n   0x00000000004011d0 &lt;+220&gt;:\tjmp    0x4011bd &lt;phase_6+201&gt;\n   # 这里改一下输入,改成6 5 4 3 2 1\n\n   0x00000000004011d2 &lt;+222&gt;:\tmovq   $0x0,0x8(%rdx)  # 把最后一个结点的next域赋值为0\n   0x00000000004011da &lt;+230&gt;:\tmov    $0x5,%ebp       # ebp &#x3D; 5\n   0x00000000004011df &lt;+235&gt;:\tmov    0x8(%rbx),%rax  # 指向重排后的第i个(1&lt;&#x3D;i&lt;&#x3D;5)\n   0x00000000004011e3 &lt;+239&gt;:\tmov    (%rax),%eax    # \n   0x00000000004011e5 &lt;+241&gt;:\tcmp    %eax,(%rbx)    # rbx指向的是重排后的第i+1个 第1个大于等于第二个,要呈现单调递减的顺序，而且比较的是类似于权重\n   0x00000000004011e7 &lt;+243&gt;:\tjge    0x4011ee &lt;phase_6+250&gt;  # 必须要单调递减\n   0x00000000004011e9 &lt;+245&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n   0x00000000004011ee &lt;+250&gt;:\tmov    0x8(%rbx),%rbx\n   0x00000000004011f2 &lt;+254&gt;:\tsub    $0x1,%ebp\n   0x00000000004011f5 &lt;+257&gt;:\tjne    0x4011df &lt;phase_6+235&gt;\n   0x00000000004011f7 &lt;+259&gt;:\tadd    $0x50,%rsp\n   0x00000000004011fb &lt;+263&gt;:\tpop    %rbx\n   0x00000000004011fc &lt;+264&gt;:\tpop    %rbp\n   0x00000000004011fd &lt;+265&gt;:\tpop    %r12\n   0x00000000004011ff &lt;+267&gt;:\tpop    %r13\n   0x0000000000401201 &lt;+269&gt;:\tpop    %r14\n   0x0000000000401203 &lt;+271&gt;:\tret    </code></pre>\n\n<p>finish<br>明天试试隐藏关</p>\n","text":"说明6关卡，每个关卡需要输入相应的内容，通过逆向工程来获取对应关卡的通过条件 准备工作环境需要用到gdb调试器 apt-get install gdb 系统: ...","permalink":"/post/BombLab","photos":[],"count_time":{"symbolsCount":"33k","symbolsTime":"30 mins."},"categories":[],"tags":[{"name":"CSAPP Lab","slug":"CSAPP-Lab","count":1,"path":"api/tags/CSAPP-Lab.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">说明</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\"><span class=\"toc-text\">准备工作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">环境</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">前置知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E4%B8%9C%E8%A5%BF\"><span class=\"toc-text\">寄存器的东西</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E7%9B%B8%E5%85%B3\"><span class=\"toc-text\">指令相关</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#test-destination-source\"><span class=\"toc-text\">test destination,source</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#je-destination\"><span class=\"toc-text\">je destination</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%B9%B2\"><span class=\"toc-text\">开干</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Phase-1-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">Phase 1 字符串比较</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AD%94%E6%A1%88\"><span class=\"toc-text\">答案</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#phase-2-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">phase_2 循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AD%94%E6%A1%88-1\"><span class=\"toc-text\">答案</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#phase-3-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">phase_3 分支语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AD%94%E6%A1%88-2\"><span class=\"toc-text\">答案</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#phase-4-%E9%80%92%E5%BD%92\"><span class=\"toc-text\">phase_4 递归</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AD%94%E6%A1%88-3\"><span class=\"toc-text\">答案</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#phase-5-%E6%8C%87%E9%92%88-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">phase_5 指针 字符串比较</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AD%94%E6%A1%88-4\"><span class=\"toc-text\">答案</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#phase6-%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">phase6 链表</span></a></li></ol></li></ol></li></ol>","author":{"name":"矽","slug":"blog-author","avatar":"https://ik.imagekit.io/bennyxguo/ObsidianestLogo-hex_hecqbw.png?updatedAt=1692679397324","link":"/","description":"","socials":{"github":"https://github.com/notdy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45418837","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibli.jpg","link":"https://space.bilibili.com/441747654"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"VS2019中出现【Windows SDK】找不到 Windows SDK 版本10.0.18362.0的解决办法","uid":"e2ec0c5341a24647bd926cc2d6bdc6d8","slug":"VS2019中出现【Windows-SDK】找不到-Windows-SDK-版本10-0-18362-0的解决办法","date":"2023-10-27T03:26:37.000Z","updated":"2023-10-27T03:36:23.645Z","comments":true,"path":"api/articles/VS2019中出现【Windows-SDK】找不到-Windows-SDK-版本10-0-18362-0的解决办法.json","keywords":null,"cover":[],"text":"VS2019中出现【Windows SDK】找不到 Windows SDK 版本10.0.18362.0的解决办法方法一：在项目上右击选择重定目标解决方案，将w...","permalink":"/post/VS2019中出现【Windows-SDK】找不到-Windows-SDK-版本10-0-18362-0的解决办法","photos":[],"count_time":{"symbolsCount":208,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"VS报错","slug":"VS报错","count":2,"path":"api/tags/VS报错.json"}],"author":{"name":"矽","slug":"blog-author","avatar":"https://ik.imagekit.io/bennyxguo/ObsidianestLogo-hex_hecqbw.png?updatedAt=1692679397324","link":"/","description":"","socials":{"github":"https://github.com/notdy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45418837","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibli.jpg","link":"https://space.bilibili.com/441747654"}}}}},"next_post":{"title":"Poem","uid":"b1ab2d6fe200a9efa756d30468277a67","slug":"Poem","date":"2023-10-20T03:21:17.000Z","updated":"2023-10-20T03:27:29.573Z","comments":true,"path":"api/articles/Poem.json","keywords":null,"cover":null,"text":"杨花落尽子规啼，闻道龙标过五溪 我寄愁心与明月，随风直到夜郎西 倘若相逢即别离 迢迢千里无期 此地 何时 再相遇 ","permalink":"/post/Poem","photos":[],"count_time":{"symbolsCount":57,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"诗词","slug":"诗词","count":1,"path":"api/tags/诗词.json"},{"name":"李白","slug":"李白","count":1,"path":"api/tags/李白.json"}],"author":{"name":"矽","slug":"blog-author","avatar":"https://ik.imagekit.io/bennyxguo/ObsidianestLogo-hex_hecqbw.png?updatedAt=1692679397324","link":"/","description":"","socials":{"github":"https://github.com/notdy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_45418837","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibli.jpg","link":"https://space.bilibili.com/441747654"}}}}}}