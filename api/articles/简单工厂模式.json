{"title":"简单工厂模式","uid":"8ba451d9968003045919daef83bc7892","slug":"简单工厂模式","date":"2024-09-23T14:54:54.000Z","updated":"2024-09-23T14:55:29.532Z","comments":true,"path":"api/articles/简单工厂模式.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这个系列主要是记录我看大话设计模式这一本书的一些感受，会有部分图片是来自于《大话设计模式》这本书</p></blockquote>\n<p>设计一个计算器,以java为例</p>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><h1 id=\"第一个版本\"><a href=\"#第一个版本\" class=\"headerlink\" title=\"第一个版本\"></a>第一个版本</h1><p>不费吹灰之力，轻松拿下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Study</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请输入数字A:&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">numsA</span> <span class=\"operator\">=</span> s.nextDouble();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请输入运算符号:&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">operator</span> <span class=\"operator\">=</span> s.next().strip();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请输入数字B:&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">numsB</span> <span class=\"operator\">=</span> s.nextDouble();</span><br><span class=\"line\">        System.out.println(calculate(numsA,numsB,operator));</span><br><span class=\"line\">        s.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">calculate</span><span class=\"params\">(<span class=\"type\">double</span> a,<span class=\"type\">double</span> b,String operator)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (operator)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;+&quot;</span>:</span><br><span class=\"line\">                sb.append(String.format(<span class=\"string\">&quot;%.1f + %.1f = %.1f&quot;</span>,a,b,a+b));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;-&quot;</span>:</span><br><span class=\"line\">                sb.append(String.format(<span class=\"string\">&quot;%.1f - %.1f = %.1f&quot;</span>,a,b,a-b));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;*&quot;</span>:</span><br><span class=\"line\">                sb.append(String.format(<span class=\"string\">&quot;%.1f * %.1f = %.1f&quot;</span>,a,b,a*b));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;/&quot;</span>:</span><br><span class=\"line\">                sb.append(String.format(<span class=\"string\">&quot;%.1f / %.1f = %.11f&quot;</span>,a,b,a/b));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;运算符不支持或错误&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"不足之处\"><a href=\"#不足之处\" class=\"headerlink\" title=\"不足之处\"></a>不足之处</h2><ol>\n<li>运算符这一参数特别可能输错,用户怎么知道你支持哪些运算符?</li>\n<li>对于异常没有处理,如除以0的异常没有处理</li>\n</ol>\n<h1 id=\"第二个版本\"><a href=\"#第二个版本\" class=\"headerlink\" title=\"第二个版本\"></a>第二个版本</h1><p>加异常处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Study</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请输入数字A:&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">numsA</span> <span class=\"operator\">=</span> s.nextDouble();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请输入运算符号(+ - * /):&quot;</span>); <span class=\"comment\">//这里用图形化界面可能更好点</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">operator</span> <span class=\"operator\">=</span> s.next().strip();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(isOperator(operator))&#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;不正确，重新输入:&quot;</span>)</span><br><span class=\"line\">            opertaor = s.next().strip();    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请输入数字B:&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">numsB</span> <span class=\"operator\">=</span> s.nextDouble();</span><br><span class=\"line\">        System.out.println(calculate(numsA,numsB,operator));</span><br><span class=\"line\">        s.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isOperator</span><span class=\"params\">(String s)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(s)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;+&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;-&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;*&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;/&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">calculate</span><span class=\"params\">(<span class=\"type\">double</span> a,<span class=\"type\">double</span> b,String operator)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (operator)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;+&quot;</span>:</span><br><span class=\"line\">                sb.append(String.format(<span class=\"string\">&quot;%.1f + %.1f = %.1f&quot;</span>,a,b,a+b));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;-&quot;</span>:</span><br><span class=\"line\">                sb.append(String.format(<span class=\"string\">&quot;%.1f - %.1f = %.1f&quot;</span>,a,b,a-b));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;*&quot;</span>:</span><br><span class=\"line\">                sb.append(String.format(<span class=\"string\">&quot;%.1f * %.1f = %.1f&quot;</span>,a,b,a*b));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;/&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&quot;不能除0&quot;</span>;</span><br><span class=\"line\">                sb.append(String.format(<span class=\"string\">&quot;%.1f / %.1f = %.11f&quot;</span>,a,b,a/b));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;运算符不支持或错误&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第三个版本\"><a href=\"#第三个版本\" class=\"headerlink\" title=\"第三个版本\"></a>第三个版本</h2><h3 id=\"一些感悟\"><a href=\"#一些感悟\" class=\"headerlink\" title=\"一些感悟\"></a>一些感悟</h3><p>以下感受是结合活字印刷的</p>\n<ul>\n<li>可维护性:只用改想改的地方，不用改不想改的地方，或者说只用改局部，不用改整体。比如文章局部不好，只需要对局部进行修改，而不用改整体</li>\n<li>可复用性:按功能点划分，形成一个组件，这样可以在以后的业务中能反复使用，公司里好像叫组件库或者构件库。我的理解就是一个字不可能只用一次，常用的字在文章中有大量的使用</li>\n<li>可扩展性: 加功能点很容易。结合活字印刷来说就是添加文字特别简单</li>\n<li>灵活性好:通过简易的操作来实现一些简单的功能。</li>\n</ul>\n<p>设计过程:在整个过程中，只有运算的数在改变，运算规则不变，将运算规则抽取出来（作为一个类operator，+-*&#x2F;都继承operator即可），运算的数字作为参数传递过去。</p>\n<p>Operator类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Operator</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Double <span class=\"title function_\">getA</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setA</span><span class=\"params\">(Double a)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.a = a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Double <span class=\"title function_\">getB</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setB</span><span class=\"params\">(Double b)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.b = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Double a,b;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Operator</span><span class=\"params\">(Double a,Double b)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.a = a;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.b = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Operator</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"type\">double</span> <span class=\"title function_\">getResult</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>加减乘除类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Add</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Operator</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getResult</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getA()+getB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sub</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Operator</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getResult</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getA() - getB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Mul</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Operator</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getResult</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getA()*getB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Div</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Operator</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getResult</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> ArithmeticException &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(getB()==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArithmeticException</span>(<span class=\"string\">&quot;除数为0&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> res = getA()/getB();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>工厂类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OperatorFactory</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Operator <span class=\"title function_\">GenerateOperatorByCharacter</span><span class=\"params\">(String s)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Operator</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (s)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;+&quot;</span>:</span><br><span class=\"line\">                res = <span class=\"keyword\">new</span> <span class=\"title class_\">Add</span>();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;-&quot;</span>:</span><br><span class=\"line\">                res = <span class=\"keyword\">new</span> <span class=\"title class_\">Sub</span>();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;*&quot;</span>:</span><br><span class=\"line\">                res = <span class=\"keyword\">new</span> <span class=\"title class_\">Mul</span>();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;/&quot;</span>:</span><br><span class=\"line\">                res = <span class=\"keyword\">new</span> <span class=\"title class_\">Div</span>();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主程序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Scanner</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">    System.out.print(<span class=\"string\">&quot;请输入数字A:&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">numsA</span> <span class=\"operator\">=</span> s.nextDouble();</span><br><span class=\"line\">    System.out.print(<span class=\"string\">&quot;请输入运算符号:&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">operator</span> <span class=\"operator\">=</span> s.next().strip();</span><br><span class=\"line\">    System.out.print(<span class=\"string\">&quot;请输入数字B:&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">numsB</span> <span class=\"operator\">=</span> s.nextDouble();</span><br><span class=\"line\">    <span class=\"type\">Operator</span> <span class=\"variable\">operator1</span> <span class=\"operator\">=</span> OperatorFactory.GenerateOperatorByCharacter(operator);</span><br><span class=\"line\">    operator1.setA(numsA);</span><br><span class=\"line\">    operator1.setB(numsB);</span><br><span class=\"line\">    System.out.println(operator1.getResult());</span><br><span class=\"line\">    s.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样一来若加入其他运算只用加类，在工厂方法中加入代码即可</p>\n<h1 id=\"UML类图\"><a href=\"#UML类图\" class=\"headerlink\" title=\"UML类图\"></a>UML类图</h1><p>这个多看看就行，来看一个比较全的图<br><img src=\"/../images/Snipaste_2023-12-11_15-30-40.jpg\" alt=\"UML类图全\"></p>\n<p>在UML中+-#的含义如下</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>表示的修饰符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>public</td>\n</tr>\n<tr>\n<td>-</td>\n<td>private</td>\n</tr>\n<tr>\n<td>#</td>\n<td>protected</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在UML图中‘+’表示public,’-‘表示private,’#’表示protected</p></blockquote>\n<h2 id=\"类的表示\"><a href=\"#类的表示\" class=\"headerlink\" title=\"类的表示\"></a>类的表示</h2><p>从动物这个类开始解析<br><img src=\"/../images/animal%20resolve.jpg\" alt=\"解析动物类\"><br><b>一个矩形框就是一个类，第一层就是类名，如果是抽象类，类名须用斜体，第二层是属性和字段，第三层是方法或行为。</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>表示:虚线的实心箭头<br>我的个人理解就是在B中用到了A，那么B就依赖于A，B受制于A。<br><img src=\"/../images/resolveDependency.jpg\"><br>想起了一张图片：燕子，没有你我可怎么活啊<br><img src=\"/../images/explainDependency.gif\"></p>\n<h2 id=\"接口的表示\"><a href=\"#接口的表示\" class=\"headerlink\" title=\"接口的表示\"></a>接口的表示</h2><p>和类表示的不同之处主要在于其顶端有《interface》，第一行是接口名称；第二行是接口方法；<br><img src=\"/../images/interface.jpg\"><br>还有一种方式来表示接口,以下面的图为例，应该是唐老鸭实现了讲人话的接口<br><img src=\"/../images/ExpressInterfaceTwo.jpg\"></p>\n<h2 id=\"继承类和实现接口的表示\"><a href=\"#继承类和实现接口的表示\" class=\"headerlink\" title=\"继承类和实现接口的表示\"></a>继承类和实现接口的表示</h2><p>实现接口是用空心三角形+虚线来表示.例如:<br><img src=\"/../images/inherit.jpg\"><br>继承使用空心三角形+实线来表示<br><img src=\"/../images/implementaInterface.jpg\"></p>\n<h2 id=\"关联的表示\"><a href=\"#关联的表示\" class=\"headerlink\" title=\"关联的表示\"></a>关联的表示</h2><p>表示：用实现箭头来表示<br><img src=\"/../images/association.jpg\"><br>此书中表示：当一个类“知道”另一个类时，可以用关联。但是让我不理解的是什么叫做知道？</p>\n<h2 id=\"聚合的表示\"><a href=\"#聚合的表示\" class=\"headerlink\" title=\"聚合的表示\"></a>聚合的表示</h2><p>用空心的菱形+实现箭头来表示<br><img src=\"/../images/aggregation.jpg\"><br>表示一种<b>弱</b>的‘拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>弱的体现<br>个体离开了群体还能存活</p></blockquote>\n<h2 id=\"组合的表示\"><a href=\"#组合的表示\" class=\"headerlink\" title=\"组合的表示\"></a>组合的表示</h2><p>用<b>实心的菱形+实现箭头</b>来表示<br><img src=\"/../images/Composition.jpg\"><br>其表示一种<b>强</b>的拥有关系，说人话就是群体离开了个体，这个群体就废了.以图片为例，鸟没了翅膀不就废了吗<br>图片上的1和2是表示基数<br>2：表示1只鸟有两个翅膀<br>1：表示两个翅膀对应一只鸟</p>\n<h2 id=\"总结篇\"><a href=\"#总结篇\" class=\"headerlink\" title=\"总结篇\"></a>总结篇</h2><p>这里只总结容易混的东西</p>\n<table>\n<thead>\n<tr>\n<th>关系</th>\n<th>表示</th>\n<th>技巧</th>\n<th>指向</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>继承</td>\n<td>实线空心三角形</td>\n<td>继承的都是具体的东西，用实线</td>\n<td>从子类指向父类</td>\n</tr>\n<tr>\n<td>实现接口</td>\n<td>虚线空心三角形</td>\n<td>实现的是相较于比较虚的，用虚线</td>\n<td>从类指向接口</td>\n</tr>\n<tr>\n<td>组合</td>\n<td>实心菱形+实线箭头</td>\n<td>，由于比较强（内心丰盈）所以是实心</td>\n<td>部分指向整体</td>\n</tr>\n<tr>\n<td>聚合</td>\n<td>空心的菱形+实线箭头</td>\n<td>约束性不强，空心</td>\n<td>部分指向整体</td>\n</tr>\n</tbody></table>\n","text":" 这个系列主要是记录我看大话设计模式这一本书的一些感受，会有部分图片是来自于《大话设计模式》这本书 设计一个计算器,以java为例 需求第一个版本不费吹灰之力，...","permalink":"/post/简单工厂模式","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"设计模式","slug":"设计模式","count":2,"path":"api/tags/设计模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82\"><span class=\"toc-text\">需求</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">第一个版本</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E8%B6%B3%E4%B9%8B%E5%A4%84\"><span class=\"toc-text\">不足之处</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E4%B8%AA%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">第二个版本</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E4%B8%AA%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">第三个版本</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F\"><span class=\"toc-text\">一些感悟</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#UML%E7%B1%BB%E5%9B%BE\"><span class=\"toc-text\">UML类图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">类的表示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E7%9A%84%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">接口的表示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF%E7%B1%BB%E5%92%8C%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E7%9A%84%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">继承类和实现接口的表示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E8%81%94%E7%9A%84%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">关联的表示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%81%9A%E5%90%88%E7%9A%84%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">聚合的表示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E5%90%88%E7%9A%84%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">组合的表示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%E7%AF%87\"><span class=\"toc-text\">总结篇</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"筛质数","uid":"183beebca0c6bcbcb988690a51b52267","slug":"筛质数","date":"2024-09-23T14:55:48.000Z","updated":"2024-09-23T14:56:10.224Z","comments":true,"path":"api/articles/筛质数.json","keywords":null,"cover":null,"text":"题目给定一个正整数 n，请你求出 1∼n 中质数的个数。 输入格式共一行，包含整数 n。 输出格式共一行，包含一个整数，表示 1∼n 中质数的个数。 数据范围 ...","permalink":"/post/筛质数","photos":[],"count_time":{"symbolsCount":919,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Algorithm","slug":"Algorithm","count":8,"path":"api/tags/Algorithm.json"},{"name":"数论","slug":"数论","count":4,"path":"api/tags/数论.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"递归实现指数型枚举","uid":"3e7eb9f9b585e5605ca004891ab1c7ad","slug":"递归实现指数型枚举","date":"2024-09-23T14:53:32.000Z","updated":"2024-09-23T14:54:10.834Z","comments":true,"path":"api/articles/递归实现指数型枚举.json","keywords":null,"cover":[],"text":"题目描述递归实现指数型枚举 思路每个数有两个状态，分别是选和不选 将这两个状态分别用1和2来代替，1->选,2->不选 就是枚举1~n的每个数字的状态，递归树如...","permalink":"/post/递归实现指数型枚举","photos":[],"count_time":{"symbolsCount":921,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Algorithm","slug":"Algorithm","count":8,"path":"api/tags/Algorithm.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}