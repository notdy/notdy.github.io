[{"id":"8ba451d9968003045919daef83bc7892","title":"简单工厂模式","content":"\n这个系列主要是记录我看大话设计模式这一本书的一些感受，会有部分图片是来自于《大话设计模式》这本书\n\n设计一个计算器,以java为例\n需求第一个版本不费吹灰之力，轻松拿下\njavaimport java.util.Scanner;\n\nclass Study&#123;\n    public static void main(String[] args) &#123;\n        Scanner s = new Scanner(System.in);\n        System.out.print(&quot;请输入数字A:&quot;);\n        double numsA = s.nextDouble();\n        System.out.print(&quot;请输入运算符号:&quot;);\n        String operator = s.next().strip();\n        System.out.print(&quot;请输入数字B:&quot;);\n        double numsB = s.nextDouble();\n        System.out.println(calculate(numsA,numsB,operator));\n        s.close();\n    &#125;\n    public static String calculate(double a,double b,String operator)&#123;\n        StringBuilder sb = new StringBuilder();\n        switch (operator)&#123;\n            case &quot;+&quot;:\n                sb.append(String.format(&quot;%.1f + %.1f = %.1f&quot;,a,b,a+b));\n                break;\n            case &quot;-&quot;:\n                sb.append(String.format(&quot;%.1f - %.1f = %.1f&quot;,a,b,a-b));\n                break;\n            case &quot;*&quot;:\n                sb.append(String.format(&quot;%.1f * %.1f = %.1f&quot;,a,b,a*b));\n                break;\n            case &quot;/&quot;:\n                sb.append(String.format(&quot;%.1f / %.1f = %.11f&quot;,a,b,a/b));\n                break;\n            default:\n                return &quot;运算符不支持或错误&quot;;\n        &#125;\n        return sb.toString();\n    &#125;\n&#125;不足之处\n运算符这一参数特别可能输错,用户怎么知道你支持哪些运算符?\n对于异常没有处理,如除以0的异常没有处理\n\n第二个版本加异常处理\njavaimport java.util.Scanner;\n\nclass Study&#123;\n    public static void main(String[] args) &#123;\n        Scanner s = new Scanner(System.in);\n        System.out.print(&quot;请输入数字A:&quot;);\n        double numsA = s.nextDouble();\n        System.out.print(&quot;请输入运算符号(+ - * /):&quot;); //这里用图形化界面可能更好点\n        String operator = s.next().strip();\n        while(isOperator(operator))&#123;\n            System.out.print(&quot;不正确，重新输入:&quot;)\n            opertaor = s.next().strip();    \n        &#125;\n        System.out.print(&quot;请输入数字B:&quot;);\n        double numsB = s.nextDouble();\n        System.out.println(calculate(numsA,numsB,operator));\n        s.close();\n    &#125;\n    public static boolean isOperator(String s)&#123;\n        switch(s)&#123;\n            case &quot;+&quot;:\n            case &quot;-&quot;:\n            case &quot;*&quot;:\n            case &quot;/&quot;:\n                return true;\n        &#125;\n        return false;\n    &#125;\n    public static String calculate(double a,double b,String operator)&#123;\n        StringBuilder sb = new StringBuilder();\n        switch (operator)&#123;\n            case &quot;+&quot;:\n                sb.append(String.format(&quot;%.1f + %.1f = %.1f&quot;,a,b,a+b));\n                break;\n            case &quot;-&quot;:\n                sb.append(String.format(&quot;%.1f - %.1f = %.1f&quot;,a,b,a-b));\n                break;\n            case &quot;*&quot;:\n                sb.append(String.format(&quot;%.1f * %.1f = %.1f&quot;,a,b,a*b));\n                break;\n            case &quot;/&quot;:\n                if(b==0)\n                    return &quot;不能除0&quot;;\n                sb.append(String.format(&quot;%.1f / %.1f = %.11f&quot;,a,b,a/b));\n                break;\n            default:\n                return &quot;运算符不支持或错误&quot;;\n        &#125;\n        return sb.toString();\n    &#125;\n&#125;第三个版本一些感悟以下感受是结合活字印刷的\n\n可维护性:只用改想改的地方，不用改不想改的地方，或者说只用改局部，不用改整体。比如文章局部不好，只需要对局部进行修改，而不用改整体\n可复用性:按功能点划分，形成一个组件，这样可以在以后的业务中能反复使用，公司里好像叫组件库或者构件库。我的理解就是一个字不可能只用一次，常用的字在文章中有大量的使用\n可扩展性: 加功能点很容易。结合活字印刷来说就是添加文字特别简单\n灵活性好:通过简易的操作来实现一些简单的功能。\n\n设计过程:在整个过程中，只有运算的数在改变，运算规则不变，将运算规则抽取出来（作为一个类operator，+-*&#x2F;都继承operator即可），运算的数字作为参数传递过去。\nOperator类\njava\nabstract class Operator&#123;\n    public Double getA() &#123;\n        return a;\n    &#125;\n\n    public void setA(Double a) &#123;\n        this.a = a;\n    &#125;\n\n    public Double getB() &#123;\n        return b;\n    &#125;\n\n    public void setB(Double b) &#123;\n        this.b = b;\n    &#125;\n\n    private Double a,b;\n    public Operator(Double a,Double b)&#123;\n        this.a = a;\n        this.b = b;\n    &#125;\n    public Operator()&#123;\n\n    &#125;\n    public abstract double getResult();\n&#125;\n&#125;加减乘除类\njavaclass Add extends Operator&#123;\n\n\n    @Override\n    public double getResult() &#123;\n        return getA()+getB();\n    &#125;\n&#125;\nclass Sub extends Operator&#123;\n    @Override\n    public double getResult() &#123;\n        return getA() - getB();\n    &#125;\n&#125;\nclass Mul extends Operator&#123;\n    @Override\n    public double getResult() &#123;\n        return getA()*getB();\n    &#125;\n&#125;\nclass Div extends Operator&#123;\n\n\n    @Override\n    public double getResult()throws ArithmeticException &#123;\n        double res = 0;\n        if(getB()==0)\n            throw new ArithmeticException(&quot;除数为0&quot;);\n        else res = getA()/getB();\n        return res;\n    &#125;\n&#125;工厂类\njavaclass OperatorFactory&#123;\n    public static Operator GenerateOperatorByCharacter(String s)&#123;\n        Operator res = null;\n        switch (s)&#123;\n            case &quot;+&quot;:\n                res = new Add();\n                break;\n            case &quot;-&quot;:\n                res = new Sub();\n                break;\n            case &quot;*&quot;:\n                res = new Mul();\n                break;\n            case &quot;/&quot;:\n                res = new Div();\n                break;\n        &#125;\n        return res;\n    &#125;\n&#125;主程序\njava    public static void main(String[] args) &#123;\n        Scanner s = new Scanner(System.in);\n        System.out.print(&quot;请输入数字A:&quot;);\n        double numsA = s.nextDouble();\n        System.out.print(&quot;请输入运算符号:&quot;);\n        String operator = s.next().strip();\n        System.out.print(&quot;请输入数字B:&quot;);\n        double numsB = s.nextDouble();\n        Operator operator1 = OperatorFactory.GenerateOperatorByCharacter(operator);\n        operator1.setA(numsA);\n        operator1.setB(numsB);\n        System.out.println(operator1.getResult());\n        s.close();\n    &#125;这样一来若加入其他运算只用加类，在工厂方法中加入代码即可\nUML类图这个多看看就行，来看一个比较全的图\n在UML中+-#的含义如下\n\n\n\n符号\n表示的修饰符\n\n\n\n+\npublic\n\n\n-\nprivate\n\n\n#\nprotected\n\n\n\n在UML图中‘+’表示public,’-‘表示private,’#’表示protected\n\n类的表示从动物这个类开始解析一个矩形框就是一个类，第一层就是类名，如果是抽象类，类名须用斜体，第二层是属性和字段，第三层是方法或行为。\n依赖表示:虚线的实心箭头我的个人理解就是在B中用到了A，那么B就依赖于A，B受制于A。想起了一张图片：燕子，没有你我可怎么活啊\n接口的表示和类表示的不同之处主要在于其顶端有《interface》，第一行是接口名称；第二行是接口方法；还有一种方式来表示接口,以下面的图为例，应该是唐老鸭实现了讲人话的接口\n继承类和实现接口的表示实现接口是用空心三角形+虚线来表示.例如:继承使用空心三角形+实线来表示\n关联的表示表示：用实现箭头来表示此书中表示：当一个类“知道”另一个类时，可以用关联。但是让我不理解的是什么叫做知道？\n聚合的表示用空心的菱形+实现箭头来表示表示一种弱的‘拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分。\n\n弱的体现个体离开了群体还能存活\n\n组合的表示用实心的菱形+实现箭头来表示其表示一种强的拥有关系，说人话就是群体离开了个体，这个群体就废了.以图片为例，鸟没了翅膀不就废了吗图片上的1和2是表示基数2：表示1只鸟有两个翅膀1：表示两个翅膀对应一只鸟\n总结篇这里只总结容易混的东西\n\n\n\n关系\n表示\n技巧\n指向\n\n\n\n继承\n实线空心三角形\n继承的都是具体的东西，用实线\n从子类指向父类\n\n\n实现接口\n虚线空心三角形\n实现的是相较于比较虚的，用虚线\n从类指向接口\n\n\n组合\n实心菱形+实线箭头\n，由于比较强（内心丰盈）所以是实心\n部分指向整体\n\n\n聚合\n空心的菱形+实线箭头\n约束性不强，空心\n部分指向整体\n\n\n","slug":"简单工厂模式","date":"2023-12-04T09:06:01.000Z","categories_index":"","tags_index":"设计模式","author_index":"矽"},{"id":"beb0574b5617d16378226a82c445c69b","title":"SpringWeb踩坑记录","content":"解决Maven依赖下载奇慢的问题,服务器在国外，很慢的在IDEA中按两次shift键，输入settings.xml,选择Create粘贴以下内容到文件中\ntxt&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;\n          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n          xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0\n                          https://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;\n \n    &lt;mirrors&gt;\n    \n        &lt;mirror&gt;\n            &lt;id&gt;alimaven&lt;/id&gt;\n            &lt;name&gt;aliyun maven&lt;/name&gt;\n            &lt;!-- https://maven.aliyun.com/repository/public/ --&gt;\n            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;\n            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;\n        &lt;/mirror&gt;\n    &lt;/mirrors&gt;\n&lt;/settings&gt;重启IDEA，或者再次创建一个项目，下载速度很快。\njava:无效的目标发行版原因都知道哈，版本不对IDEA-&gt;Settings-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Java Compiler还有两个地方File-&gt;Project Structure-&gt;ProjectFile-&gt;Project Structure-&gt;Modules如果还不行，将pom.xml的的java.version改成你上述图片中选择的版本即可\nxml    &lt;properties&gt;\n        &lt;java.version&gt;19&lt;/java.version&gt;\n    &lt;/properties&gt;List转换成Page时抛出ClassCastException报错信息:\ntxtclass java.util.ArrayList cannot be cast to class com.github.pagehelper.Page (java.util.ArrayList is in module java.base of loader &#39;bootstrap&#39;; com.github.pagehelper.Page is in unnamed module of loader &#39;app&#39;)原先代码\njava        \n        PageHelper.startPage(page,pageSize);\n        List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);\n        Page&lt;Emp&gt; emp = (Page&lt;Emp&gt;)empList;//这里出现了异常\n        PageBean pageBean = new PageBean(emp.getTotal(), emp.getResult());解决办法，将代码修改成下面的，原因不知道\njava        \n        Page&lt;Emp&gt; emp = PageHelper.startPage(page,pageSize);\n        List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);\n        emp.addAll(empList);\n        PageBean pageBean = new PageBean(emp.getTotal(), emp.getResult());还有一个解决办法，把PageHelper的版本换成最新版，在pom.xml文件中改\n将静态页面加入到static文件夹从浏览器访问不到静态html加入到static文件夹后，从localhost:8080:&#x2F;content.html访问不到，解决办法:重新编译staic模块\nThe field image exceeds its maximum permitted size of 1048576 bytes.原因:上传的文件太大了解决办法:调整最大限制在application.property中输入下面的,即可\ntxt# 上传的最大文件大小必须小于100MB\nspring.servlet.multipart.max-file-size=100MB\n# 上传多个文件的时候，单个文件大小不得超过20MB\nspring.servlet.multipart.max-request-size=20MB\nio.jsonwebtoken.UnsupportedJwtException: Signed Claims JWSs are not supported.将Jwts.parser().parseClaimsJwt(str)改成Jwts.parser().parseClaimsJws(str)即可\njava        Claims free = Jwts.parser().\n                setSigningKey(&quot;free&quot;).//设置密钥\n                parseClaimsJws(str).\n                getBody();\n        System.out.println(free);java.time.format.DateTimeParseException: Text ‘2023-5-11 11:12:13’ could not be parsed at index 5@DateTimeFormat(pattern&#x3D;”@DateTimeFormat(pattern &#x3D;”yyyy-MM-dd HH:mm:ss””)中的MM是两个但是字符串中的月份是一位，解决办法把2023-5-11改成2023-05-11即可，这个纯属是粗心大意了\nIDEA创建Maven项目后没有src目录IDEA版本号:2022.2.5解决办法:File-&gt;Settings,搜索Runner这个选项,在VM Options中加入-Darchetype&#x3D;Internal，apply-&gt;OK,出现原因暂时不知道\nUnknown database xxx排错思路:\n\n数据库是否建好了?\n数据库名称是否写对了\n配置文件中账户与密码驱动是否写对了\nmysql服务是否开启了\n端口号是否被占用了对应的措施是否有数据库和数据库名称这个可以自己检查出来，这里主要是记录后面几种的做法若是yml格式的，你的password可能需要加个引号驱动的话将版本改为最新版本试试\n\nyaml    &lt;dependency&gt;\n      &lt;groupId&gt;mysql&lt;/groupId&gt;\n      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n      &lt;version&gt;8.0.33&lt;/version&gt;\n    &lt;/dependency&gt;查看mysql服务是否开启以管理员的身份运行cmd输入 net start mysql,输入后是这个样子最后检查端口号是否被占用，还是在cmd中输入netstart -ano找你在配置文件中设置的端口号，如何查看?windows下默认是在C:&#x2F;ProgramData&#x2F;MySQL&#x2F;MySQL Server X.X&#x2F;my.ini或C:&#x2F;Program Files (x86)&#x2F;MySQL&#x2F;MySQL Server X.X&#x2F;my.ini。其中X.X代表MySQL版本号。在Linux系统下，MySQL配置文件通常位于&#x2F;etc&#x2F;my.cnf或&#x2F;etc&#x2F;mysql&#x2F;my.cnf找到占用的程序，在任务管理器中结束掉，win+R输入services.msc找到mysql服务，重启试试。这是我能想到的所有解决办法\nSpringBoot测试失败并报错: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration一般是测试类所在的包名和启动类的包名不一致造成的\n","slug":"SpringWeb踩坑记录","date":"2023-11-10T12:38:27.000Z","categories_index":"","tags_index":"Java,Spring","author_index":"矽"},{"id":"af286b6aa711a74975488d92e69b597a","title":"Ubuntu22.04搭建mysql主从复制","content":"\n记录哈，这个需要两台服务器，每台服务器上面都要安装mysql，若是没有安装，请分别在两台服务器上面运行下面的命令sudo apt install mysql-server\n\n引用Ubuntu下的mysql8.0忘记密码怎么办?\n环境\nUbuntu 22.04\n主机:192.168.164.134\n从机:192.168.164.136\n两台服务器的mysql配置文件路径:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf\n若是不知道在哪里运行下面的命令find &#x2F; -name mysqld.cnf\n\n\n\n主机的配置vim &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf修改成下面的样子,注意server-id不一定要等于1，只要服务器之间的server-id是不一样的就好若是远程连接不上mysql服务器可以把&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf文件中的bind-address&#x3D;127.0.0.1mysqlx-bind-address&#x3D;127.0.0.1，这两行注释掉完成后执行在终端中执行命令systemctl restart mysql重启mysql服务\n输入mysql -uroot进入到mysql中，注意我的没有设置密码，若你有密码需要加上-p后面写的你密码\n输入下面的命令\nshellCREATE USER &#39;remote&#39;@&#39;%&#39; IDENTIFIED BY &#39;remote&#39;;\n     GRANT REPLICATION SLAVE ON *.* TO &#39;remote&#39;@&#39;%&#39;;\n     FLUSH PRIVILEGES;在mysql中输入下面命令show master status;之后不要动主机\n从机的配置vim &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf增加或注释一句server-id &#x3D;2,保存退出重启mysql服务 systemctl restart mysql输入mysql -uroot  -p你的密码进入到mysql当中输入下面命令\nshellstop slave;\nchange master to master_host=&#39;192.168.164.134&#39;,master_user=&#39;remote&#39;,master_password=&#39;remote&#39;,master_log_file=&#39;mysql-bin.000013&#39;,master_log_pos=157,get_master_public_key=1;\nstart slave;\nshow slave status\\G若show slave status\\G的结果是如图片所示即可验证:主机用root身份登录从机用root身份登录在主机中新建一个数据库，看看从机中是否存在相同的，若有则配置成功，若没有找原因，原因及其解决办法我去翻翻历史记录，看看能不能找到\n","slug":"Ubuntu22-04搭建mysql主从复制","date":"2023-11-02T01:22:53.000Z","categories_index":"","tags_index":"Ubuntu,Mysql","author_index":"矽"},{"id":"b395fca2233b13450c189f3b1de80e06","title":"springboot访问请求404的原因","content":"\n是记录，可能出现错误\n\n可能出现的原因1.你请求的URL路径不对,比如说你请求的路径是&#x2F;usr&#x2F;list,GET方法,但是你UserController上面的RequestMapping是这个样子:@RequestMapping(“user”)，有可能哈2.前端的请求时GET方法，后端对应的处理函数的方法是非GET方法3.Controller和RestController注解混用了，两个中删除一个试试4.访问的是静态资源，那么查看是否配置好了静态资源，就是把静态资源放到Resources下面的static文件夹中，也可以通过配置类来自定义存放路径下面是通过配置类的方式，来配置静态资源存放的路径我的静态资源是直接放在Resources下面的，新建一个类，类名随意\n\n继承WebMvcConfigurationSupport重写addResourceHandlers方法在类上面加上@Configuration注解\n\njava@Configuration\n@Slf4j\npublic class WebMvcConfig extends WebMvcConfigurationSupport &#123;\n    /**\n     * 配置静态资源映射\n     *\n     * @param registry\n     **/\n    @Override\n    protected void addResourceHandlers(ResourceHandlerRegistry registry) &#123;\n        log.info(&quot;开始进行静态资源映射&quot;);\n        //将路径中包含backend的请求映射到backend文件夹下\n\n//这句话的意思是，只要请求的是/backend下面的文件都映射到Resources下面的backend文件夹下面,classpath:\n        registry.addResourceHandler(&quot;/backend/**&quot;).addResourceLocations(&quot;classpath:/backend/&quot;);\n//上同        \n        registry.addResourceHandler(&quot;/front/**&quot;).addResourceLocations(&quot;classpath:/front/&quot;);\n    &#125;\n    &#125;5.你的Controller类没有被扫描到，这种情况一般是启动类在一个包里面解决办法:\n\n把你的启动类从包里面拿出来，放到外面，如图所示\n用和MapperScan和scanBasePackages来指明需要扫描的包 如图所示 \n项目中有多个SpringBootServletInitializer子类此类问题表现是，项目按模块划分，多个模块内包含Controller。在开发调试阶段正常，单独运行每个模块也正常；使用tomcat部署后，总会随机出现一些模块的Controller访问不了的情况。这种情况，多是因为每个模块都创建了SpringBootServletInitailizer子类。解决办法就是只保留入口模块的SpringBootServletInitialzer子类即可补充:若是线上部署阶段排错思路1.确定资源确实是存在的2.随机测试几个接口，看看是否都是404。\n\n\n如果都是404，很可能是nginx配置错误\n如果部分404，且是按模块404，查看项目中是否有多个SpringBootServletInitializer子类\n\n","slug":"springboot访问请求404的原因","date":"2023-11-02T01:08:02.000Z","categories_index":"","tags_index":"Java,SpringBoot","author_index":"矽"},{"id":"39b466b7b3169c1cbcc3565a0dd5f50c","title":"Windows远程连接Redis(Ubuntu)","content":"环境\nWindows版本:Win11 家庭版\nLinux版本:Ubuntu22.04\nRedis版本:Redis - 6.0.16\nIDE: IDEA 2022.2.3\nRedis:单机部署\n\n配置redis.conf修改redis.conf配置文件 ,不知道在哪里在终端输入下面的命令\nshellfind / -name &#39;redis.conf&#39;注释掉 bind 127.0.0.1这一行设置客户端连接的密码 requirepass关闭保护模式 protected-mode no\n启动Redis开启redis服务指定redis.conf的文件位置\nshellredis-server ./redis.conf启动客户端在cmd中输入redis-cli -h address -a password –raw–raw是防止中文乱码\n","slug":"Windows远程连接Redis-Ubuntu","date":"2023-11-02T00:59:19.000Z","categories_index":"","tags_index":"Linux,Redis","author_index":"矽"},{"id":"79f2de507f0a4c5fea23763f0aa4db2a","title":"java环境搭建 Ubuntu Linux","content":"jdk的安装和配置环境变量\nUbuntu 22.04 LTS\n\n使用apt这个最简单\nshellsudo apt install default-jdk若是安装成功了在终端输入java -version来查看是否安装成功\n使用官网下载的jdk包(离线安装)直接在百度上搜索jdk，选择图片这个网址:jdk下载网址在linux中使用uname -m查看若上面的命令结果是arm就选择带有arm的，反之选择x64的切换到包所在的目录，打开终端，输入tar -zxf 包名切换到解压后的目录当中，复制该路径，我这里是&#x2F;usr&#x2F;java&#x2F;jdk打开终端输入vim &#x2F;etc&#x2F;profile,输入i进入插入模式在尾部追加export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdkexport CLASSPATH&#x3D;$:CLASSPATH:$JAVA_HOME&#x2F;lib&#x2F;export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin\n按ESC键，输入:wq按下回车在终端输入source &#x2F;etc&#x2F;profile在终端输入java -version,看看版本，若有反应则安装成功\n","slug":"java环境搭建-Ubuntu-Linux","date":"2023-11-02T00:54:37.000Z","categories_index":"","tags_index":"Java,Linux","author_index":"矽"},{"id":"e5ea9e5518c3019751fc0029e1e75066","title":"SearchSkills","content":"\n\n\n技巧\n说明\n例子\n常用\n\n\n\n“content”\n内容中必须完整的包含content\n“IT行业报告”\n\n\n\nintitle:Exception\n要求标题中必须包含Exception\nintitle:犹太人\n\n\n\nallintitle:标题1 标题2\n要求标题中必须包含标题1和标题2\nallintitle:王柠 天职师大\n\n\n\nintext:content\n限定内容关键词\nintext:”沈峰” “浙江大学”\n\n\n\ninurl:url\n限定网址关键词\ninurl:cctv\n\n\n\nsite:url\n限定网址来源\n“Sql Exception”site:stackoverflow.com\n\n\n\nimagesize:widthxheight\n限定图片尺寸\nimagesize:100x200\n\n\n\nfiletype:文件类型名\n限定文件格式\n“IT行业报告” filetype:pdf\n快速了解行业的情况用这个\n\n\n快速找到免费报告的网站filetype:pdf\n\n用inurl:baogao 搜出一堆的网站\n再用Similar Sites把上面的网址丢进去，找到类似的网站xx行业&#x2F;岗位必逛的网站websites programmer should visit\n\n找论文的Google学术搜索sci-hub\n电子书中文的 鸠摩搜书英文的 直接Google，网站:zlibrary,manybooks,www.pdfbooksworld.com,谷歌图书Kindle\n在线视频Google搜索best online learning websites\n百度网盘搜索引擎学搜搜 盘搜搜 云盘狗，或者直接Google一下百度网盘搜索引擎\n高清视频素材网站wwww.pexels.comwwww.pixabay.comwwww.videvo.netwwww.mixkit.co或直接Google搜索best sites for free stock videos\nyoutube上下载视频,在www.后面输入9x,下载4K的网站 save.tube199it.com  专业研究报告的国产普通化妆品备案信息2023年为基准15年前百度知道百度贴吧10年前知乎微信公众号(搜狗搜索或直接在微信公众号里面搜)5年前小红书，抖音，B站，快手，视频号，得到\n","slug":"SearchSkills","date":"2023-10-29T14:45:05.000Z","categories_index":"","tags_index":"particle skills,Search skill","author_index":"矽"},{"id":"38267af395118d175579925f047bb5c3","title":"c语言里面的进制输出","content":"c    int num = 0;\n    scanf_s(&quot;%d&quot;,&amp;num);\n    char str[256] = &#123; 0 &#125;;\n    _itoa_s(num, str, 64,2);//这个64是代表着str的长度应该是，超过了str的长度就会报str附近的堆栈已经损坏\n    //num是进行转换的数\n    //str是存放结果的字符数组\n    //64我也不清楚，\n    //2是进制，后面的一次类推\n    printf(&quot;%s\\n&quot;,str);\n\n    _itoa_s(num, str, 64, 8);\n    printf(&quot;%s\\n&quot;, str);\n\n    _itoa_s(num, str, 64, 10);\n    printf(&quot;%s\\n&quot;, str);\n\n    _itoa_s(num, str, 64, 16);\n    printf(&quot;%s\\n&quot;, str);\n    return 0;\n很简单对吧，如果要将其结果输入或者输出至文本文件中呢?\n输入输出至文本文件中首先介绍一下在cmd中 &lt; &gt;是什么意思，这个是重定向符号例子  进制转换.exe &lt;1.txt 把1.txt中的内容输入至进制转换.exe中进制转换.exe &gt; 1.txt 把进制转换.exe中的结果输出至1.txt\nok,例子把十进制分别转换成B&#x2F;D&#x2F;O&#x2F;H并写入指定的文本文件中win+r 进入cmd界面切换到程序所在的目录，再切换到Debug文件夹下(这是VS2019,其他的我不清楚，只要能找到那个以exe结尾的可执行文件就行)输入 程序名.exe &lt;1.txt输出 程序名.exe &gt;2.txt图片以后再补充\n","slug":"c语言里面的进制输出","date":"2023-10-27T08:50:47.000Z","categories_index":"","tags_index":"C语言","author_index":"矽"},{"id":"2878224f494f13aa64aec2ca34f9f0c1","title":"错误\tC2371\tCheer 重定义；不同的基类型","content":"错误\tC2371\t“Cheer”: 重定义；不同的基类型\n问题区: \n原因这是因为c语言编译器是从上往下执行的，也就是说你必须要把使用的函数名放在main函数之前，编译器把你写的代码读进去，每看到一个函数，就记下他的名字\n方法一把调用的函数写到main函数前面；如\n方法二我教程上面说可以把函数头写到main函数前面，什么叫做函数头？\ncvoid Cheer()//这个就是函数头若上面的有错误，请各位大佬指出，谢谢\n","slug":"不同的基类型","date":"2023-10-27T08:44:01.000Z","categories_index":"","tags_index":"VS报错","author_index":"矽"},{"id":"82f82e523d786593377048e2c5114c1c","title":"C语言中的随机数","content":"今天在一个小程序中看到了一个随机函数，心血来潮，来记录一下，顺便回忆一下c#(有点懒，c#部分后期再补)\nc语言中产生随机数c#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;//这里要注意，必须写，不然vs报错，因为rand函数在stdlib下面\n#include &lt;time.h&gt;//这里要注意，因为随机数是根据系统日期所产生的.\nint main()\n&#123;\n    srand(time(0));//根据当前系统日期产生随机数\n    //srand((unsigned) time(NULL));也可以这样写\n    int num=rand()%201-100;\n    //产生一个-100到100之间的数\n    printf(&quot;你产生的随机数是%d\\n&quot;,num);\n&#125;运行结果第一次,下面是控制台输出\n\n你产生的随机数是47第二次你产生的随机数是-34\n\nrand()rand函数指定数字范围原理要让随机数限定在一个范围，可以采用模除加加法的方式。要产生随机数r， 其范围为 m&lt;&#x3D;r&lt;&#x3D;n，可以使用如下公式：rand()%(n-m+1)+m其原理为，对于任意数，0&lt;&#x3D;rand()%(n-m+1)&lt;&#x3D;n-m同时加上m0+m&lt;&#x3D;rand()%(n-m+1)+m&lt;&#x3D;n-m+m得到m&lt;&#x3D;rand()%(n-m+1)+m&lt;&#x3D;n\nrand的例子c#include&lt;stdio.h&gt;\n#include&lt;time.h&gt;\n#include&lt;stdlib.h&gt;\nint main()\n&#123;\n    //产生一个-200到200之间的数\n    srand((unsigned)time(NULL));\n    //rand()%(200-(-200)+1)+(-200)\n    //rand()%401-200\n    int num=rand()%401-200;\n    printf(&quot;随机数的结果为%d\\n&quot;,num);\n    return 0;\n&#125;\n不足点\n没有说清楚srand和time的细节部分\nrand细节部分\n\n","slug":"C语言中的随机数","date":"2023-10-27T07:29:22.000Z","categories_index":"","tags_index":"C语言,随机函数","author_index":"矽"},{"id":"e2ec0c5341a24647bd926cc2d6bdc6d8","title":"VS2019中出现【Windows SDK】找不到 Windows SDK 版本10.0.18362.0的解决办法","content":"VS2019中出现【Windows SDK】找不到 Windows SDK 版本10.0.18362.0的解决办法方法一：在项目上右击选择重定目标解决方案，将windosSdk的版本号选择10.0.18362.0如果这个不能解决问题请看这里在Visual Studio Installer中勾选Windows 10 SDK(10.0.17764.0)点击修改即可完成\n是在不行，自己到微软官网上下载一个，请点击这里\n","slug":"VS2019中出现【Windows-SDK】找不到-Windows-SDK-版本10-0-18362-0的解决办法","date":"2023-10-27T03:26:37.000Z","categories_index":"","tags_index":"VS报错","author_index":"矽"},{"id":"6b7ecf7eef1b5950a2257e592952f69a","title":"BombLab","content":"说明6关卡，每个关卡需要输入相应的内容，通过逆向工程来获取对应关卡的通过条件\n准备工作环境需要用到gdb调试器\nshellapt-get install gdb系统: Ubuntu 22.04\n本实验会用到的gdb调试器的指令如下\n\nr或者 run或者run filename \t\t运行程序,run filename就是用filename中的内容作为输入b *address\t\t\t在某个地址设置断点d或delete\t\t\t\t删除所有断点d 断点号\t\t\t\t删除指定断点info b\t\t\t\t\t查看所有断点信息x&#x2F;参数 地址\t\t\t查看指针解引用后的值，参数可以是s(字符串),d(十进制),x(十六进制),地址若是寄存器需要加上$info register 或info r\t查看所有寄存器的值disas functionName\t生成functionName的汇编代码stepi 执行一个汇编指令layout asm 窗口分为两部分，上面是将要执行的汇编代码，下面输入gdb调试命令\n\n前置知识寄存器的东西这里面有一些寄存器的知识，了解即可%rsp (register stack pointer) 栈指针%esi:通用寄存器，长应用于指针或索引%rax:存储函数的返回值,存储临时数据,系统调用号%r12,%rbx:通用寄存器,参数传递的%rbp(register base pointer):通常是当作基址指针来用\n指令相关test destination,sourcedestination和source可以是寄存器,内存地址,立即数.对两个操作数进行按位逻辑与操作,会更新下面寄存器的状态\n\nZero flag(ZF):若结果为0，则设置为1,反之为0，这个若为1表明两个操作数相等或者某个操作数等于0\nSign flag (SF):若结果最高位为1,则为1,反之为0\nOverflow flag(OF):有符号数溢出则为1,反之为0\nCarry flag(CF):无符号数溢出则为1,反之为0\nParity flag(PF):结果的低8位包含奇数个1则为1，反之为0\n\nje destination若ZF为1则跳转到destination处\n开干Phase 1 字符串比较终端输入gdb bomb在输入disas phase_1,结果如下\ntxt   0x0000000000400ee0 &lt;+0&gt;:\tsub    $0x8,%rsp // 把栈指针减少8，给局部变量提供空间\n   0x0000000000400ee4 &lt;+4&gt;:\tmov    $0x402400,%esi // 将0x402400存储到%esi中，这个有可能是存放我们输入的值或者存放内置字符串的\n   0x0000000000400ee9 &lt;+9&gt;:\tcall   0x401338 &lt;strings_not_equal&gt;//调用了函数strings_not_equal,估计是判断输入的字符串和内置字符串是否相同，相同返回0\n   0x0000000000400eee &lt;+14&gt;:\ttest   %eax,%eax  //判断%eax(函数strings_not_equal的返回值)是否为0，若为0则ZF=1\n   0x0000000000400ef0 &lt;+16&gt;:\tje     0x400ef7 &lt;phase_1+23&gt; // ZF为1就跳转，反之顺序执行\n   0x0000000000400ef2 &lt;+18&gt;:\tcall   0x40143a &lt;explode_bomb&gt;//拆弹失败，炸弹爆炸\n   0x0000000000400ef7 &lt;+23&gt;:\tadd    $0x8,%rsp //回收栈指针\n   0x0000000000400efb &lt;+27&gt;:\tret    把断点打到0x0000000000400ee9的位置,开始run,随便输点东西\ntxtb *0x400ee9\nrun\nx/s 0x402400\t结果发现0x402400就是我们想要的东西:Border relations with Canada have never been better.那么我们输入的东西到哪里去了?断点打到strings_not_equal里面,查看strings_not_equal汇编代码（在gdb中输入disas strings_not_equal）\nasmDump of assembler code for function strings_not_equal:\n   0x0000000000401338 &lt;+0&gt;:\tpush   %r12\n   0x000000000040133a &lt;+2&gt;:\tpush   %rbp \n   0x000000000040133b &lt;+3&gt;:\tpush   %rbx\n   0x000000000040133c &lt;+4&gt;:\tmov    %rdi,%rbx\n   0x000000000040133f &lt;+7&gt;:\tmov    %rsi,%rbp\n   0x0000000000401342 &lt;+10&gt;:\tcall   0x40131b &lt;string_length&gt;\n   0x0000000000401347 &lt;+15&gt;:\tmov    %eax,%r12d\n   0x000000000040134a &lt;+18&gt;:\tmov    %rbp,%rdi\n   0x000000000040134d &lt;+21&gt;:\tcall   0x40131b &lt;string_length&gt;\n   0x0000000000401352 &lt;+26&gt;:\tmov    $0x1,%edx\n   0x0000000000401357 &lt;+31&gt;:\tcmp    %eax,%r12d\n   0x000000000040135a &lt;+34&gt;:\tjne    0x40139b &lt;strings_not_equal+99&gt;\n   0x000000000040135c &lt;+36&gt;:\tmovzbl (%rbx),%eax\n   0x000000000040135f &lt;+39&gt;:\ttest   %al,%al\n   0x0000000000401361 &lt;+41&gt;:\tje     0x401388 &lt;strings_not_equal+80&gt;\n   0x0000000000401363 &lt;+43&gt;:\tcmp    0x0(%rbp),%al\n   0x0000000000401366 &lt;+46&gt;:\tje     0x401372 &lt;strings_not_equal+58&gt;\n   0x0000000000401368 &lt;+48&gt;:\tjmp    0x40138f &lt;strings_not_equal+87&gt;\n   0x000000000040136a &lt;+50&gt;:\tcmp    0x0(%rbp),%al\n   0x000000000040136d &lt;+53&gt;:\tnopl   (%rax)\n   0x0000000000401370 &lt;+56&gt;:\tjne    0x401396 &lt;strings_not_equal+94&gt;\n   0x0000000000401372 &lt;+58&gt;:\tadd    $0x1,%rbx\n断点打到0x401338的位置，运行程序不停的stepi，知道运行到了第一次调用string_length函数,字符串一般来说是需要一个基址的,所以找能充当基指指针的寄存器,下面是试探过程\nasmx/s $rbp //这个是内置字符串\nx/s $rbx //这个是我们输入的字符串答案\nBorder relations with Canada have never been better.\n\n进入strings_not_equal函数才能看到我们输入的字符串是保存在%rbx这个寄存器当中的\nphase_2 循环disas phase_2得到如下代码(我分成了两部分,这个是前面一部分)\nasm   0x0000000000400efc &lt;+0&gt;:\tpush   %rbp  \n   0x0000000000400efd &lt;+1&gt;:\tpush   %rbx \n   0x0000000000400efe &lt;+2&gt;:\tsub    $0x28,%rsp\n   0x0000000000400f02 &lt;+6&gt;:\tmov    %rsp,%rsi\n   0x0000000000400f05 &lt;+9&gt;:\tcall   0x40145c &lt;read_six_numbers&gt; //这里从名字可以知道要输入6个数字，那么是整形还是浮点数呢?这里先输入6个整形试试输入stepi进入到read_six_numbers函数中，disas read_six_numbers得到下面的代码\nasmDump of assembler code for function read_six_numbers:\n   0x000000000040145c &lt;+0&gt;:\tsub    $0x18,%rsp  // 这个不用管\n   0x0000000000401460 &lt;+4&gt;:\tmov    %rsi,%rdx\n   0x0000000000401463 &lt;+7&gt;:\tlea    0x4(%rsi),%rcx\n   0x0000000000401467 &lt;+11&gt;:\tlea    0x14(%rsi),%rax\n   0x000000000040146b &lt;+15&gt;:\tmov    %rax,0x8(%rsp)\n   0x0000000000401470 &lt;+20&gt;:\tlea    0x10(%rsi),%rax\n   0x0000000000401474 &lt;+24&gt;:\tmov    %rax,(%rsp)\n   0x0000000000401478 &lt;+28&gt;:\tlea    0xc(%rsi),%r9\n   0x000000000040147c &lt;+32&gt;:\tlea    0x8(%rsi),%r8\n   0x0000000000401480 &lt;+36&gt;:\tmov    $0x4025c3,%esi   //看看%esi寄存器的内容\n   0x0000000000401485 &lt;+41&gt;:\tmov    $0x0,%eax\n   0x000000000040148a &lt;+46&gt;:\tcall   0x400bf0 &lt;__isoc99_sscanf@plt&gt;\n   0x000000000040148f &lt;+51&gt;:\tcmp    $0x5,%eax\n   0x0000000000401492 &lt;+54&gt;:\tjg     0x401499 &lt;read_six_numbers+61&gt;\n   0x0000000000401494 &lt;+56&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n   0x0000000000401499 &lt;+61&gt;:\tadd    $0x18,%rsp\n   0x000000000040149d &lt;+65&gt;:\tret    注意这一行mov    $0x4025c3,%esi,因为字符串是不可变的，地址固定死了，所以找立即数esi寄存器的内容为六个整形数据猜测是对的，我们输入1 2 3 4 5 6试试继续阅读phase_2后部分的代码\nasm0x0000000000400f05 &lt;+9&gt;:\tcall   0x40145c &lt;read_six_numbers&gt;\n   0x0000000000400f0a &lt;+14&gt;:\tcmpl   $0x1,(%rsp) // (%rsp)=*rsp 就是我们输入的第一个数字1\n   0x0000000000400f0e &lt;+18&gt;:\tje     0x400f30 &lt;phase_2+52&gt; // 判断是否相等，相等就跳转\n   0x0000000000400f10 &lt;+20&gt;:\tcall   0x40143a &lt;explode_bomb&gt; //否则就炸了\n   0x0000000000400f15 &lt;+25&gt;:\tjmp    0x400f30 &lt;phase_2+52&gt;\n   0x0000000000400f17 &lt;+27&gt;:\tmov    -0x4(%rbx),%eax // eax保存的是我们输入的第一个数，把rbx存放的值减4\n   0x0000000000400f1a &lt;+30&gt;:\tadd    %eax,%eax  // eax*=2\n   0x0000000000400f1c &lt;+32&gt;:\tcmp    %eax,(%rbx) // 比较eax的值和rbx(就是第二个值)是否相等\n   0x0000000000400f1e &lt;+34&gt;:\tje     0x400f25 &lt;phase_2+41&gt; // 相等就跳转\n   0x0000000000400f20 &lt;+36&gt;:\tcall   0x40143a &lt;explode_bomb&gt; //反之爆炸\n   0x0000000000400f25 &lt;+41&gt;:\tadd    $0x4,%rbx // rbx 保存的是第三个值\n   0x0000000000400f29 &lt;+45&gt;:\tcmp    %rbp,%rbx // 看看是否遍历完了\n   0x0000000000400f2c &lt;+48&gt;:\tjne    0x400f17 &lt;phase_2+27&gt;\n   0x0000000000400f2e &lt;+50&gt;:\tjmp    0x400f3c &lt;phase_2+64&gt;\n   0x0000000000400f30 &lt;+52&gt;:\tlea    0x4(%rsp),%rbx // 0x4(%rsp)=我们输入的第二个数,加4的原因是因为int类型是4个字节\n   0x0000000000400f35 &lt;+57&gt;:\tlea    0x18(%rsp),%rbp// 0x18转换为十进制数为24,也就是第6个数字后面的第一个存储单元\n   0x0000000000400f3a &lt;+62&gt;:\tjmp    0x400f17 &lt;phase_2+27&gt;\n   0x0000000000400f3c &lt;+64&gt;:\tadd    $0x28,%rsp意思如下程序开始时,将 (%rsp) 的值与立即数$0x1进行比较，所以第一个输入数必须为1，跳转至400f30，用lea指令分别加载%rsp+4和%rsp+24对应的地址到%rbx和%rbp，因为int型数据占4个字节，所以%rbx和%rbp分别存放第2个输入数的地址和第6个输入数的后一块的地址后跳转至400f17，此时(%rbx-4)对应的值即(%rsp)对应的值，将其存放值%eax中，将该值*2后与(%rbx)对应的值（即第二个输入值）进行比较，即后一个数是前一个数的2倍，所以第二个输入值必须为2，后跳转至400f25，得到%rbx=%rbx+4，与%rbp进行比较（%rbx对应的值(地址)是否为%rbp对应的值(地址)），若不相等则又跳转至400f17重复操作，若相等，则跳转至400f3c，结束循环，可知这是一个循环操作，看是否比较完6个数。\n循环中寄存器对应的值为:\n\n\n\n%rbx\n%rbp\n%eax\n\n\n\n%rsp+4\n%rsp+24\n(%rsp)*2&#x3D;2\n\n\n%rsp+8\n\n(%rsp)*2&#x3D;4\n\n\n%rsp+12\n\n(%rsp)*2&#x3D;8\n\n\n%rsp+16\n\n(%rsp)*2&#x3D;16\n\n\n%rsp+20\n\n(%rsp)*2&#x3D;32\n\n\n%rsp+24\n\n\n\n\nc代码如下\ncint main()&#123;\n    int[] array = new int[6];\n    for(int i=1;i&lt;6;i++)\n        array[i]=array[i-1]*2;\n    return 0;\n&#125;答案\n1 2 4 8 16 32\n\n输入的第一个数时保存在(%rsp)中\nphase_3 分支语句对汇编代码进行分析\nasmDump of assembler code for function phase_3:\n   0x0000000000400f43 &lt;+0&gt;:\tsub    $0x18,%rsp\n   0x0000000000400f47 &lt;+4&gt;:\tlea    0xc(%rsp),%rcx //这个可能是存储第二个数的\n   0x0000000000400f4c &lt;+9&gt;:\tlea    0x8(%rsp),%rdx//这个可能是存储第一个数的\n   0x0000000000400f51 &lt;+14&gt;:\tmov    $0x4025cf,%esi  //出现立即数了,后面调用了scanf，这里应该是初始化的，在gdb 中用x/s $esi 可以得到 %d %d\n   0x0000000000400f56 &lt;+19&gt;:\tmov    $0x0,%eax\n   0x0000000000400f5b &lt;+24&gt;:\tcall   0x400bf0 &lt;__isoc99_sscanf@plt&gt;\n   0x0000000000400f60 &lt;+29&gt;:\tcmp    $0x1,%eax//%eax存储函数的返回值的，scanf的函数返回值就是输入数据的个数\n   0x0000000000400f63 &lt;+32&gt;:\tjg     0x400f6a &lt;phase_3+39&gt;//若大于1就跳转\n   0x0000000000400f65 &lt;+34&gt;:\tcall   0x40143a &lt;explode_bomb&gt;//否则就爆炸\n   0x0000000000400f6a &lt;+39&gt;:\tcmpl   $0x7,0x8(%rsp)\n   0x0000000000400f6f &lt;+44&gt;:\tja     0x400fad &lt;phase_3+106&gt;//无符号大于则跳转，跳转就爆炸了，所以第一个数必须小于7，可以等于,但是不能是负数\n   0x0000000000400f71 &lt;+46&gt;:\tmov    0x8(%rsp),%eax//%eax存储的是输入的第一个数\n   0x0000000000400f75 &lt;+50&gt;:\tjmp    *0x402470(,%rax,8) //*0x402470 = 124,通过x/d 0x402470得到, rax是64位的，eax是32位的，就是说eax是rax的低32位，这里应该是124+%rax*8(%rax就是我们输入的第一个数)来实现跳转。\n   0x0000000000400f7c &lt;+57&gt;:\tmov    $0xcf,%eax\n   0x0000000000400f81 &lt;+62&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;\n   0x0000000000400f83 &lt;+64&gt;:\tmov    $0x2c3,%eax\n   0x0000000000400f88 &lt;+69&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;\n   0x0000000000400f8a &lt;+71&gt;:\tmov    $0x100,%eax\n   0x0000000000400f8f &lt;+76&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;\n   0x0000000000400f91 &lt;+78&gt;:\tmov    $0x185,%eax\n   0x0000000000400f96 &lt;+83&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;\n   0x0000000000400f98 &lt;+85&gt;:\tmov    $0xce,%eax\n--Type &lt;RET&gt; for more, q to quit, c to continue without paging--\n   0x0000000000400f9d &lt;+90&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;\n   0x0000000000400f9f &lt;+92&gt;:\tmov    $0x2aa,%eax\n   0x0000000000400fa4 &lt;+97&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;\n   0x0000000000400fa6 &lt;+99&gt;:\tmov    $0x147,%eax\n   0x0000000000400fab &lt;+104&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;\n   0x0000000000400fad &lt;+106&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n   0x0000000000400fb2 &lt;+111&gt;:\tmov    $0x0,%eax\n   0x0000000000400fb7 &lt;+116&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;\n   0x0000000000400fb9 &lt;+118&gt;:\tmov    $0x137,%eax\n   0x0000000000400fbe &lt;+123&gt;:\tcmp    0xc(%rsp),%eax\n   0x0000000000400fc2 &lt;+127&gt;:\tje     0x400fc9 &lt;phase_3+134&gt;\n   0x0000000000400fc4 &lt;+129&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n   0x0000000000400fc9 &lt;+134&gt;:\tadd    $0x18,%rsp\n   0x0000000000400fcd &lt;+138&gt;:\tret    \nEnd of assembler dump.第一个数的范围是在[0,7]之间，开始试探n1&#x3D;0,跳转到0x400f7c,若n2!&#x3D;0xcf,则爆炸n1&#x3D;1,跳转到0x400fb9,若n2!&#x3D;0x137,则爆炸n1&#x3D;2,跳转到0x400f83,若n2!&#x3D;0x2c3,则爆炸n1&#x3D;3,跳转到0x400f8a,若n2!&#x3D;0x100,则爆炸n1&#x3D;4,跳转到0x400f91,若n2!&#x3D;0x185,则爆炸n1&#x3D;5,跳转到0x400f98,若n2!&#x3D;0xce,则爆炸n1&#x3D;6,跳转到0x400f9f,若n2!&#x3D;0x2aa,则爆炸n1&#x3D;7,跳转到0x400fa6,若n2!&#x3D;0x147,则爆炸\nc代码\ncvoid phase_3(char* input)&#123;\n    //0x8(%rsp) 0xc(%rsp)\n    int n1,n2;\n    //res存放返回输入数据的个数\n    int res = sscanf(input,&quot;%d %d&quot;,&amp;n1,&amp;n2);\n    if(res&lt;=1)\n        explode_bomb();\n    switch(n1)&#123;\n        case 0:\n        if(n2!=0xcf)\n            explode_bomb();\n        break;\n        case 1:\n        if(n2!=0x137)\n            explode_bomb();\n        break;\n        case 2:\n        if(n2!=0x2c3)\n            explode_bomb();\n        break;\n        case 3:\n        if(n2!=0x100)\n            explode_bomb();\n        break;\n        case 4:\n        if(n2!=0x185)\n            explode_bomb();\n        break;\n        case 5:\n        if(n2!=0xce)\n            explode_bomb();\n        break;\n        case 6:\n        if(n2!=0x2aa)\n            explode_bomb();\n        break;\n        case 7:\n        if(n2!=0x147)\n            explode_bomb();\n        break;\n    &#125;\n&#125;答案\n0 207\n1 311\n2 707\n3 256\n4 389\n5 206\n6 682\n7 327\n\nphase_4 递归分析汇编代码\nasmDump of assembler code for function phase_4:\n   0x000000000040100c &lt;+0&gt;:\tsub    $0x18,%rsp\t# 给局部变量腾出空间\n   0x0000000000401010 &lt;+4&gt;:\tlea    0xc(%rsp),%rcx   # 我们输入的第二个数\n   0x0000000000401015 &lt;+9&gt;:\tlea    0x8(%rsp),%rdx\t# 我们输入的第一个数\n   0x000000000040101a &lt;+14&gt;:\tmov    $0x4025cf,%esi\t# 通过x/s 0x4025cf 可以得到是格式化字符串&quot;%d %d&quot;\n   0x000000000040101f &lt;+19&gt;:\tmov    $0x0,%eax        # 这个就不说了\n   0x0000000000401024 &lt;+24&gt;:\tcall   0x400bf0 &lt;__isoc99_sscanf@plt&gt; # 调用了scanf函数\n   0x0000000000401029 &lt;+29&gt;:\tcmp    $0x2,%eax\t# 如果输入的数字个数不等于2就爆炸了\n   0x000000000040102c &lt;+32&gt;:\tjne    0x401035 &lt;phase_4+41&gt;\n   0x000000000040102e &lt;+34&gt;:\tcmpl   $0xe,0x8(%rsp)  # 比较第一个数与14的大小，若小于就跳转，若大于就爆炸，第一个数的范围[0,14]\n   0x0000000000401033 &lt;+39&gt;:\tjbe    0x40103a &lt;phase_4+46&gt;\n   0x0000000000401035 &lt;+41&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n   0x000000000040103a &lt;+46&gt;:\tmov    $0xe,%edx       \n   0x000000000040103f &lt;+51&gt;:\tmov    $0x0,%esi\n   0x0000000000401044 &lt;+56&gt;:\tmov    0x8(%rsp),%edi\n   0x0000000000401048 &lt;+60&gt;:\tcall   0x400fce &lt;func4&gt; #调用func4 应该是需要%edx %esi %edi这几个参数\n   0x000000000040104d &lt;+65&gt;:\ttest   %eax,%eax\t# 按位逻辑与操作\n   0x000000000040104f &lt;+67&gt;:\tjne    0x401058 &lt;phase_4+76&gt; # 如果%eax不等于0,则跳转至爆炸\n   0x0000000000401051 &lt;+69&gt;:\tcmpl   $0x0,0xc(%rsp)\t#比较第二个数与0的大小关系\n   0x0000000000401056 &lt;+74&gt;:\tje     0x40105d &lt;phase_4+81&gt; #相等就跳转结尾\n   0x0000000000401058 &lt;+76&gt;:\tcall   0x40143a &lt;explode_bomb&gt; #不相等就爆炸\n   0x000000000040105d &lt;+81&gt;:\tadd    $0x18,%rsp\n   0x0000000000401061 &lt;+85&gt;:\tret    接下来看看func4干了什么\nasmDump of assembler code for function func4:\n   0x0000000000400fce &lt;+0&gt;:\tsub    $0x8,%rsp   # 为局部变量腾出空间\n   0x0000000000400fd2 &lt;+4&gt;:\tmov    %edx,%eax   # 0xe\n   0x0000000000400fd4 &lt;+6&gt;:\tsub    %esi,%eax   # 0xe-0x0\n   0x0000000000400fd6 &lt;+8&gt;:\tmov    %eax,%ecx   # ecx = 0xe\n   0x0000000000400fd8 &lt;+10&gt;:\tshr    $0x1f,%ecx  # %ecx的值逻辑右移31位=1110&gt;&gt;31=14/2^31 =0\n   0x0000000000400fdb &lt;+13&gt;:\tadd    %ecx,%eax   # ecx = ecx + eax = 0 + e\n   0x0000000000400fdd &lt;+15&gt;:\tsar    %eax\t   # 算数右移1位 %eax = %eax /2 = 0xe/2 = 7 \n   0x0000000000400fdf &lt;+17&gt;:\tlea    (%rax,%rsi,1),%ecx # %eax是%rax的低32位，%esi是%rsi的低32位  %rax + %rsi * 1 = 7 + 0=7 %ecx=7\n   0x0000000000400fe2 &lt;+20&gt;:\tcmp    %edi,%ecx  #  %edi保存的是输入的第一个数字 %ecx = 7 \n   0x0000000000400fe4 &lt;+22&gt;:\tjle    0x400ff2 &lt;func4+36&gt;\n   0x0000000000400fe6 &lt;+24&gt;:\tlea    -0x1(%rcx),%edx  # 7 -1 =&gt;edx=6\n   0x0000000000400fe9 &lt;+27&gt;:\tcall   0x400fce &lt;func4&gt; # 递归调用\n   0x0000000000400fee &lt;+32&gt;:\tadd    %eax,%eax\t# eax*=2\n   0x0000000000400ff0 &lt;+34&gt;:\tjmp    0x401007 &lt;func4+57&gt;  # 出口\n   0x0000000000400ff2 &lt;+36&gt;:\tmov    $0x0,%eax  # %eax = 0\n   0x0000000000400ff7 &lt;+41&gt;:\tcmp    %edi,%ecx  # n1, 7 \n   0x0000000000400ff9 &lt;+43&gt;:\tjge    0x401007 &lt;func4+57&gt; # n1&gt;=7跳转到func7 出口\n   0x0000000000400ffb &lt;+45&gt;:\tlea    0x1(%rcx),%esi  # ecx是rcx的低32位     0x1+7=&gt;esi=8 \n   0x0000000000400ffe &lt;+48&gt;:\tcall   0x400fce &lt;func4&gt;\t  # 跳转\n   0x0000000000401003 &lt;+53&gt;:\tlea    0x1(%rax,%rax,1),%eax # 0x1 + func4+func4=&gt;eax\n   0x0000000000401007 &lt;+57&gt;:\tadd    $0x8,%rsp\n   0x000000000040100b &lt;+61&gt;:\tret    \n看看这个\nasm 0x0000000000401051 &lt;+69&gt;:\tcmpl   $0x0,0xc(%rsp)\t#比较第二个数与0的大小关系\n   0x0000000000401056 &lt;+74&gt;:\tje     0x40105d &lt;phase_4+81&gt; #相等就跳转结尾\n\n 0x000000000040104d &lt;+65&gt;:\ttest   %eax,%eax\t# 按位逻辑与操作\n   0x000000000040104f &lt;+67&gt;:\tjne    0x401058 &lt;phase_4+76&gt; # 如果%eax不等于0,则跳转至爆炸所以n2必须等于0，n1的值要让函数func4的返回值为4，且n1∈[0,14]\nc//a: %edi b:%esi c:%edx d: %ecx e:%eax\nint func4(int a,int b,int c)\n&#123;//a in %rdi,b in %rsi,c in %rdx,e in %rax,d in %ecx\n //y的初始值为0，z的初始值为14\n  int t=c-b;\n  int d=e&gt;&gt;31;\n  e=(e+d)&gt;&gt;1;\n  d=e+b;\n  if(k&gt;a)\n  &#123;\n    c=d-1;\n    func4(a,b,c);\n    e*=2;\n    return e;\n  &#125;\n  else\n   &#123;\n     e=0;\n     if(d&lt;a)\n     &#123;\n        b=da+1;\n        func4(a,b,c);\n        e=2*e+1;\n        return e;\n     &#125;\n     else\n         return e;   //要使返回值e（%eax）为0，其中一个答案为a=d=7\n   &#125;\n&#125;分析可得一个答案 7 0其余的挨个带进去试\n答案\n7 0\n\nphase_5 指针 字符串比较phase_5的汇编代码\nasmDump of assembler code for function phase_5:\n   0x0000000000401062 &lt;+0&gt;:\tpush   %rbx\n   0x0000000000401063 &lt;+1&gt;:\tsub    $0x20,%rsp\n   0x0000000000401067 &lt;+5&gt;:\tmov    %rdi,%rbx   #%rbx存放我们输入的字符串地址\n   0x000000000040106a &lt;+8&gt;:\tmov    %fs:0x28,%rax\t# 栈破坏检测,csapp P199页(金丝雀值),即在栈帧的任何局部缓冲区与栈状态之间存储一个值,在程序返回前检查该值，若该值发生变化，程序提前终止\n   0x0000000000401073 &lt;+17&gt;:\tmov    %rax,0x18(%rsp) \n   0x0000000000401078 &lt;+22&gt;:\txor    %eax,%eax        # 异或清零\n   0x000000000040107a &lt;+24&gt;:\tcall   0x40131b &lt;string_length&gt; \n   0x000000000040107f &lt;+29&gt;:\tcmp    $0x6,%eax\n   0x0000000000401082 &lt;+32&gt;:\tje     0x4010d2 &lt;phase_5+112&gt; # 输入的字符个数必须等于6，否则爆炸\n   0x0000000000401084 &lt;+34&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n   0x0000000000401089 &lt;+39&gt;:\tjmp    0x4010d2 &lt;phase_5+112&gt; \n   0x000000000040108b &lt;+41&gt;:\tmovzbl (%rbx,%rax,1),%ecx # rbx就是我们输入的字符串地址 翻译成语句:%ecx = %rbx + %rax*1 = %rbx+0*1=%rbx=我们输入的第一个字符\n   0x000000000040108f &lt;+45&gt;:\tmov    %cl,(%rsp)    # %cl是%ecx的低8位 \n   0x0000000000401092 &lt;+48&gt;:\tmov    (%rsp),%rdx   # %rdx保存我们输入的一位字符\n   0x0000000000401096 &lt;+52&gt;:\tand    $0xf,%edx     # edx是rdx的低32位，取出低4位\n   0x0000000000401099 &lt;+55&gt;:\tmovzbl 0x4024b0(%rdx),%edx # 0x40240b0是字符串&quot;maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?&quot;的基址，设该字符串为str\n                               # edx = str[rdx]\n   0x00000000004010a0 &lt;+62&gt;:\tmov    %dl,0x10(%rsp,%rax,1) # %dl是rdx的低4位\n   0x00000000004010a4 &lt;+66&gt;:\tadd    $0x1,%rax      # 加一\n   0x00000000004010a8 &lt;+70&gt;:\tcmp    $0x6,%rax      # 和6相比\n   0x00000000004010ac &lt;+74&gt;:\tjne    0x40108b &lt;phase_5+41&gt; # 不等于6跳转\n   0x00000000004010ae &lt;+76&gt;:\tmovb   $0x0,0x16(%rsp)\n   0x00000000004010b3 &lt;+81&gt;:\tmov    $0x40245e,%esi  #0x40245e是字符串flyers的地址，用立即数来表示的，应该是内置的\n   0x00000000004010b8 &lt;+86&gt;:\tlea    0x10(%rsp),%rdi # rdi是aduier的地址 ，结合下面的strings_not_equal函数来看，应该是要把我们输入的东西和flyers比较，由于我们输入的是abcdef,a的ASCII码是97，低4位是0001，所以取得是索引为1的,接下来就是要改变我们输入的东西，让其在str中截取得到的字符串为flyers即可\n   0x00000000004010bd &lt;+91&gt;:\tcall   0x401338 &lt;strings_not_equal&gt;\n   0x00000000004010c2 &lt;+96&gt;:\ttest   %eax,%eax \n   0x00000000004010c4 &lt;+98&gt;:\tje     0x4010d9 &lt;phase_5+119&gt;  #相等跳转\n   0x00000000004010c6 &lt;+100&gt;:\tcall   0x40143a &lt;explode_bomb&gt; #不相等就炸\n   0x00000000004010cb &lt;+105&gt;:\tnopl   0x0(%rax,%rax,1)\n   0x00000000004010d0 &lt;+110&gt;:\tjmp    0x4010d9 &lt;phase_5+119&gt;\n   0x00000000004010d2 &lt;+112&gt;:\tmov    $0x0,%eax  # %eax清零\n   0x00000000004010d7 &lt;+117&gt;:\tjmp    0x40108b &lt;phase_5+41&gt; \n   0x00000000004010d9 &lt;+119&gt;:\tmov    0x18(%rsp),%rax\n   0x00000000004010de &lt;+124&gt;:\txor    %fs:0x28,%rax\n   0x00000000004010e7 &lt;+133&gt;:\tje     0x4010ee &lt;phase_5+140&gt;\n   0x00000000004010e9 &lt;+135&gt;:\tcall   0x400b30 &lt;__stack_chk_fail@plt&gt;\n   0x00000000004010ee &lt;+140&gt;:\tadd    $0x20,%rsp\n   0x00000000004010f2 &lt;+144&gt;:\tpop    %rbx\n   0x00000000004010f3 &lt;+145&gt;:\tret    \n所以过关条件就是通过我们输入的六个字符的ASCII码的低4位作为索引,取切maduier那一大串的东西且返回的结果必须是flyers下面是flyers中各字符在maduier中的位置\n\n\n\n字符\n位置\n\n\n\nf\n9\n\n\nI\n15\n\n\ny\n14\n\n\ne\n5\n\n\nr\n6\n\n\ns\n7\n\n\n找到六个字符，他们的ASCII码值的低4位要是表格中的(从上到下，依次符合即可)接下来就是找字符\n答案不唯一\n\n9?&gt;uvwIONEFG\n\nphase6 链表这个我确实是很蒙，我尽力记录清楚,过段时间我再回顾一下，我画点图来帮助理解第一部分\nasmDump of assembler code for function phase_6:\n   0x00000000004010f4 &lt;+0&gt;:\tpush   %r14\n   0x00000000004010f6 &lt;+2&gt;:\tpush   %r13\n   0x00000000004010f8 &lt;+4&gt;:\tpush   %r12\n   0x00000000004010fa &lt;+6&gt;:\tpush   %rbp\n   0x00000000004010fb &lt;+7&gt;:\tpush   %rbx\n   0x00000000004010fc &lt;+8&gt;:\tsub    $0x50,%rsp\n   0x0000000000401100 &lt;+12&gt;:\tmov    %rsp,%r13\n   0x0000000000401103 &lt;+15&gt;:\tmov    %rsp,%rsi\n   0x0000000000401106 &lt;+18&gt;:\tcall   0x40145c &lt;read_six_numbers&gt;\n   0x000000000040110b &lt;+23&gt;:\tmov    %rsp,%r14 # 保存我们输入的数的\n   0x000000000040110e &lt;+26&gt;:\tmov    $0x0,%r12d # \n   0x0000000000401114 &lt;+32&gt;:\tmov    %r13,%rbp  \n   0x0000000000401117 &lt;+35&gt;:\tmov    0x0(%r13),%eax # %eax = nums[0]\n   0x000000000040111b &lt;+39&gt;:\tsub    $0x1,%eax   # %eax-=1\n   0x000000000040111e &lt;+42&gt;:\tcmp    $0x5,%eax  # eax-1&lt;=5\n   0x0000000000401121 &lt;+45&gt;:\tjbe    0x401128 &lt;phase_6+52&gt;\n   0x0000000000401123 &lt;+47&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n\n   0x0000000000401128 &lt;+52&gt;:\tadd    $0x1,%r12d # r12d=1\n   0x000000000040112c &lt;+56&gt;:\tcmp    $0x6,%r12d \n   0x0000000000401130 &lt;+60&gt;:\tje     0x401153 &lt;phase_6+95&gt;  \n   0x0000000000401132 &lt;+62&gt;:\tmov    %r12d,%ebx # %ebx = 1  退出循环的条件是遍历完6个数字\n\n   0x0000000000401135 &lt;+65&gt;:\tmovslq %ebx,%rax  # rax = 1\n   0x0000000000401138 &lt;+68&gt;:\tmov    (%rsp,%rax,4),%eax  # eax =  2 拿到下一个元素给eax  4是int类型的4个字节\n   0x000000000040113b &lt;+71&gt;:\tcmp    %eax,0x0(%rbp)  # nums[i] !=nums[0]\n   0x000000000040113e &lt;+74&gt;:\tjne    0x401145 &lt;phase_6+81&gt;\n   0x0000000000401140 &lt;+76&gt;:\tcall   0x40143a &lt;explode_bomb&gt; \n   0x0000000000401145 &lt;+81&gt;:\tadd    $0x1,%ebx  # ebx=2\n   0x0000000000401148 &lt;+84&gt;:\tcmp    $0x5,%ebx  # ebx&lt;=5\n   0x000000000040114b &lt;+87&gt;:\tjle    0x401135 &lt;phase_6+65&gt; # 这个循环是判断数组运算是否相等\n   0x000000000040114d &lt;+89&gt;:\tadd    $0x4,%r13\n   0x0000000000401151 &lt;+93&gt;:\tjmp    0x401114 &lt;phase_6+32&gt;\n   \n\n   0x0000000000401153 &lt;+95&gt;:\tlea    0x18(%rsp),%rsi\n   0x0000000000401158 &lt;+100&gt;:\tmov    %r14,%rax\n   0x000000000040115b &lt;+103&gt;:\tmov    $0x7,%ecx\n   0x0000000000401160 &lt;+108&gt;:\tmov    %ecx,%edx\n   0x0000000000401162 &lt;+110&gt;:\tsub    (%rax),%edx\n   0x0000000000401164 &lt;+112&gt;:\tmov    %edx,(%rax)\n   0x0000000000401166 &lt;+114&gt;:\tadd    $0x4,%rax伪代码\ncr14 = rsp  nums[0]\nrbp = r13  nums[0]\neax = nums[0]\neax -=1\nfor(r12d =0;r12d&lt;6;r12d++)&#123;\nif(eax&gt;6)\n    explode_bomb();\nr12d++\n if(r12d==6)\n    break\n ebx = r12d\n for(ebx=r12d;ebx&lt;=5;ebx++)&#123;\n    rax = nums[rbx]\n     if(nums[rbx] != rbp)\n    &#123;ebx++;&#125;\n  else \n    explode_bomb();\n&#125;\nr13++; //(这里是加1，但是反应在内存上是加上了1*int类型所占的字节)\n&#125;\n&#125;也就是说每个数字必须&lt;&#x3D;6,且6个数字互不相等第二部分\nasm   0x0000000000401153 &lt;+95&gt;:\tlea    0x18(%rsp),%rsi # rsi = 0 ,判定是否遍历完了，第六个元素后面的那个存储单元没有值，那就是0，0x18=&gt;24，是因为我们有六个元素，每个元素4个字节，拿到最后一个元素后要地址(0x14)要+4，所以是0x18\n   0x0000000000401158 &lt;+100&gt;:\tmov    %r14,%rax  # *r14 = 5 = nums[0]\n   0x000000000040115b &lt;+103&gt;:\tmov    $0x7,%ecx  # ecx = 7\n   0x0000000000401160 &lt;+108&gt;:\tmov    %ecx,%edx  # edx = ecx = 7\n   0x0000000000401162 &lt;+110&gt;:\tsub    (%rax),%edx # edx = edx  - *rax = 7 - *rax\n   0x0000000000401164 &lt;+112&gt;:\tmov    %edx,(%rax) # *rax = edx\n   0x0000000000401166 &lt;+114&gt;:\tadd    $0x4,%rax   # rax+=4 获取下一个元素\n   0x000000000040116a &lt;+118&gt;:\tcmp    %rsi,%rax  # rax =num[1]=7-num[1]\n   0x000000000040116d &lt;+121&gt;:\tjne    0x401160 &lt;phase_6+108&gt;crsi = 0;//实际上是nums[6]\necx = 7;\nfor(rax=0;rax&lt;6;rax++) //底层里面nums[6]=0,要是不好理解，可以把中间的语句换成rax!=rsi,应该好理解点\n    nums[rax]=7-nums[rax];\n    第三部分第三部分中有一条语句\nasm   0x0000000000401183 &lt;+143&gt;:\tmov    $0x6032d0,%edx  通过x&#x2F;30来查看 0x6032d0发现这是一个链表,但是前面的14c不知道是什么东西，结点如下\ncstruct node&#123;\n    int value;\n    int number;\n    node* next;\n&#125;asm   0x000000000040116f &lt;+123&gt;:\tmov    $0x0,%esi  # esi = 0 \n   0x0000000000401174 &lt;+128&gt;:\tjmp    0x401197 &lt;phase_6+163&gt;\n   0x0000000000401176 &lt;+130&gt;:\tmov    0x8(%rdx),%rdx # 是一个node类型 rdx = 当前结点的next值\n   0x000000000040117a &lt;+134&gt;:\tadd    $0x1,%eax   # eax +=1\n   0x000000000040117d &lt;+137&gt;:\tcmp    %ecx,%eax   \n   0x000000000040117f &lt;+139&gt;:\tjne    0x401176 &lt;phase_6+130&gt; # 不相等继续遍历，rdx最终指向链表的第%eax个结点\n   0x0000000000401181 &lt;+141&gt;:\tjmp    0x401188 &lt;phase_6+148&gt;\n   0x0000000000401183 &lt;+143&gt;:\tmov    $0x6032d0,%edx  # 0x6032d0是node1的地址\n   0x0000000000401188 &lt;+148&gt;:\tmov    %rdx,0x20(%rsp,%rsi,2) # (rsp+32+rsi*2)=rdx\n   0x000000000040118d &lt;+153&gt;:\tadd    $0x4,%rsi # rsi+=4 \n   0x0000000000401191 &lt;+157&gt;:\tcmp    $0x18,%rsi # 24\n   0x0000000000401195 &lt;+161&gt;:\tje     0x4011ab &lt;phase_6+183&gt;\n   0x0000000000401197 &lt;+163&gt;:\tmov    (%rsp,%rsi,1),%ecx  # ecx = *(rsp + rsi) \n   0x000000000040119a &lt;+166&gt;:\tcmp    $0x1,%ecx # ecx&lt;=1\n   0x000000000040119d &lt;+169&gt;:\tjle    0x401183 &lt;phase_6+143&gt;\n   0x000000000040119f &lt;+171&gt;:\tmov    $0x1,%eax # eax = 1\n   0x00000000004011a4 &lt;+176&gt;:\tmov    $0x6032d0,%edx # 前面的那个立即数是一个node类型的指针,x/30 0x6032d0查看他附近的30个字节\n   0x00000000004011a9 &lt;+181&gt;:\tjmp    0x401176 &lt;phase_6+130&gt;这部分我很蒙第四部分\nasmfor(int i=6;i&gt;=1;i--)\n    node[i].next=node[i-1]; 183~220\n   0x00000000004011ab &lt;+183&gt;:\tmov    0x20(%rsp),%rbx  # rbx = (0x20+rsp)\n   0x00000000004011b0 &lt;+188&gt;:\tlea    0x28(%rsp),%rax  # rax = (0x28+rsp)\n   0x00000000004011b5 &lt;+193&gt;:\tlea    0x50(%rsp),%rsi  # rsi = (0x50+rsp) 0x50是链表的尾端\n   0x00000000004011ba &lt;+198&gt;:\tmov    %rbx,%rcx   \n   0x00000000004011bd &lt;+201&gt;:\tmov    (%rax),%rdx  # rdx = *rax\n   0x00000000004011c0 &lt;+204&gt;:\tmov    %rdx,0x8(%rcx) //栈\n   0x00000000004011c4 &lt;+208&gt;:\tadd    $0x8,%rax\n   0x00000000004011c8 &lt;+212&gt;:\tcmp    %rsi,%rax\n   0x00000000004011cb &lt;+215&gt;:\tje     0x4011d2 &lt;phase_6+222&gt;\n   0x00000000004011cd &lt;+217&gt;:\tmov    %rdx,%rcx\n   0x00000000004011d0 &lt;+220&gt;:\tjmp    0x4011bd &lt;phase_6+201&gt;\n   # 这里改一下输入,改成6 5 4 3 2 1\n\n   0x00000000004011d2 &lt;+222&gt;:\tmovq   $0x0,0x8(%rdx)  # 把最后一个结点的next域赋值为0\n   0x00000000004011da &lt;+230&gt;:\tmov    $0x5,%ebp       # ebp = 5\n   0x00000000004011df &lt;+235&gt;:\tmov    0x8(%rbx),%rax  # 指向重排后的第i个(1&lt;=i&lt;=5)\n   0x00000000004011e3 &lt;+239&gt;:\tmov    (%rax),%eax    # \n   0x00000000004011e5 &lt;+241&gt;:\tcmp    %eax,(%rbx)    # rbx指向的是重排后的第i+1个 第1个大于等于第二个,要呈现单调递减的顺序，而且比较的是类似于权重\n   0x00000000004011e7 &lt;+243&gt;:\tjge    0x4011ee &lt;phase_6+250&gt;  # 必须要单调递减\n   0x00000000004011e9 &lt;+245&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n   0x00000000004011ee &lt;+250&gt;:\tmov    0x8(%rbx),%rbx\n   0x00000000004011f2 &lt;+254&gt;:\tsub    $0x1,%ebp\n   0x00000000004011f5 &lt;+257&gt;:\tjne    0x4011df &lt;phase_6+235&gt;\n   0x00000000004011f7 &lt;+259&gt;:\tadd    $0x50,%rsp\n   0x00000000004011fb &lt;+263&gt;:\tpop    %rbx\n   0x00000000004011fc &lt;+264&gt;:\tpop    %rbp\n   0x00000000004011fd &lt;+265&gt;:\tpop    %r12\n   \n   0x00000000004011ff &lt;+267&gt;:\tpop    %r13\n   0x0000000000401201 &lt;+269&gt;:\tpop    %r14\n   0x0000000000401203 &lt;+271&gt;:\tret    梳理1.输入六个数(&lt;&#x3D;6且互不相同)2.nums[i]&#x3D;7-nums[i]7 -nums[0]&#x3D;nums[0]7 -nums[1]&#x3D;nums[1]7 -nums[2]&#x3D;nums[2]7 -nums[3]&#x3D;nums[3]7 -nums[4]&#x3D;nums[4]7 -nums[5]&#x3D;nums[5]1   2   3   4   5   6332 168 924 691 477 443  这个是各个结点的权重,\n根据nums[i]的内容对node进行重排，确保重排后的各个结点的权重呈单调递减\n\n答案: 4 3 2 1 6 5\n\n全部的分析过程\nasmDump of assembler code for function phase_6:\n   0x00000000004010f4 &lt;+0&gt;:\tpush   %r14\n   0x00000000004010f6 &lt;+2&gt;:\tpush   %r13\n   0x00000000004010f8 &lt;+4&gt;:\tpush   %r12\n   0x00000000004010fa &lt;+6&gt;:\tpush   %rbp\n   0x00000000004010fb &lt;+7&gt;:\tpush   %rbx\n   0x00000000004010fc &lt;+8&gt;:\tsub    $0x50,%rsp\n   0x0000000000401100 &lt;+12&gt;:\tmov    %rsp,%r13\n   0x0000000000401103 &lt;+15&gt;:\tmov    %rsp,%rsi\n   0x0000000000401106 &lt;+18&gt;:\tcall   0x40145c &lt;read_six_numbers&gt;\n   0x000000000040110b &lt;+23&gt;:\tmov    %rsp,%r14 # nums[0] 基址\n   0x000000000040110e &lt;+26&gt;:\tmov    $0x0,%r12d # \n   0x0000000000401114 &lt;+32&gt;:\tmov    %r13,%rbp  # nums[0]\n   0x0000000000401117 &lt;+35&gt;:\tmov    0x0(%r13),%eax # %eax = nums[0]\n   0x000000000040111b &lt;+39&gt;:\tsub    $0x1,%eax   # %eax-=1\n   0x000000000040111e &lt;+42&gt;:\tcmp    $0x5,%eax  # eax-1&lt;=5\n   0x0000000000401121 &lt;+45&gt;:\tjbe    0x401128 &lt;phase_6+52&gt;\n   0x0000000000401123 &lt;+47&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n\n   0x0000000000401128 &lt;+52&gt;:\tadd    $0x1,%r12d # r12d=1\n   0x000000000040112c &lt;+56&gt;:\tcmp    $0x6,%r12d \n   0x0000000000401130 &lt;+60&gt;:\tje     0x401153 &lt;phase_6+95&gt;  \n   0x0000000000401132 &lt;+62&gt;:\tmov    %r12d,%ebx # %ebx = 1  退出循环的条件是遍历完6个数字\n\n   0x0000000000401135 &lt;+65&gt;:\tmovslq %ebx,%rax  # rax = 1\n   0x0000000000401138 &lt;+68&gt;:\tmov    (%rsp,%rax,4),%eax  # eax =  2 拿到下一个元素给eax  4是int类型的4个字节\n   0x000000000040113b &lt;+71&gt;:\tcmp    %eax,0x0(%rbp)  # nums[i] !=nums[0]\n   0x000000000040113e &lt;+74&gt;:\tjne    0x401145 &lt;phase_6+81&gt;\n   0x0000000000401140 &lt;+76&gt;:\tcall   0x40143a &lt;explode_bomb&gt; \n   0x0000000000401145 &lt;+81&gt;:\tadd    $0x1,%ebx  # ebx=2\n   0x0000000000401148 &lt;+84&gt;:\tcmp    $0x5,%ebx  # ebx&lt;=5\n   0x000000000040114b &lt;+87&gt;:\tjle    0x401135 &lt;phase_6+65&gt; # 这个循环是判断数组运算是否相等\n   0x000000000040114d &lt;+89&gt;:\tadd    $0x4,%r13\n   0x0000000000401151 &lt;+93&gt;:\tjmp    0x401114 &lt;phase_6+32&gt;\n   \n\n   0x0000000000401153 &lt;+95&gt;:\tlea    0x18(%rsp),%rsi # rsi = 0 \n   0x0000000000401158 &lt;+100&gt;:\tmov    %r14,%rax  # *r14 = 5\n   0x000000000040115b &lt;+103&gt;:\tmov    $0x7,%ecx  # ecx = 7\n   0x0000000000401160 &lt;+108&gt;:\tmov    %ecx,%edx  # edx = ecx = 7\n   0x0000000000401162 &lt;+110&gt;:\tsub    (%rax),%edx # *edx = *edx  - *rax = 7 - *rax\n   0x0000000000401164 &lt;+112&gt;:\tmov    %edx,(%rax) # *rax = edx\n   0x0000000000401166 &lt;+114&gt;:\tadd    $0x4,%rax   # rax+=4 获取下一个元素\n   0x000000000040116a &lt;+118&gt;:\tcmp    %rsi,%rax  # rax =num[1]=7-num[1]\n   0x000000000040116d &lt;+121&gt;:\tjne    0x401160 &lt;phase_6+108&gt;\n\n4 3 2 1 5 6\n\n   0x000000000040116f &lt;+123&gt;:\tmov    $0x0,%esi  # esi = 0 \n   0x0000000000401174 &lt;+128&gt;:\tjmp    0x401197 &lt;phase_6+163&gt;\n   0x0000000000401176 &lt;+130&gt;:\tmov    0x8(%rdx),%rdx # 是一个node类型 rdx = 当前结点的next值\n   0x000000000040117a &lt;+134&gt;:\tadd    $0x1,%eax   # eax +=1\n   0x000000000040117d &lt;+137&gt;:\tcmp    %ecx,%eax   \n   0x000000000040117f &lt;+139&gt;:\tjne    0x401176 &lt;phase_6+130&gt; # 不相等继续遍历，rdx最终指向链表的第%eax个结点\n   0x0000000000401181 &lt;+141&gt;:\tjmp    0x401188 &lt;phase_6+148&gt;\n   0x0000000000401183 &lt;+143&gt;:\tmov    $0x6032d0,%edx  # 0x6032d0是node1的地址\n   0x0000000000401188 &lt;+148&gt;:\tmov    %rdx,0x20(%rsp,%rsi,2) # (rsp+32+rsi*2)=rdx\n   0x000000000040118d &lt;+153&gt;:\tadd    $0x4,%rsi # rsi+=4 \n   0x0000000000401191 &lt;+157&gt;:\tcmp    $0x18,%rsi # 24\n   0x0000000000401195 &lt;+161&gt;:\tje     0x4011ab &lt;phase_6+183&gt;\n\n   0x0000000000401197 &lt;+163&gt;:\tmov    (%rsp,%rsi,1),%ecx  # ecx = *(rsp + rsi) \n\n   0x000000000040119a &lt;+166&gt;:\tcmp    $0x1,%ecx # ecx&lt;=1\n   0x000000000040119d &lt;+169&gt;:\tjle    0x401183 &lt;phase_6+143&gt;\n   0x000000000040119f &lt;+171&gt;:\tmov    $0x1,%eax # eax = 1\n   0x00000000004011a4 &lt;+176&gt;:\tmov    $0x6032d0,%edx # 前面的那个立即数是一个node类型的指针,x/30 0x6032d0查看他附近的30个字节\n   0x00000000004011a9 &lt;+181&gt;:\tjmp    0x401176 &lt;phase_6+130&gt;\n\n   for(int i=6;i&gt;=1;i--)\n    node[i].next=node[i-1]; 183~220\n   0x00000000004011ab &lt;+183&gt;:\tmov    0x20(%rsp),%rbx  # rbx = (0x20+rsp)\n   0x00000000004011b0 &lt;+188&gt;:\tlea    0x28(%rsp),%rax  # rax = (0x28+rsp)\n   0x00000000004011b5 &lt;+193&gt;:\tlea    0x50(%rsp),%rsi  # rsi = (0x50+rsp) 0x50是链表的尾端\n   0x00000000004011ba &lt;+198&gt;:\tmov    %rbx,%rcx   \n   0x00000000004011bd &lt;+201&gt;:\tmov    (%rax),%rdx  # rdx = *rax\n   0x00000000004011c0 &lt;+204&gt;:\tmov    %rdx,0x8(%rcx) //栈\n   0x00000000004011c4 &lt;+208&gt;:\tadd    $0x8,%rax\n   0x00000000004011c8 &lt;+212&gt;:\tcmp    %rsi,%rax\n   0x00000000004011cb &lt;+215&gt;:\tje     0x4011d2 &lt;phase_6+222&gt;\n   0x00000000004011cd &lt;+217&gt;:\tmov    %rdx,%rcx\n   0x00000000004011d0 &lt;+220&gt;:\tjmp    0x4011bd &lt;phase_6+201&gt;\n   # 这里改一下输入,改成6 5 4 3 2 1\n\n   0x00000000004011d2 &lt;+222&gt;:\tmovq   $0x0,0x8(%rdx)  # 把最后一个结点的next域赋值为0\n   0x00000000004011da &lt;+230&gt;:\tmov    $0x5,%ebp       # ebp = 5\n   0x00000000004011df &lt;+235&gt;:\tmov    0x8(%rbx),%rax  # 指向重排后的第i个(1&lt;=i&lt;=5)\n   0x00000000004011e3 &lt;+239&gt;:\tmov    (%rax),%eax    # \n   0x00000000004011e5 &lt;+241&gt;:\tcmp    %eax,(%rbx)    # rbx指向的是重排后的第i+1个 第1个大于等于第二个,要呈现单调递减的顺序，而且比较的是类似于权重\n   0x00000000004011e7 &lt;+243&gt;:\tjge    0x4011ee &lt;phase_6+250&gt;  # 必须要单调递减\n   0x00000000004011e9 &lt;+245&gt;:\tcall   0x40143a &lt;explode_bomb&gt;\n   0x00000000004011ee &lt;+250&gt;:\tmov    0x8(%rbx),%rbx\n   0x00000000004011f2 &lt;+254&gt;:\tsub    $0x1,%ebp\n   0x00000000004011f5 &lt;+257&gt;:\tjne    0x4011df &lt;phase_6+235&gt;\n   0x00000000004011f7 &lt;+259&gt;:\tadd    $0x50,%rsp\n   0x00000000004011fb &lt;+263&gt;:\tpop    %rbx\n   0x00000000004011fc &lt;+264&gt;:\tpop    %rbp\n   0x00000000004011fd &lt;+265&gt;:\tpop    %r12\n   0x00000000004011ff &lt;+267&gt;:\tpop    %r13\n   0x0000000000401201 &lt;+269&gt;:\tpop    %r14\n   0x0000000000401203 &lt;+271&gt;:\tret    finish明天试试隐藏关\n","slug":"BombLab","date":"2023-10-26T06:08:49.000Z","categories_index":"","tags_index":"CSAPP Lab","author_index":"矽"},{"id":"b1ab2d6fe200a9efa756d30468277a67","title":"Poem","content":"杨花落尽子规啼，闻道龙标过五溪\n我寄愁心与明月，随风直到夜郎西\n倘若相逢即别离\n迢迢千里无期\n此地 何时 再相遇\n","slug":"Poem","date":"2023-10-20T03:21:17.000Z","categories_index":"","tags_index":"诗词,李白","author_index":"矽"},{"id":"0e5de32edc2281f52ebc4c28d8747f61","title":"修改试试","content":"","slug":"first-blog","date":"2023-10-19T07:20:45.000Z","categories_index":"","tags_index":"测试,123","author_index":"矽"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"第一篇博客摘要介绍性的东西\n关键词Hexo、博客、创建、配置、插件、主题\n绪论1.1 背景随着互联网的发展，越来越多的人开始在网络上分享自己的知识和经验。博客是一种非常流行的方式，让人们可以轻松地创建和发布自己的文章。Hexo 是一个非常快速、简单且强大的博客框架，可以帮助人们快速创建自己的博客。\n1.2 目的在这篇文章中，我们将介绍如何创建和配置 Hexo 博客，以及如何使用一些常用的插件和主题来提升博客的体验。通过这篇文章，希望能够帮助读者快速上手 Hexo，并开始创建自己的博客。\n1.3 结构本文分为以下几个部分：1.1 Hexo 简介1.2 安装和配置 Hexo1.3 使用插件和主题1.4 总结\n安装和配置 Hexo2.1 安装要在本地安装 Hexo，请遵循以下步骤：\n\n访问 Hexo 官网（https://hexo.io/）下载最新版本的 Hexo。  \n将下载的压缩包解压到一个文件夹中。  \n进入解压后的文件夹，并运行以下命令安装依赖：\n\n2.2 配置安装完成后，需要对 Hexo 进行一些基本配置。打开解压后的文件夹，找到 config/config.yml 文件，并编辑如下内容：\n使用插件和主题3.1 安装插件要安装插件，请进入解压后的文件夹，并运行以下命令：\n3.2 配置插件安装完成后，找到 themes/theme-chalk/config/config.yml 文件，添加以下内容：\n3.3 安装主题要安装主题，请进入解压后的文件夹，并运行以下命令：\n3.4 配置主题安装完成后，找到 themes/theme-chalk/config/config.yml 文件，添加以下内容：\n总结在这篇文章中，我们介绍了如何创建和配置 Hexo 博客，以及如何使用一些常用的插件和主题来提升博客的体验。通过这篇文章，希望能够帮助读者快速上手 Hexo，并开始创建自己的博客。\n感谢您的阅读，希望您喜欢这篇文章！  \n","slug":"hello-world","date":"2023-10-18T14:09:53.145Z","categories_index":"","tags_index":"","author_index":"矽"}]