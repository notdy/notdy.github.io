[{"id":"36d1b930cdc625d54d6b0b031d2beb0a","title":"不同的基类型","content":"错误\tC2371\t“Cheer”: 重定义；不同的基类型\n问题区: \n原因这是因为c语言编译器是从上往下执行的，也就是说你必须要把使用的函数名放在main函数之前，编译器把你写的代码读进去，每看到一个函数，就记下他的名字\n方法一把调用的函数写到main函数前面；如\n方法二我教程上面说可以把函数头写到main函数前面，什么叫做函数头？\n1void Cheer()//这个就是函数头\n若上面的有错误，请各位大佬指出，谢谢\n","slug":"不同的基类型","date":"2024-09-23T14:58:22.000Z","categories_index":"","tags_index":"VS报错","author_index":"Aurora"},{"id":"8984c8b2f51e2d227176a0382d10ae89","title":"判定质数","content":"123456789public static boolean isPrime(int n)&#123;        if(n&lt;2)            return false;        for(int i=2;i&lt;=n/i;i++)&#123;            if(n%i==0)                return false;        &#125;        return true;    &#125;\n细节1 为什么要写成i&lt;&#x3D;n&#x2F;i呢？整除与整除于的区别\n“整除”通常是指一个数a能够被另一个数b整除，即存在一个整数c，使得 a = b × c。a 和 b 是被除数和除数，c 是商。\n“整除于”则是指一个数 a 能够被另一个数 b 整除于，即存在一个整数 c，使得 a = b × c + d。在这里，d 是余数。\n\n数学定理1\n\n\n\n\n\n\n\n\n如果n % d &#x3D;&#x3D; 0，那么(n&#x2F;d) % n &#x3D;&#x3D; 0。由整除性的定义直接推出。\n因为n % d &#x3D;&#x3D; 0，所以存在一个整数k，使得n &#x3D; kd,也就是n &#x2F;d &#x3D; k\n那么n&#x2F;d &#x3D; kd&#x2F;d &#x3D; k，因此(n&#x2F;d) % n &#x3D;&#x3D; 0。\n例如，假设n &#x3D; 15，d &#x3D; 3。\n首先，我们知道15 % 3 &#x3D;&#x3D; 0。\n然后，我们可以计算n&#x2F;d &#x3D; 15 &#x2F; 3 &#x3D; 5。\n最后，我们可以验证5 % 15 &#x3D;&#x3D; 0，即5整除15。\n所以，这个例子证明了如果d整除于n，那么n&#x2F;d必然整除于n。\n数学定理2\n\n\n\n\n\n\n\n\n1~n之间的质数一定都小于等于sqrt(n);质数这里用p来表示p&lt;&#x3D;sqrt(n)因为sqrt(n)是上界,p&#x3D;sqrt(n)p^2^&#x3D;n  &#x3D;&gt; p &#x3D; n&#x2F;p &#x3D; sqrt(n) 所以上界就是n&#x2F;p\n","slug":"判定质数","date":"2024-09-23T14:57:48.000Z","categories_index":"","tags_index":"Algorithm,数论","author_index":"Aurora"},{"id":"9c04d15496da1d73edddda137155e866","title":"快速排序","content":"\n\n\n\n\n\n\n\n\n记录一下过程\n123456789101112131415161718192021222324252627282930313233343536373839404142import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*;public class Main&#123;  public static void main(String[] args) throws IOException&#123;        InputStreamReader in = new InputStreamReader(System.in);        BufferedReader br = new BufferedReader(in);        int num = Integer.parseInt(br.readLine());        int[] arr = new int[num];        String[] res = br.readLine().split(&quot; &quot;);        for (int i = 0; i &lt; num; i++)             arr[i] = Integer.parseInt(res[i]);        quickSort(arr, 0, num - 1);        for (int i = 0; i &lt; num; i++)            System.out.print(arr[i] + &quot; &quot;);        br.close();    &#125;   public static void quickSort(int[] arr,int left,int right)&#123;        //快速排序要写大于等于，可能会没有数        if(left &gt;= right)return;        int i=left-1,j=right+1,value = arr[left+right+1&gt;&gt;1];        while (i&lt;j)&#123;            do i++;while (arr[i]&lt; value);            do j--;while (arr[j]&gt;value);            if(i&lt;j)&#123;                int temp = arr[i];                arr[i]=arr[j];                arr[j]=temp;            &#125;        &#125;        quickSort(arr,left,j);          //这里写j的话，上面的value不能取成right和left+right+1&gt;&gt;1，其他的都可以。下面的left换成j+1        //这里写i的话，上面的value不能取成left和(left+right)/2 其他的都可以，下面的left换成i-1;        // 反例   1,2        quickSort(arr,j+1,right);    &#125;&#125;\n\n\n\n小细节:\n\n指针移动的判断不带等号\n使用do-while在判断前先移动指针\n区间左半边是[l,j]而不是[l,i]\nvalue的位置写法1:123value = arr[left+right&gt;&gt;1]; //只要不写成right或left+right+1&gt;&gt;1都可以quicksort(arr,left,j);quicksort(arr,j+1,r)\n写法2:123value = arr[left+right+1&gt;&gt;1]; //只要不写成right或left+right+1&gt;&gt;1都可以quicksort(arr,left,i); quicksort(arr,i-1,right);\n\n还有一些其他的问题，若搞懂了就回来补上来\n","slug":"快速排序","date":"2024-09-23T14:57:18.000Z","categories_index":"","tags_index":"Algorithm","author_index":"Aurora"},{"id":"d7ab01acb793f490ba4076334688907a","title":"求约数","content":"\n\n\n\n\n\n\n\n\n数论的一些东西\n题目描述:第一行是a，表示接下来a行是输入的数，对于每一个数要从小到大输出他的约数\n记住一个性质，一个数的约数是成对出现的，例如\n\n\n\n\n\n\n\n\n\n24 能被2 整除，那么也必定会被 24&#x2F;2&#x3D;12整除  所以 2和12是一对24 能被3 整除，那么也必定会被 24&#x2F;3&#x3D;8整除   所以 3和8是一对\n12345678910111213141516171819202122232425262728293031323334import java.io.*;import java.util.*;public class Main &#123;    public static void main(String[] args) throws IOException&#123;        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        int i = Integer.parseInt(br.readLine());        while (i--&gt;0)&#123;            int a = Integer.parseInt(br.readLine());            divisor(a).forEach(b-&gt;&#123;                System.out.print(b+&quot; &quot;);            &#125;);            System.out.println();        &#125;        br.close();    &#125;    public static List&lt;Integer&gt; divisor(int n)&#123;        List&lt;Integer&gt; res = new ArrayList&lt;&gt;(10);        for(int i=1;i&lt;=n/i;i++)&#123;            if(n%i==0)&#123;                res.add(i);                //这里用到了一个约数的性质，约数都是成对出现的                // 若 n能被 a 整除，那么a是n的约数，那么n/a 也是n的约束                // 如 24, 24能被1整除，那么24/1=24也是n的约数                // 24能被2整除，俺么24也能被12整除                if(i!=n/i)                    res.add(n/i);            &#125;        &#125;        Collections.sort(res);        return res;    &#125;&#125;\n","slug":"求约数","date":"2024-09-23T14:56:52.000Z","categories_index":"","tags_index":"Algorithm,数论","author_index":"Aurora"},{"id":"8ced7c3b7dad33d06ee59bde7028cd4a","title":"策略模式","content":"\n\n\n\n\n\n\n\n\n是记录看《大话设计模式》这本书的感受\n还是从一个想法开始入手，书中的是让我们写一个商场收银系统，由于我java没有学GUI的那部分，我就直接将效果图贴过来了不难写出下面的伪代码\n1.01234567总计=0;计算总费用()&#123;   单次费用=单价*数量    总计累加单次费用    将此次商品加入显示结果集合中，格式:单价:xxxx 数量: xxxx 合计:xxxx    在界面上显示总计费用&#125;\n1.1 增加打折改,将打折直接加入到下拉列表中，根据当前下拉列表选中的项来计算总费用,伪代码如下\n12345678910页面初始化方法()&#123;    将折扣力度加入到下拉列表中    折扣力度分别是正常收费，7折，6折，索引依次是0,1,2&#125;总计=0;计算总费用()&#123;    单次费用 = 单价*数量    对当前下拉列表中选中的项做判断，根据索引对单次费用进行操作    下面的代码和1.0版本一致&#125;\n但是忽略了一个问题，是在商场使用，而商场的活动有一个特点：持续时间短，改变大。若是以上面的方式实现的话，如果商场搞出了一个满多少返多少或满多少积分减多少的活动呢？商场常见的活动如下:\n\n满xxx返xxx\n打xxx折\n\n这样的话关于打折的只用写一个类即可,初始化时传入打几折即可书中的原文让我茅塞顿开\n\n\n\n\n\n\n\n\n\n面向对象的编程,并不是类越多越好,类的划分是为了封装，但分类的基础是抽象,具有相同属性和功能的对象的抽象集合才是类\n所有的活动抽象成CashSuper,满xx返xx,打xx折全部继承自CashSuper\n融入简单工厂123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384package test;import java.util.Arrays;import java.util.Scanner;public class Write &#123;    public static void main(String[] args) &#123;        Scanner s = new Scanner(System.in);        System.out.print(&quot;请输入总计费用:&quot;);        double fees = s.nextDouble();        System.out.println(&quot;当前活动 0:正常收费 1:7折 2:6折 3:满300减100\\n请输入你选择的活动编号&quot;);        int idx = s.nextInt();        CashSuper cs = CashFactory.createCashSuper(fees,idx);        System.out.print(&quot;总费用是:&quot;);        System.out.println(cs.acceptMoney());    &#125;&#125;class CashFactory&#123;    //idx是选择的活动    //0:正常收费 1:7折 2:6折 3:满300减100    public static CashContext createCashSuper(double money,int idx)&#123;        CashContext cc = null;        switch (idx)&#123;            case 0:                cs = new CashContext(new CashNormal(money));                break;            case 1:            case 2:                //这里最好分开写                cs = new CashContext(new CashDiscount(money,idx==1?0.7:0.6));                break;            case 3:                cs = new CashContext(new CashReturn(money,300,100));                break;        &#125;        return cs;    &#125;&#125;abstract class CashSuper&#123;    protected double money;    public CashSuper(double money)&#123;        this.money = money;    &#125;    public abstract double acceptMoney();&#125;class CashDiscount extends CashSuper&#123;    private double discount;    public CashDiscount(double money,double discount) &#123;        super(money);        this.discount=discount;    &#125;    @Override    public double acceptMoney() &#123;        //不打折discount就是1,把这个不打折的抽象成一个类，让每个类的职责单一化        return money*discount;    &#125;&#125;class CashNormal extends  CashSuper&#123;    public CashNormal(double money) &#123;        super(money);    &#125;    @Override    public double acceptMoney() &#123;        return money;    &#125;&#125;class CashReturn extends CashSuper&#123;    private double condition;//条件    private double returnMoney;//返利    public CashReturn(double money,double condition,double returnMoney)&#123;        super(money);        this.condition = condition;        this.returnMoney = returnMoney;    &#125;    @Override    public double acceptMoney() &#123;        return this.money - Math.floor(this.money/this.condition)*this.returnMoney;    &#125;&#125;\n不足之处:\n\n数据校验没写\n如果要增加打5折和打9折的活动，这里有一个想法，根据字符串判断是那种活动，若是打折活动，将折扣截取出来，这样就不用写重复的代码了\n如果要增加满多少积分换取奖品呢\n如果商场要把满300减100改成满300减50呢？又要改代码，麻烦\n\n接下来上策略模式\n策略模式\n\n\n\n\n\n\n\n\n定义: 策略模式(Strategy),它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户就这个例子而言，算法就是每一种活动的对钱的操作\n整体结构图\n简易策略模式\n123456789101112131415161718192021222324252627class Context&#123;    Strategy s = null;    public Context(Strategy s)&#123;        this.s = s;    &#125;    public void ContextMethod()&#123;        s.AlgorithmMethod();    &#125;&#125;abstract class Strategy&#123;    //抽象算法方法    public abstract void AlgorithmMethod();&#125;class ConcreteA extends Strategy&#123;    @Override    public void AlgorithmMethod() &#123;        System.out.println(&quot;算法A实现&quot;);    &#125;&#125;class ConcreteB extends Strategy&#123;    @Override    public void AlgorithmMethod() &#123;        System.out.println(&quot;算法B实现&quot;);    &#125;&#125;\n基于策略模式对基于简单工厂的进行改造，加一个CashContext类，改写客户端的方法，Strategy对应到这个例子就是基于简单工厂的CashSuper类。CashContext类\n123456789101112131415161718192021class CashContext&#123;    CashSuper cs;    public CashContext(int idx,double money)&#123;       switch (idx)&#123;            case 0:                cs = new CashContext(new CashNormal(money));                break;            case 1:            case 2:                //这里最好分开写                cs = new CashContext(new CashDiscount(money,idx==1?0.7:0.6));                break;            case 3:                cs = new CashContext(new CashReturn(money,300,100));                break;        &#125;    &#125;    public void ContextMethod()&#123;        cs.acceptMoney();    &#125;&#125;\n客户端\n12CashContext cc = new CashContext(idx,fees)System.out.println(cc.acceptMoney());\n搞定\n小结\n策略模式可以以相同的方式调用所有的算法，降低了各种算法类之间的耦合。能理解前面半句话从客户端的cc.acceptMoney()可以看出来，都是调用一个acceptMoney，降低各种算法之间的耦合有点感触，可能是算法之间没有彼此依赖，这样改变一个算法其他的算法不受影响\n策略模式的Strategy类层次为Context定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中的公共功能。就这个例子而言这里的公共功能就是计算钱的功能，如果把属性算上的话，那么抽象类CashSuper的money属性也算一个。\n策略模式简化了单元测试。这个理解不了，单元测试用过，但是没什么感触\n针对于if语句中堆砌了大量的操作的情况，把这些大量的操作封装成一个个Strategy类，这样利用策略模式的特点之一：以相同的方式调用所有的算法，这样可以消除语句\n\n面向对象的理解\n\n\n\n\n\n\n\n\n类的划分是为了封装，但划分的前提是抽象,具有相同属性和功能的对象的抽象集合才是类继承，将共同属性和行为丢到父类中，这样减少代码冗余\n搞定\n","slug":"策略模式","date":"2024-09-23T14:56:19.000Z","categories_index":"","tags_index":"设计模式","author_index":"Aurora"},{"id":"183beebca0c6bcbcb988690a51b52267","title":"筛质数","content":"题目给定一个正整数 n，请你求出 1∼n 中质数的个数。\n输入格式共一行，包含整数 n。\n输出格式共一行，包含一个整数，表示 1∼n 中质数的个数。\n数据范围\n\n\n\n\n\n\n\n\n\n1≤n≤106\n输入样例：\n\n\n\n\n\n\n\n\n\n8\n输出样例：\n\n\n\n\n\n\n\n\n\n4\n埃氏筛\n\n\n\n\n\n\n\n\n思路:\n 开一个标记数组mark，长度是n; 遍历区间[2,sqrt(n)]之间的数字,若mark[i]为false\n计数器加1，把所有i的倍数全部标记为true\n12345678910void printPrime(int n)&#123;    for(int i=2;i&lt;=n/i;i++)&#123;        if(mark[i])            continue;        cnt++;        //这个for循环也可以放到上面的if当中        for(int j=i+i;j&lt;=n;j+=i)            mark[j]=true;    &#125;&#125;\n\n线性筛也叫做欧拉筛,这个算法的速度要比上面的要快，数据规模不大的时候，线性筛和埃氏筛效率差不多\n12345678910111213void primer(int n)&#123;    for(int i=2;i&lt;=n;i++)&#123;        if(mark[i])            continue;        primer[cnt++]=i;        //考虑到，primer[j]*i可能会越界,所以换成 primer[j]&lt;=n/i;            for(int j=0; primer[j]*i&lt;=n;j++)&#123;            mark[primer[j]*i]=true;            if(i % primer[j]==0)// i在素数表里面找到了他的最小质因数，直接跳出循环即可                break;        &#125;    &#125;&#125;\n这个还有优化的空间，待会再学\n","slug":"筛质数","date":"2024-09-23T14:55:48.000Z","categories_index":"","tags_index":"Algorithm,数论","author_index":"Aurora"},{"id":"8ba451d9968003045919daef83bc7892","title":"简单工厂模式","content":"\n\n\n\n\n\n\n\n\n这个系列主要是记录我看大话设计模式这一本书的一些感受，会有部分图片是来自于《大话设计模式》这本书\n设计一个计算器,以java为例\n需求第一个版本不费吹灰之力，轻松拿下\n1234567891011121314151617181920212223242526272829303132333435import java.util.Scanner;class Study&#123;    public static void main(String[] args) &#123;        Scanner s = new Scanner(System.in);        System.out.print(&quot;请输入数字A:&quot;);        double numsA = s.nextDouble();        System.out.print(&quot;请输入运算符号:&quot;);        String operator = s.next().strip();        System.out.print(&quot;请输入数字B:&quot;);        double numsB = s.nextDouble();        System.out.println(calculate(numsA,numsB,operator));        s.close();    &#125;    public static String calculate(double a,double b,String operator)&#123;        StringBuilder sb = new StringBuilder();        switch (operator)&#123;            case &quot;+&quot;:                sb.append(String.format(&quot;%.1f + %.1f = %.1f&quot;,a,b,a+b));                break;            case &quot;-&quot;:                sb.append(String.format(&quot;%.1f - %.1f = %.1f&quot;,a,b,a-b));                break;            case &quot;*&quot;:                sb.append(String.format(&quot;%.1f * %.1f = %.1f&quot;,a,b,a*b));                break;            case &quot;/&quot;:                sb.append(String.format(&quot;%.1f / %.1f = %.11f&quot;,a,b,a/b));                break;            default:                return &quot;运算符不支持或错误&quot;;        &#125;        return sb.toString();    &#125;&#125;\n不足之处\n运算符这一参数特别可能输错,用户怎么知道你支持哪些运算符?\n对于异常没有处理,如除以0的异常没有处理\n\n第二个版本加异常处理\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import java.util.Scanner;class Study&#123;    public static void main(String[] args) &#123;        Scanner s = new Scanner(System.in);        System.out.print(&quot;请输入数字A:&quot;);        double numsA = s.nextDouble();        System.out.print(&quot;请输入运算符号(+ - * /):&quot;); //这里用图形化界面可能更好点        String operator = s.next().strip();        while(isOperator(operator))&#123;            System.out.print(&quot;不正确，重新输入:&quot;)            opertaor = s.next().strip();            &#125;        System.out.print(&quot;请输入数字B:&quot;);        double numsB = s.nextDouble();        System.out.println(calculate(numsA,numsB,operator));        s.close();    &#125;    public static boolean isOperator(String s)&#123;        switch(s)&#123;            case &quot;+&quot;:            case &quot;-&quot;:            case &quot;*&quot;:            case &quot;/&quot;:                return true;        &#125;        return false;    &#125;    public static String calculate(double a,double b,String operator)&#123;        StringBuilder sb = new StringBuilder();        switch (operator)&#123;            case &quot;+&quot;:                sb.append(String.format(&quot;%.1f + %.1f = %.1f&quot;,a,b,a+b));                break;            case &quot;-&quot;:                sb.append(String.format(&quot;%.1f - %.1f = %.1f&quot;,a,b,a-b));                break;            case &quot;*&quot;:                sb.append(String.format(&quot;%.1f * %.1f = %.1f&quot;,a,b,a*b));                break;            case &quot;/&quot;:                if(b==0)                    return &quot;不能除0&quot;;                sb.append(String.format(&quot;%.1f / %.1f = %.11f&quot;,a,b,a/b));                break;            default:                return &quot;运算符不支持或错误&quot;;        &#125;        return sb.toString();    &#125;&#125;\n第三个版本一些感悟以下感受是结合活字印刷的\n\n可维护性:只用改想改的地方，不用改不想改的地方，或者说只用改局部，不用改整体。比如文章局部不好，只需要对局部进行修改，而不用改整体\n可复用性:按功能点划分，形成一个组件，这样可以在以后的业务中能反复使用，公司里好像叫组件库或者构件库。我的理解就是一个字不可能只用一次，常用的字在文章中有大量的使用\n可扩展性: 加功能点很容易。结合活字印刷来说就是添加文字特别简单\n灵活性好:通过简易的操作来实现一些简单的功能。\n\n设计过程:在整个过程中，只有运算的数在改变，运算规则不变，将运算规则抽取出来（作为一个类operator，+-*&#x2F;都继承operator即可），运算的数字作为参数传递过去。\nOperator类\n1234567891011121314151617181920212223242526272829abstract class Operator&#123;    public Double getA() &#123;        return a;    &#125;    public void setA(Double a) &#123;        this.a = a;    &#125;    public Double getB() &#123;        return b;    &#125;    public void setB(Double b) &#123;        this.b = b;    &#125;    private Double a,b;    public Operator(Double a,Double b)&#123;        this.a = a;        this.b = b;    &#125;    public Operator()&#123;    &#125;    public abstract double getResult();&#125;&#125;\n\n加减乘除类\n1234567891011121314151617181920212223242526272829303132class Add extends Operator&#123;    @Override    public double getResult() &#123;        return getA()+getB();    &#125;&#125;class Sub extends Operator&#123;    @Override    public double getResult() &#123;        return getA() - getB();    &#125;&#125;class Mul extends Operator&#123;    @Override    public double getResult() &#123;        return getA()*getB();    &#125;&#125;class Div extends Operator&#123;    @Override    public double getResult()throws ArithmeticException &#123;        double res = 0;        if(getB()==0)            throw new ArithmeticException(&quot;除数为0&quot;);        else res = getA()/getB();        return res;    &#125;&#125;\n工厂类\n1234567891011121314151617181920class OperatorFactory&#123;    public static Operator GenerateOperatorByCharacter(String s)&#123;        Operator res = null;        switch (s)&#123;            case &quot;+&quot;:                res = new Add();                break;            case &quot;-&quot;:                res = new Sub();                break;            case &quot;*&quot;:                res = new Mul();                break;            case &quot;/&quot;:                res = new Div();                break;        &#125;        return res;    &#125;&#125;\n\n主程序\n1234567891011121314public static void main(String[] args) &#123;    Scanner s = new Scanner(System.in);    System.out.print(&quot;请输入数字A:&quot;);    double numsA = s.nextDouble();    System.out.print(&quot;请输入运算符号:&quot;);    String operator = s.next().strip();    System.out.print(&quot;请输入数字B:&quot;);    double numsB = s.nextDouble();    Operator operator1 = OperatorFactory.GenerateOperatorByCharacter(operator);    operator1.setA(numsA);    operator1.setB(numsB);    System.out.println(operator1.getResult());    s.close();&#125;\n这样一来若加入其他运算只用加类，在工厂方法中加入代码即可\nUML类图这个多看看就行，来看一个比较全的图\n在UML中+-#的含义如下\n\n\n\n符号\n表示的修饰符\n\n\n\n+\npublic\n\n\n-\nprivate\n\n\n#\nprotected\n\n\n\n\n\n\n\n\n\n\n\n在UML图中‘+’表示public,’-‘表示private,’#’表示protected\n类的表示从动物这个类开始解析一个矩形框就是一个类，第一层就是类名，如果是抽象类，类名须用斜体，第二层是属性和字段，第三层是方法或行为。\n依赖表示:虚线的实心箭头我的个人理解就是在B中用到了A，那么B就依赖于A，B受制于A。想起了一张图片：燕子，没有你我可怎么活啊\n接口的表示和类表示的不同之处主要在于其顶端有《interface》，第一行是接口名称；第二行是接口方法；还有一种方式来表示接口,以下面的图为例，应该是唐老鸭实现了讲人话的接口\n继承类和实现接口的表示实现接口是用空心三角形+虚线来表示.例如:继承使用空心三角形+实线来表示\n关联的表示表示：用实现箭头来表示此书中表示：当一个类“知道”另一个类时，可以用关联。但是让我不理解的是什么叫做知道？\n聚合的表示用空心的菱形+实现箭头来表示表示一种弱的‘拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分。\n\n\n\n\n\n\n\n\n\n弱的体现个体离开了群体还能存活\n组合的表示用实心的菱形+实现箭头来表示其表示一种强的拥有关系，说人话就是群体离开了个体，这个群体就废了.以图片为例，鸟没了翅膀不就废了吗图片上的1和2是表示基数2：表示1只鸟有两个翅膀1：表示两个翅膀对应一只鸟\n总结篇这里只总结容易混的东西\n\n\n\n关系\n表示\n技巧\n指向\n\n\n\n继承\n实线空心三角形\n继承的都是具体的东西，用实线\n从子类指向父类\n\n\n实现接口\n虚线空心三角形\n实现的是相较于比较虚的，用虚线\n从类指向接口\n\n\n组合\n实心菱形+实线箭头\n，由于比较强（内心丰盈）所以是实心\n部分指向整体\n\n\n聚合\n空心的菱形+实线箭头\n约束性不强，空心\n部分指向整体\n\n\n","slug":"简单工厂模式","date":"2024-09-23T14:54:54.000Z","categories_index":"","tags_index":"设计模式","author_index":"Aurora"},{"id":"3e7eb9f9b585e5605ca004891ab1c7ad","title":"递归实现指数型枚举","content":"题目描述递归实现指数型枚举\n思路每个数有两个状态，分别是选和不选\n将这两个状态分别用1和2来代替，1-&gt;选,2-&gt;不选\n就是枚举1~n的每个数字的状态，递归树如下\n12345678910111213141516171819202122232425262728293031import java.io.*;class Main&#123;    static int n;    static int[] data;    public static void dfs(int u)&#123;        if(u&gt;n)&#123;            for(int i=1;i&lt;=n;i++)&#123;                if(data[i]==1)                    System.out.print(i+&quot; &quot;);            &#125;            System.out.println();            return;        &#125;        data[u]=2;//不选        dfs(u+1);        data[u] = 0;//恢复现场                        data[u]=1;//选择        dfs(u+1);        data[u] =0;            &#125;    public static void main(String[] args) throws IOException &#123;        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        n = Integer.parseInt(br.readLine());        data = new int[n+10];        dfs(1);        br.close();    &#125;&#125;\n\n\n完成\n","slug":"递归实现指数型枚举","date":"2024-09-23T14:53:32.000Z","categories_index":"","tags_index":"Algorithm","author_index":"Aurora"},{"id":"6f79746afc3c4630b370e421378a0b17","title":"约数个数","content":"这个是纯粹的欧拉函数转换，原理暂时不太清楚，这周末开始补\n1234567891011121314151617181920212223242526import java.io.*;import java.util.*;public class Main &#123;    public static void main(String[] args) throws IOException&#123;        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        int cnt = Integer.parseInt(br.readLine());        while(cnt--&gt;0)&#123;            int n = Integer.parseInt(br.readLine());            long res = n;            for(int i=2;i&lt;=n/i;i++)&#123;                if(n%i==0)&#123;                    res = res/i *(i-1);                    while (n%i==0)                        n/=i;                &#125;            &#125;            //一个数最多只有一个大于其平方根的因子，能进到这里来表明就是那个因子            if(n&gt;1)                res = res / n *(n-1);            System.out.println(res);        &#125;        br.close();    &#125;&#125;\n\n","slug":"约数个数","date":"2024-09-23T14:46:30.000Z","categories_index":"","tags_index":"Algorithm,数论","author_index":"Aurora"},{"id":"f9c782ac3730228558768bfbe2f35bca","title":"Acwing-877 扩展欧几里得算法","content":"给定 n 对正整数 ai,bi，对于每对数，求出一组 xi,yi，使其满足 ai×xi+bi×yi=gcd(ai,bi)\n输入格式第一行包含整数 n\n接下来 n 行，每行包含两个整数 ai,bi\n输出格式输出共 n 行，对于每组 ai,bi，求出一组满足条件的 xi,yi，每组结果占一行。\n本题答案不唯一，输出任意满足条件的 xi,yi 均可。\n数据范围1≤n≤105\n1≤ai,bi≤2×109\n输入样例：\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n4 68 18\n\n\n\n\n\n\n\n\n\n输出样例：\n\n\n\n\n\n\n\n\n\n-1 1\n\n\n\n\n\n\n\n\n\n-2 1\n数学前置知识a % b &#x3D; a- a&#x2F;b * b 注意 a&#x2F;b是向下取整$ax+by&#x3D;gcd(a,b)$\n$gcd(a,b)&#x3D;gcd(b,a%b)$\n将a&#x3D;b，b&#x3D;a%b带入ax+by得\n$bx_1 + (a%b)y_1 &#x3D; bx_1 +(a-a&#x2F;b *b)y_1&#x3D;bx_1+ay_1-(a&#x2F;b)by_1&#x3D;ay_1+b(x_1-a&#x2F;by_1)$\n那么x&#x3D;y1, y&#x3D;x1-a&#x2F;b*y1\n板子1123456789101112131415161718static int[] x = new int[1];static int[] y = new int[1];public static int exgcd(int a,int b,int[] x,int[] y)&#123;    if(b==0)&#123;        //gcd(a,0) = a         // ax+by = a        // x = 1, y =0        x[0]=1;        y[0]=0;        return a;    &#125;    int d = exgcd(b,a%b,x,y);    int temp = x[0];//更新y[0]时需要用到x[0]    x[0] = y[0];    y[0] = temp - a/b * y[0];    return d;&#125;\n\n板子2推导$ax+by&#x3D;gcd(a,b)$\n$gcd(a,b)&#x3D;gcd(b,a%b)$把b带入ax+by中得b中，把a%b代入ax+by得a中可得\n$(a%b)x_1 + by_1 &#x3D; (a-a&#x2F;b b)x_1+by_1 &#x3D;ax_1-a&#x2F;bbx_1+by_1&#x3D;ax_1+b(y_1-a&#x2F;b*x_1$)\n这里得$x_1$就是x，所以x不用边，只需要改变y就好\n12345678910111213public static int exgcd(int a,int b,int[] x,int[] y)&#123;    if(b==0)&#123;        //gcd(a,0) = a         // ax+by = a        // x = 1, y =0        x[0]=1;        y[0]=0;        return a;    &#125;    int d = exgcd(b,a%b,y,x);    y[0] -= a/b * x[0];    return d;&#125;\n","slug":"Acwing-877-扩展欧几里得算法","date":"2023-12-19T13:31:45.000Z","categories_index":"","tags_index":"Algorithm","author_index":"Aurora"},{"id":"0ed6b4d593b19a6383f83c1ccac6d61f","title":"Acwing 867 线性同余方程","content":"题目描述\n\n\n\n\n\n\n\n\n给定 n 组数据 ai,bi,mi，对于每组数求出一个 xi，使其满足 ai×xi≡bi(modmi)，如果无解则输出 impossible。\n\n\n\n\n\n\n\n\n\n输入格式第一行包含整数 n\n接下来 n 行，每行包含一组数据 ai,bi,mi\n\n\n\n\n\n\n\n\n\n输出格式输出共 n 行，每组数据输出一个整数表示一个满足条件的 xi，如果无解则输出 impossible。\n\n\n\n\n\n\n\n\n\n每组数据结果占一行，结果可能不唯一，输出任意一个满足条件的结果均可。\n\n\n\n\n\n\n\n\n\n输出答案必须在 int 范围之内。\n\n\n\n\n\n\n\n\n\n数据范围1≤n≤105,1≤ai,bi,mi≤2×109输入样例：22 3 64 3 5输出样例：impossible-3\n前置知识需要用到扩展欧几里得定理\n代码如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import java.io.*;class Main&#123;    static int[] x = new int[1];    static int[] y = new int[1];    public static int exgcd(int a,int b,int x[],int y[])&#123;        if(b==0)&#123;            x[0]=1;            y[0]=0;            return a;        &#125;                    int d = exgcd(b,a%b,y,x);            y[0] = y[0]- a/b * x[0];            return d;    &#125;    public static void main(String[] args) throws IOException&#123;        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        int cnt = Integer.parseInt(br.readLine());        while(cnt--&gt;0)&#123;            int a,b,m;            String[] content = br.readLine().split(&quot; &quot;);            a = Integer.parseInt(content[0]);            b = Integer.parseInt(content[1]);            m = Integer.parseInt(content[2]);            int d = exgcd(a,m,x,y);            if(b % d!=0)                System.out.println(&quot;impossible&quot;);            else                             System.out.printf(&quot;%d\\n&quot;,(long)(b/d)*x[0] % m);                /* 上一行的解释                    我们需要找到 ax =b (mod m)                    ax = b                       = my + b                    ax-my = b                    ax+my = b，将y放大-1倍                    由欧几里得定理可得，ax+my = gcd(a,m) 当前仅当 gcd(a,m)|m ,也就是m是gcd(a,m)的倍数，m%gcd(a,m)==0                    令gcd(a,m)=d                    那么 ax+my = d;①                         ax+my = b;②                         ①-&gt;②，要将①扩大b/d倍所以                         (b/d)(ax+my)=d*(b/d)                         (b/d)ax + (b/d)my = b                         a(b/d)x + (b/d)my = b                         ax                = b                         x=(b/d)x，所以只需要将x放大b/d倍即可，两数相乘可能会爆int，所以转换成long类型                                         */        &#125;        br.close();        return;    &#125;&#125;\n\n","slug":"Acwing-867-线性同余方程","date":"2023-12-19T08:23:54.000Z","categories_index":"","tags_index":"Algorithm","author_index":"Aurora"},{"id":"beb0574b5617d16378226a82c445c69b","title":"SpringWeb踩坑记录","content":"解决Maven依赖下载奇慢的问题,服务器在国外，很慢的在IDEA中按两次shift键，输入settings.xml,选择Create粘贴以下内容到文件中\n1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0                          https://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;     &lt;mirrors&gt;            &lt;mirror&gt;            &lt;id&gt;alimaven&lt;/id&gt;            &lt;name&gt;aliyun maven&lt;/name&gt;            &lt;!-- https://maven.aliyun.com/repository/public/ --&gt;            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        &lt;/mirror&gt;    &lt;/mirrors&gt;&lt;/settings&gt;\n重启IDEA，或者再次创建一个项目，下载速度很快。\njava:无效的目标发行版原因都知道哈，版本不对IDEA-&gt;Settings-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Java Compiler还有两个地方File-&gt;Project Structure-&gt;ProjectFile-&gt;Project Structure-&gt;Modules如果还不行，将pom.xml的的java.version改成你上述图片中选择的版本即可\n123&lt;properties&gt;\t&lt;java.version&gt;19&lt;/java.version&gt;&lt;/properties&gt;\n\nList转换成Page时抛出ClassCastException报错信息:\n1class java.util.ArrayList cannot be cast to class com.github.pagehelper.Page (java.util.ArrayList is in module java.base of loader &#x27;bootstrap&#x27;; com.github.pagehelper.Page is in unnamed module of loader &#x27;app&#x27;)\n原先代码\n12345PageHelper.startPage(page,pageSize);List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);Page&lt;Emp&gt; emp = (Page&lt;Emp&gt;)empList;//这里出现了异常PageBean pageBean = new PageBean(emp.getTotal(), emp.getResult());\n解决办法，将代码修改成下面的，原因不知道\n12345Page&lt;Emp&gt; emp = PageHelper.startPage(page,pageSize);List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);emp.addAll(empList);PageBean pageBean = new PageBean(emp.getTotal(), emp.getResult());\n还有一个解决办法，把PageHelper的版本换成最新版，在pom.xml文件中改\n将静态页面加入到static文件夹从浏览器访问不到静态html加入到static文件夹后，从localhost:8080:&#x2F;content.html访问不到，解决办法:重新编译staic模块\nThe field image exceeds its maximum permitted size of 1048576 bytes.原因:上传的文件太大了解决办法:调整最大限制在application.property中输入下面的,即可\n12345# 上传的最大文件大小必须小于100MBspring.servlet.multipart.max-file-size=100MB# 上传多个文件的时候，单个文件大小不得超过20MBspring.servlet.multipart.max-request-size=20MB\n\nio.jsonwebtoken.UnsupportedJwtException: Signed Claims JWSs are not supported.将Jwts.parser().parseClaimsJwt(str)改成Jwts.parser().parseClaimsJws(str)即可\n12345Claims free = Jwts.parser().        setSigningKey(&quot;free&quot;).//设置密钥        parseClaimsJws(str).        getBody();System.out.println(free);\n\njava.time.format.DateTimeParseException: Text ‘2023-5-11 11:12:13’ could not be parsed at index 5@DateTimeFormat(pattern&#x3D;”@DateTimeFormat(pattern &#x3D;”yyyy-MM-dd HH:mm:ss””)中的MM是两个但是字符串中的月份是一位，解决办法把2023-5-11改成2023-05-11即可，这个纯属是粗心大意了\nIDEA创建Maven项目后没有src目录IDEA版本号:2022.2.5解决办法:File-&gt;Settings,搜索Runner这个选项,在VM Options中加入-Darchetype&#x3D;Internal，apply-&gt;OK,出现原因暂时不知道\nUnknown database xxx排错思路:\n\n数据库是否建好了?\n数据库名称是否写对了\n配置文件中账户与密码驱动是否写对了\nmysql服务是否开启了\n端口号是否被占用了对应的措施是否有数据库和数据库名称这个可以自己检查出来，这里主要是记录后面几种的做法若是yml格式的，你的password可能需要加个引号驱动的话将版本改为最新版本试试\n\n12345&lt;dependency&gt;  &lt;groupId&gt;mysql&lt;/groupId&gt;  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;  &lt;version&gt;8.0.33&lt;/version&gt;&lt;/dependency&gt;\n查看mysql服务是否开启以管理员的身份运行cmd输入 net start mysql,输入后是这个样子最后检查端口号是否被占用，还是在cmd中输入netstart -ano找你在配置文件中设置的端口号，如何查看?windows下默认是在C:&#x2F;ProgramData&#x2F;MySQL&#x2F;MySQL Server X.X&#x2F;my.ini或C:&#x2F;Program Files (x86)&#x2F;MySQL&#x2F;MySQL Server X.X&#x2F;my.ini。其中X.X代表MySQL版本号。在Linux系统下，MySQL配置文件通常位于&#x2F;etc&#x2F;my.cnf或&#x2F;etc&#x2F;mysql&#x2F;my.cnf找到占用的程序，在任务管理器中结束掉，win+R输入services.msc找到mysql服务，重启试试。这是我能想到的所有解决办法\nSpringBoot测试失败并报错: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration一般是测试类所在的包名和启动类的包名不一致造成的\n","slug":"SpringWeb踩坑记录","date":"2023-11-10T12:38:27.000Z","categories_index":"","tags_index":"Java,Spring","author_index":"Aurora"},{"id":"af286b6aa711a74975488d92e69b597a","title":"Ubuntu22.04搭建mysql主从复制","content":"\n\n\n\n\n\n\n\n\n记录哈，这个需要两台服务器，每台服务器上面都要安装mysql，若是没有安装，请分别在两台服务器上面运行下面的命令sudo apt install mysql-server\n引用Ubuntu下的mysql8.0忘记密码怎么办?\n环境\nUbuntu 22.04\n主机:192.168.164.134\n从机:192.168.164.136\n两台服务器的mysql配置文件路径:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf\n\n\n\n\n\n\n\n\n若是不知道在哪里运行下面的命令find &#x2F; -name mysqld.cnf\n\n\n主机的配置vim &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf修改成下面的样子,注意server-id不一定要等于1，只要服务器之间的server-id是不一样的就好若是远程连接不上mysql服务器可以把&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf文件中的bind-address&#x3D;127.0.0.1mysqlx-bind-address&#x3D;127.0.0.1，这两行注释掉完成后执行在终端中执行命令systemctl restart mysql重启mysql服务\n输入mysql -uroot进入到mysql中，注意我的没有设置密码，若你有密码需要加上-p后面写的你密码\n输入下面的命令\n123CREATE USER &#x27;remote&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;remote&#x27;;     GRANT REPLICATION SLAVE ON *.* TO &#x27;remote&#x27;@&#x27;%&#x27;;     FLUSH PRIVILEGES;\n在mysql中输入下面命令show master status;之后不要动主机\n从机的配置vim &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf增加或注释一句server-id &#x3D;2,保存退出重启mysql服务 systemctl restart mysql输入mysql -uroot  -p你的密码进入到mysql当中输入下面命令\n1234stop slave;change master to master_host=&#x27;192.168.164.134&#x27;,master_user=&#x27;remote&#x27;,master_password=&#x27;remote&#x27;,master_log_file=&#x27;mysql-bin.000013&#x27;,master_log_pos=157,get_master_public_key=1;start slave;show slave status\\G\n若show slave status\\G的结果是如图片所示即可验证:主机用root身份登录从机用root身份登录在主机中新建一个数据库，看看从机中是否存在相同的，若有则配置成功，若没有找原因，原因及其解决办法我去翻翻历史记录，看看能不能找到\n","slug":"Ubuntu22-04搭建mysql主从复制","date":"2023-11-02T01:22:53.000Z","categories_index":"","tags_index":"Ubuntu,Mysql","author_index":"Aurora"},{"id":"b395fca2233b13450c189f3b1de80e06","title":"springboot访问请求404的原因","content":"\n\n\n\n\n\n\n\n\n是记录，可能出现错误\n可能出现的原因1.你请求的URL路径不对,比如说你请求的路径是&#x2F;usr&#x2F;list,GET方法,但是你UserController上面的RequestMapping是这个样子:@RequestMapping(“user”)，有可能哈2.前端的请求时GET方法，后端对应的处理函数的方法是非GET方法3.Controller和RestController注解混用了，两个中删除一个试试4.访问的是静态资源，那么查看是否配置好了静态资源，就是把静态资源放到Resources下面的static文件夹中，也可以通过配置类来自定义存放路径下面是通过配置类的方式，来配置静态资源存放的路径我的静态资源是直接放在Resources下面的，新建一个类，类名随意\n\n\n\n\n\n\n\n\n\n继承WebMvcConfigurationSupport重写addResourceHandlers方法在类上面加上@Configuration注解\n12345678910111213141516171819@Configuration@Slf4jpublic class WebMvcConfig extends WebMvcConfigurationSupport &#123;    /**     * 配置静态资源映射     *     * @param registry     **/    @Override    protected void addResourceHandlers(ResourceHandlerRegistry registry) &#123;        log.info(&quot;开始进行静态资源映射&quot;);        //将路径中包含backend的请求映射到backend文件夹下//这句话的意思是，只要请求的是/backend下面的文件都映射到Resources下面的backend文件夹下面,classpath:        registry.addResourceHandler(&quot;/backend/**&quot;).addResourceLocations(&quot;classpath:/backend/&quot;);//上同                registry.addResourceHandler(&quot;/front/**&quot;).addResourceLocations(&quot;classpath:/front/&quot;);    &#125;    &#125;\n\n\n5.你的Controller类没有被扫描到，这种情况一般是启动类在一个包里面解决办法:\n\n把你的启动类从包里面拿出来，放到外面，如图所示\n用和MapperScan和scanBasePackages来指明需要扫描的包 如图所示 \n项目中有多个SpringBootServletInitializer子类此类问题表现是，项目按模块划分，多个模块内包含Controller。在开发调试阶段正常，单独运行每个模块也正常；使用tomcat部署后，总会随机出现一些模块的Controller访问不了的情况。这种情况，多是因为每个模块都创建了SpringBootServletInitailizer子类。解决办法就是只保留入口模块的SpringBootServletInitialzer子类即可补充:若是线上部署阶段排错思路1.确定资源确实是存在的2.随机测试几个接口，看看是否都是404。\n\n\n如果都是404，很可能是nginx配置错误\n如果部分404，且是按模块404，查看项目中是否有多个SpringBootServletInitializer子类\n\n","slug":"springboot访问请求404的原因","date":"2023-11-02T01:08:02.000Z","categories_index":"","tags_index":"Java,SpringBoot","author_index":"Aurora"},{"id":"39b466b7b3169c1cbcc3565a0dd5f50c","title":"Windows远程连接Redis(Ubuntu)","content":"环境\nWindows版本:Win11 家庭版\nLinux版本:Ubuntu22.04\nRedis版本:Redis - 6.0.16\nIDE: IDEA 2022.2.3\nRedis:单机部署\n\n配置redis.conf修改redis.conf配置文件 ,不知道在哪里在终端输入下面的命令\n1find / -name &#x27;redis.conf&#x27;\n注释掉 bind 127.0.0.1这一行设置客户端连接的密码 requirepass关闭保护模式 protected-mode no\n启动Redis开启redis服务指定redis.conf的文件位置\n1redis-server ./redis.conf\n启动客户端在cmd中输入redis-cli -h address -a password –raw–raw是防止中文乱码\n","slug":"Windows远程连接Redis-Ubuntu","date":"2023-11-02T00:59:19.000Z","categories_index":"","tags_index":"Linux,Redis","author_index":"Aurora"},{"id":"79f2de507f0a4c5fea23763f0aa4db2a","title":"java环境搭建 Ubuntu Linux","content":"jdk的安装和配置环境变量\nUbuntu 22.04 LTS\n\n使用apt这个最简单\n1sudo apt install default-jdk\n若是安装成功了在终端输入java -version来查看是否安装成功\n使用官网下载的jdk包(离线安装)直接在百度上搜索jdk，选择图片这个网址:jdk下载网址在linux中使用uname -m查看若上面的命令结果是arm就选择带有arm的，反之选择x64的切换到包所在的目录，打开终端，输入tar -zxf 包名切换到解压后的目录当中，复制该路径，我这里是&#x2F;usr&#x2F;java&#x2F;jdk打开终端输入vim &#x2F;etc&#x2F;profile,输入i进入插入模式在尾部追加export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdkexport CLASSPATH&#x3D;$:CLASSPATH:$JAVA_HOME&#x2F;lib&#x2F;export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin\n按ESC键，输入:wq按下回车在终端输入source &#x2F;etc&#x2F;profile在终端输入java -version,看看版本，若有反应则安装成功\n","slug":"java环境搭建-Ubuntu-Linux","date":"2023-11-02T00:54:37.000Z","categories_index":"","tags_index":"Java,Linux","author_index":"Aurora"},{"id":"e5ea9e5518c3019751fc0029e1e75066","title":"SearchSkills","content":"\n\n\n技巧\n说明\n例子\n常用\n\n\n\n“content”\n内容中必须完整的包含content\n“IT行业报告”\n\n\n\nintitle:Exception\n要求标题中必须包含Exception\nintitle:犹太人\n\n\n\nallintitle:标题1 标题2\n要求标题中必须包含标题1和标题2\nallintitle:王柠 天职师大\n\n\n\nintext:content\n限定内容关键词\nintext:”沈峰” “浙江大学”\n\n\n\ninurl:url\n限定网址关键词\ninurl:cctv\n\n\n\nsite:url\n限定网址来源\n“Sql Exception”site:stackoverflow.com\n\n\n\nimagesize:widthxheight\n限定图片尺寸\nimagesize:100x200\n\n\n\nfiletype:文件类型名\n限定文件格式\n“IT行业报告” filetype:pdf\n快速了解行业的情况用这个\n\n\n快速找到免费报告的网站filetype:pdf\n\n用inurl:baogao 搜出一堆的网站\n再用Similar Sites把上面的网址丢进去，找到类似的网站xx行业&#x2F;岗位必逛的网站websites programmer should visit\n\n找论文的Google学术搜索sci-hub\n电子书中文的 鸠摩搜书英文的 直接Google，网站:zlibrary,manybooks,www.pdfbooksworld.com,谷歌图书Kindle\n在线视频Google搜索best online learning websites\n百度网盘搜索引擎学搜搜 盘搜搜 云盘狗，或者直接Google一下百度网盘搜索引擎\n高清视频素材网站wwww.pexels.comwwww.pixabay.comwwww.videvo.netwwww.mixkit.co或直接Google搜索best sites for free stock videos\nyoutube上下载视频,在www.后面输入9x,下载4K的网站 save.tube199it.com  专业研究报告的国产普通化妆品备案信息2023年为基准15年前百度知道百度贴吧10年前知乎微信公众号(搜狗搜索或直接在微信公众号里面搜)5年前小红书，抖音，B站，快手，视频号，得到\n","slug":"SearchSkills","date":"2023-10-29T14:45:05.000Z","categories_index":"","tags_index":"particle skills,Search skill","author_index":"Aurora"},{"id":"e2ec0c5341a24647bd926cc2d6bdc6d8","title":"VS2019中出现【Windows SDK】找不到 Windows SDK 版本10.0.18362.0的解决办法","content":"VS2019中出现【Windows SDK】找不到 Windows SDK 版本10.0.18362.0的解决办法方法一：在项目上右击选择重定目标解决方案，将windosSdk的版本号选择10.0.18362.0如果这个不能解决问题请看这里在Visual Studio Installer中勾选Windows 10 SDK(10.0.17764.0)点击修改即可完成\n是在不行，自己到微软官网上下载一个，请点击这里\n","slug":"VS2019中出现【Windows-SDK】找不到-Windows-SDK-版本10-0-18362-0的解决办法","date":"2023-10-27T03:26:37.000Z","categories_index":"","tags_index":"VS报错","author_index":"Aurora"},{"id":"6b7ecf7eef1b5950a2257e592952f69a","title":"BombLab","content":"说明6关卡，每个关卡需要输入相应的内容，通过逆向工程来获取对应关卡的通过条件\n准备工作环境需要用到gdb调试器\n1apt-get install gdb\n系统: Ubuntu 22.04\n本实验会用到的gdb调试器的指令如下\n\n\n\n\n\n\n\n\n\nr或者 run或者run filename \t\t运行程序,run filename就是用filename中的内容作为输入b *address\t\t\t在某个地址设置断点d或delete\t\t\t\t删除所有断点d 断点号\t\t\t\t删除指定断点info b\t\t\t\t\t查看所有断点信息x&#x2F;参数 地址\t\t\t查看指针解引用后的值，参数可以是s(字符串),d(十进制),x(十六进制),地址若是寄存器需要加上$info register 或info r\t查看所有寄存器的值disas functionName\t生成functionName的汇编代码stepi 执行一个汇编指令layout asm 窗口分为两部分，上面是将要执行的汇编代码，下面输入gdb调试命令\n前置知识寄存器的东西这里面有一些寄存器的知识，了解即可%rsp (register stack pointer) 栈指针%esi:通用寄存器，长应用于指针或索引%rax:存储函数的返回值,存储临时数据,系统调用号%r12,%rbx:通用寄存器,参数传递的%rbp(register base pointer):通常是当作基址指针来用\n指令相关test destination,sourcedestination和source可以是寄存器,内存地址,立即数.对两个操作数进行按位逻辑与操作,会更新下面寄存器的状态\n\nZero flag(ZF):若结果为0，则设置为1,反之为0，这个若为1表明两个操作数相等或者某个操作数等于0\nSign flag (SF):若结果最高位为1,则为1,反之为0\nOverflow flag(OF):有符号数溢出则为1,反之为0\nCarry flag(CF):无符号数溢出则为1,反之为0\nParity flag(PF):结果的低8位包含奇数个1则为1，反之为0\n\nje destination若ZF为1则跳转到destination处\n开干Phase 1 字符串比较终端输入gdb bomb在输入disas phase_1,结果如下\n123456780x0000000000400ee0 &lt;+0&gt;:\tsub    $0x8,%rsp // 把栈指针减少8，给局部变量提供空间0x0000000000400ee4 &lt;+4&gt;:\tmov    $0x402400,%esi // 将0x402400存储到%esi中，这个有可能是存放我们输入的值或者存放内置字符串的0x0000000000400ee9 &lt;+9&gt;:\tcall   0x401338 &lt;strings_not_equal&gt;//调用了函数strings_not_equal,估计是判断输入的字符串和内置字符串是否相同，相同返回00x0000000000400eee &lt;+14&gt;:\ttest   %eax,%eax  //判断%eax(函数strings_not_equal的返回值)是否为0，若为0则ZF=10x0000000000400ef0 &lt;+16&gt;:\tje     0x400ef7 &lt;phase_1+23&gt; // ZF为1就跳转，反之顺序执行0x0000000000400ef2 &lt;+18&gt;:\tcall   0x40143a &lt;explode_bomb&gt;//拆弹失败，炸弹爆炸0x0000000000400ef7 &lt;+23&gt;:\tadd    $0x8,%rsp //回收栈指针0x0000000000400efb &lt;+27&gt;:\tret    \n把断点打到0x0000000000400ee9的位置,开始run,随便输点东西\n123b *0x400ee9runx/s 0x402400\t\n结果发现0x402400就是我们想要的东西:Border relations with Canada have never been better.那么我们输入的东西到哪里去了?断点打到strings_not_equal里面,查看strings_not_equal汇编代码（在gdb中输入disas strings_not_equal）\n123456789101112131415161718192021222324Dump of assembler code for function strings_not_equal:   0x0000000000401338 &lt;+0&gt;:\tpush   %r12   0x000000000040133a &lt;+2&gt;:\tpush   %rbp    0x000000000040133b &lt;+3&gt;:\tpush   %rbx   0x000000000040133c &lt;+4&gt;:\tmov    %rdi,%rbx   0x000000000040133f &lt;+7&gt;:\tmov    %rsi,%rbp   0x0000000000401342 &lt;+10&gt;:\tcall   0x40131b &lt;string_length&gt;   0x0000000000401347 &lt;+15&gt;:\tmov    %eax,%r12d   0x000000000040134a &lt;+18&gt;:\tmov    %rbp,%rdi   0x000000000040134d &lt;+21&gt;:\tcall   0x40131b &lt;string_length&gt;   0x0000000000401352 &lt;+26&gt;:\tmov    $0x1,%edx   0x0000000000401357 &lt;+31&gt;:\tcmp    %eax,%r12d   0x000000000040135a &lt;+34&gt;:\tjne    0x40139b &lt;strings_not_equal+99&gt;   0x000000000040135c &lt;+36&gt;:\tmovzbl (%rbx),%eax   0x000000000040135f &lt;+39&gt;:\ttest   %al,%al   0x0000000000401361 &lt;+41&gt;:\tje     0x401388 &lt;strings_not_equal+80&gt;   0x0000000000401363 &lt;+43&gt;:\tcmp    0x0(%rbp),%al   0x0000000000401366 &lt;+46&gt;:\tje     0x401372 &lt;strings_not_equal+58&gt;   0x0000000000401368 &lt;+48&gt;:\tjmp    0x40138f &lt;strings_not_equal+87&gt;   0x000000000040136a &lt;+50&gt;:\tcmp    0x0(%rbp),%al   0x000000000040136d &lt;+53&gt;:\tnopl   (%rax)   0x0000000000401370 &lt;+56&gt;:\tjne    0x401396 &lt;strings_not_equal+94&gt;   0x0000000000401372 &lt;+58&gt;:\tadd    $0x1,%rbx\n断点打到0x401338的位置，运行程序不停的stepi，知道运行到了第一次调用string_length函数,字符串一般来说是需要一个基址的,所以找能充当基指指针的寄存器,下面是试探过程\n12x/s $rbp //这个是内置字符串x/s $rbx //这个是我们输入的字符串\n答案\n\n\n\n\n\n\n\n\nBorder relations with Canada have never been better.\n进入strings_not_equal函数才能看到我们输入的字符串是保存在%rbx这个寄存器当中的\nphase_2 循环disas phase_2得到如下代码(我分成了两部分,这个是前面一部分)\n123450x0000000000400efc &lt;+0&gt;:\tpush   %rbp  0x0000000000400efd &lt;+1&gt;:\tpush   %rbx 0x0000000000400efe &lt;+2&gt;:\tsub    $0x28,%rsp0x0000000000400f02 &lt;+6&gt;:\tmov    %rsp,%rsi0x0000000000400f05 &lt;+9&gt;:\tcall   0x40145c &lt;read_six_numbers&gt; //这里从名字可以知道要输入6个数字，那么是整形还是浮点数呢?这里先输入6个整形试试\n输入stepi进入到read_six_numbers函数中，disas read_six_numbers得到下面的代码\n123456789101112131415161718Dump of assembler code for function read_six_numbers:   0x000000000040145c &lt;+0&gt;:\tsub    $0x18,%rsp  // 这个不用管   0x0000000000401460 &lt;+4&gt;:\tmov    %rsi,%rdx   0x0000000000401463 &lt;+7&gt;:\tlea    0x4(%rsi),%rcx   0x0000000000401467 &lt;+11&gt;:\tlea    0x14(%rsi),%rax   0x000000000040146b &lt;+15&gt;:\tmov    %rax,0x8(%rsp)   0x0000000000401470 &lt;+20&gt;:\tlea    0x10(%rsi),%rax   0x0000000000401474 &lt;+24&gt;:\tmov    %rax,(%rsp)   0x0000000000401478 &lt;+28&gt;:\tlea    0xc(%rsi),%r9   0x000000000040147c &lt;+32&gt;:\tlea    0x8(%rsi),%r8   0x0000000000401480 &lt;+36&gt;:\tmov    $0x4025c3,%esi   //看看%esi寄存器的内容   0x0000000000401485 &lt;+41&gt;:\tmov    $0x0,%eax   0x000000000040148a &lt;+46&gt;:\tcall   0x400bf0 &lt;__isoc99_sscanf@plt&gt;   0x000000000040148f &lt;+51&gt;:\tcmp    $0x5,%eax   0x0000000000401492 &lt;+54&gt;:\tjg     0x401499 &lt;read_six_numbers+61&gt;   0x0000000000401494 &lt;+56&gt;:\tcall   0x40143a &lt;explode_bomb&gt;   0x0000000000401499 &lt;+61&gt;:\tadd    $0x18,%rsp   0x000000000040149d &lt;+65&gt;:\tret    \n注意这一行mov    $0x4025c3,%esi,因为字符串是不可变的，地址固定死了，所以找立即数esi寄存器的内容为六个整形数据猜测是对的，我们输入1 2 3 4 5 6试试继续阅读phase_2后部分的代码\n1234567891011121314151617180x0000000000400f05 &lt;+9&gt;:\tcall   0x40145c &lt;read_six_numbers&gt;   0x0000000000400f0a &lt;+14&gt;:\tcmpl   $0x1,(%rsp) // (%rsp)=*rsp 就是我们输入的第一个数字1   0x0000000000400f0e &lt;+18&gt;:\tje     0x400f30 &lt;phase_2+52&gt; // 判断是否相等，相等就跳转   0x0000000000400f10 &lt;+20&gt;:\tcall   0x40143a &lt;explode_bomb&gt; //否则就炸了   0x0000000000400f15 &lt;+25&gt;:\tjmp    0x400f30 &lt;phase_2+52&gt;   0x0000000000400f17 &lt;+27&gt;:\tmov    -0x4(%rbx),%eax // eax保存的是我们输入的第一个数，把rbx存放的值减4   0x0000000000400f1a &lt;+30&gt;:\tadd    %eax,%eax  // eax*=2   0x0000000000400f1c &lt;+32&gt;:\tcmp    %eax,(%rbx) // 比较eax的值和rbx(就是第二个值)是否相等   0x0000000000400f1e &lt;+34&gt;:\tje     0x400f25 &lt;phase_2+41&gt; // 相等就跳转   0x0000000000400f20 &lt;+36&gt;:\tcall   0x40143a &lt;explode_bomb&gt; //反之爆炸   0x0000000000400f25 &lt;+41&gt;:\tadd    $0x4,%rbx // rbx 保存的是第三个值   0x0000000000400f29 &lt;+45&gt;:\tcmp    %rbp,%rbx // 看看是否遍历完了   0x0000000000400f2c &lt;+48&gt;:\tjne    0x400f17 &lt;phase_2+27&gt;   0x0000000000400f2e &lt;+50&gt;:\tjmp    0x400f3c &lt;phase_2+64&gt;   0x0000000000400f30 &lt;+52&gt;:\tlea    0x4(%rsp),%rbx // 0x4(%rsp)=我们输入的第二个数,加4的原因是因为int类型是4个字节   0x0000000000400f35 &lt;+57&gt;:\tlea    0x18(%rsp),%rbp// 0x18转换为十进制数为24,也就是第6个数字后面的第一个存储单元   0x0000000000400f3a &lt;+62&gt;:\tjmp    0x400f17 &lt;phase_2+27&gt;   0x0000000000400f3c &lt;+64&gt;:\tadd    $0x28,%rsp\n\n\n意思如下程序开始时,将 (%rsp) 的值与立即数$0x1进行比较，所以第一个输入数必须为1，跳转至400f30，用lea指令分别加载%rsp+4和%rsp+24对应的地址到%rbx和%rbp，因为int型数据占4个字节，所以%rbx和%rbp分别存放第2个输入数的地址和第6个输入数的后一块的地址后跳转至400f17，此时(%rbx-4)对应的值即(%rsp)对应的值，将其存放值%eax中，将该值*2后与(%rbx)对应的值（即第二个输入值）进行比较，即后一个数是前一个数的2倍，所以第二个输入值必须为2，后跳转至400f25，得到%rbx=%rbx+4，与%rbp进行比较（%rbx对应的值(地址)是否为%rbp对应的值(地址)），若不相等则又跳转至400f17重复操作，若相等，则跳转至400f3c，结束循环，可知这是一个循环操作，看是否比较完6个数。\n循环中寄存器对应的值为:\n\n\n\n%rbx\n%rbp\n%eax\n\n\n\n%rsp+4\n%rsp+24\n(%rsp)*2&#x3D;2\n\n\n%rsp+8\n\n(%rsp)*2&#x3D;4\n\n\n%rsp+12\n\n(%rsp)*2&#x3D;8\n\n\n%rsp+16\n\n(%rsp)*2&#x3D;16\n\n\n%rsp+20\n\n(%rsp)*2&#x3D;32\n\n\n%rsp+24\n\n\n\n\nc代码如下\n123456int main()&#123;\tint[] array = new int[6];\tfor(int i=1;i&lt;6;i++)\t\tarray[i]=array[i-1]*2;\treturn 0;&#125;\n\n答案\n\n\n\n\n\n\n\n\n1 2 4 8 16 32\n输入的第一个数时保存在(%rsp)中\nphase_3 分支语句对汇编代码进行分析\n123456789101112131415161718192021222324252627282930313233343536373839Dump of assembler code for function phase_3:   0x0000000000400f43 &lt;+0&gt;:\tsub    $0x18,%rsp   0x0000000000400f47 &lt;+4&gt;:\tlea    0xc(%rsp),%rcx //这个可能是存储第二个数的   0x0000000000400f4c &lt;+9&gt;:\tlea    0x8(%rsp),%rdx//这个可能是存储第一个数的   0x0000000000400f51 &lt;+14&gt;:\tmov    $0x4025cf,%esi  //出现立即数了,后面调用了scanf，这里应该是初始化的，在gdb 中用x/s $esi 可以得到 %d %d   0x0000000000400f56 &lt;+19&gt;:\tmov    $0x0,%eax   0x0000000000400f5b &lt;+24&gt;:\tcall   0x400bf0 &lt;__isoc99_sscanf@plt&gt;   0x0000000000400f60 &lt;+29&gt;:\tcmp    $0x1,%eax//%eax存储函数的返回值的，scanf的函数返回值就是输入数据的个数   0x0000000000400f63 &lt;+32&gt;:\tjg     0x400f6a &lt;phase_3+39&gt;//若大于1就跳转   0x0000000000400f65 &lt;+34&gt;:\tcall   0x40143a &lt;explode_bomb&gt;//否则就爆炸   0x0000000000400f6a &lt;+39&gt;:\tcmpl   $0x7,0x8(%rsp)   0x0000000000400f6f &lt;+44&gt;:\tja     0x400fad &lt;phase_3+106&gt;//无符号大于则跳转，跳转就爆炸了，所以第一个数必须小于7，可以等于,但是不能是负数   0x0000000000400f71 &lt;+46&gt;:\tmov    0x8(%rsp),%eax//%eax存储的是输入的第一个数   0x0000000000400f75 &lt;+50&gt;:\tjmp    *0x402470(,%rax,8) //*0x402470 = 124,通过x/d 0x402470得到, rax是64位的，eax是32位的，就是说eax是rax的低32位，这里应该是124+%rax*8(%rax就是我们输入的第一个数)来实现跳转。   0x0000000000400f7c &lt;+57&gt;:\tmov    $0xcf,%eax   0x0000000000400f81 &lt;+62&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;   0x0000000000400f83 &lt;+64&gt;:\tmov    $0x2c3,%eax   0x0000000000400f88 &lt;+69&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;   0x0000000000400f8a &lt;+71&gt;:\tmov    $0x100,%eax   0x0000000000400f8f &lt;+76&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;   0x0000000000400f91 &lt;+78&gt;:\tmov    $0x185,%eax   0x0000000000400f96 &lt;+83&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;   0x0000000000400f98 &lt;+85&gt;:\tmov    $0xce,%eax--Type &lt;RET&gt; for more, q to quit, c to continue without paging--   0x0000000000400f9d &lt;+90&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;   0x0000000000400f9f &lt;+92&gt;:\tmov    $0x2aa,%eax   0x0000000000400fa4 &lt;+97&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;   0x0000000000400fa6 &lt;+99&gt;:\tmov    $0x147,%eax   0x0000000000400fab &lt;+104&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;   0x0000000000400fad &lt;+106&gt;:\tcall   0x40143a &lt;explode_bomb&gt;   0x0000000000400fb2 &lt;+111&gt;:\tmov    $0x0,%eax   0x0000000000400fb7 &lt;+116&gt;:\tjmp    0x400fbe &lt;phase_3+123&gt;   0x0000000000400fb9 &lt;+118&gt;:\tmov    $0x137,%eax   0x0000000000400fbe &lt;+123&gt;:\tcmp    0xc(%rsp),%eax   0x0000000000400fc2 &lt;+127&gt;:\tje     0x400fc9 &lt;phase_3+134&gt;   0x0000000000400fc4 &lt;+129&gt;:\tcall   0x40143a &lt;explode_bomb&gt;   0x0000000000400fc9 &lt;+134&gt;:\tadd    $0x18,%rsp   0x0000000000400fcd &lt;+138&gt;:\tret    End of assembler dump.\n第一个数的范围是在[0,7]之间，开始试探n1&#x3D;0,跳转到0x400f7c,若n2!&#x3D;0xcf,则爆炸n1&#x3D;1,跳转到0x400fb9,若n2!&#x3D;0x137,则爆炸n1&#x3D;2,跳转到0x400f83,若n2!&#x3D;0x2c3,则爆炸n1&#x3D;3,跳转到0x400f8a,若n2!&#x3D;0x100,则爆炸n1&#x3D;4,跳转到0x400f91,若n2!&#x3D;0x185,则爆炸n1&#x3D;5,跳转到0x400f98,若n2!&#x3D;0xce,则爆炸n1&#x3D;6,跳转到0x400f9f,若n2!&#x3D;0x2aa,则爆炸n1&#x3D;7,跳转到0x400fa6,若n2!&#x3D;0x147,则爆炸\nc代码\n123456789101112131415161718192021222324252627282930313233343536373839404142void phase_3(char* input)&#123;\t//0x8(%rsp) 0xc(%rsp)\tint n1,n2;\t//res存放返回输入数据的个数\tint res = sscanf(input,&quot;%d %d&quot;,&amp;n1,&amp;n2);\tif(res&lt;=1)\t\texplode_bomb();\tswitch(n1)&#123;\t\tcase 0:\t\tif(n2!=0xcf)\t\t\texplode_bomb();\t\tbreak;\t\tcase 1:\t\tif(n2!=0x137)\t\t\texplode_bomb();\t\tbreak;\t\tcase 2:\t\tif(n2!=0x2c3)\t\t\texplode_bomb();\t\tbreak;\t\tcase 3:\t\tif(n2!=0x100)\t\t\texplode_bomb();\t\tbreak;\t\tcase 4:\t\tif(n2!=0x185)\t\t\texplode_bomb();\t\tbreak;\t\tcase 5:\t\tif(n2!=0xce)\t\t\texplode_bomb();\t\tbreak;\t\tcase 6:\t\tif(n2!=0x2aa)\t\t\texplode_bomb();\t\tbreak;\t\tcase 7:\t\tif(n2!=0x147)\t\t\texplode_bomb();\t\tbreak;\t&#125;&#125;\n\n\n答案\n0 207\n1 311\n2 707\n3 256\n4 389\n5 206\n6 682\n7 327\n\nphase_4 递归分析汇编代码\n1234567891011121314151617181920212223Dump of assembler code for function phase_4:   0x000000000040100c &lt;+0&gt;:\tsub    $0x18,%rsp\t# 给局部变量腾出空间   0x0000000000401010 &lt;+4&gt;:\tlea    0xc(%rsp),%rcx   # 我们输入的第二个数   0x0000000000401015 &lt;+9&gt;:\tlea    0x8(%rsp),%rdx\t# 我们输入的第一个数   0x000000000040101a &lt;+14&gt;:\tmov    $0x4025cf,%esi\t# 通过x/s 0x4025cf 可以得到是格式化字符串&quot;%d %d&quot;   0x000000000040101f &lt;+19&gt;:\tmov    $0x0,%eax        # 这个就不说了   0x0000000000401024 &lt;+24&gt;:\tcall   0x400bf0 &lt;__isoc99_sscanf@plt&gt; # 调用了scanf函数   0x0000000000401029 &lt;+29&gt;:\tcmp    $0x2,%eax\t# 如果输入的数字个数不等于2就爆炸了   0x000000000040102c &lt;+32&gt;:\tjne    0x401035 &lt;phase_4+41&gt;   0x000000000040102e &lt;+34&gt;:\tcmpl   $0xe,0x8(%rsp)  # 比较第一个数与14的大小，若小于就跳转，若大于就爆炸，第一个数的范围[0,14]   0x0000000000401033 &lt;+39&gt;:\tjbe    0x40103a &lt;phase_4+46&gt;   0x0000000000401035 &lt;+41&gt;:\tcall   0x40143a &lt;explode_bomb&gt;   0x000000000040103a &lt;+46&gt;:\tmov    $0xe,%edx          0x000000000040103f &lt;+51&gt;:\tmov    $0x0,%esi   0x0000000000401044 &lt;+56&gt;:\tmov    0x8(%rsp),%edi   0x0000000000401048 &lt;+60&gt;:\tcall   0x400fce &lt;func4&gt; #调用func4 应该是需要%edx %esi %edi这几个参数   0x000000000040104d &lt;+65&gt;:\ttest   %eax,%eax\t# 按位逻辑与操作   0x000000000040104f &lt;+67&gt;:\tjne    0x401058 &lt;phase_4+76&gt; # 如果%eax不等于0,则跳转至爆炸   0x0000000000401051 &lt;+69&gt;:\tcmpl   $0x0,0xc(%rsp)\t#比较第二个数与0的大小关系   0x0000000000401056 &lt;+74&gt;:\tje     0x40105d &lt;phase_4+81&gt; #相等就跳转结尾   0x0000000000401058 &lt;+76&gt;:\tcall   0x40143a &lt;explode_bomb&gt; #不相等就爆炸   0x000000000040105d &lt;+81&gt;:\tadd    $0x18,%rsp   0x0000000000401061 &lt;+85&gt;:\tret    \n接下来看看func4干了什么\n123456789101112131415161718192021222324Dump of assembler code for function func4:   0x0000000000400fce &lt;+0&gt;:\tsub    $0x8,%rsp   # 为局部变量腾出空间   0x0000000000400fd2 &lt;+4&gt;:\tmov    %edx,%eax   # 0xe   0x0000000000400fd4 &lt;+6&gt;:\tsub    %esi,%eax   # 0xe-0x0   0x0000000000400fd6 &lt;+8&gt;:\tmov    %eax,%ecx   # ecx = 0xe   0x0000000000400fd8 &lt;+10&gt;:\tshr    $0x1f,%ecx  # %ecx的值逻辑右移31位=1110&gt;&gt;31=14/2^31 =0   0x0000000000400fdb &lt;+13&gt;:\tadd    %ecx,%eax   # ecx = ecx + eax = 0 + e   0x0000000000400fdd &lt;+15&gt;:\tsar    %eax\t   # 算数右移1位 %eax = %eax /2 = 0xe/2 = 7    0x0000000000400fdf &lt;+17&gt;:\tlea    (%rax,%rsi,1),%ecx # %eax是%rax的低32位，%esi是%rsi的低32位  %rax + %rsi * 1 = 7 + 0=7 %ecx=7   0x0000000000400fe2 &lt;+20&gt;:\tcmp    %edi,%ecx  #  %edi保存的是输入的第一个数字 %ecx = 7    0x0000000000400fe4 &lt;+22&gt;:\tjle    0x400ff2 &lt;func4+36&gt;   0x0000000000400fe6 &lt;+24&gt;:\tlea    -0x1(%rcx),%edx  # 7 -1 =&gt;edx=6   0x0000000000400fe9 &lt;+27&gt;:\tcall   0x400fce &lt;func4&gt; # 递归调用   0x0000000000400fee &lt;+32&gt;:\tadd    %eax,%eax\t# eax*=2   0x0000000000400ff0 &lt;+34&gt;:\tjmp    0x401007 &lt;func4+57&gt;  # 出口   0x0000000000400ff2 &lt;+36&gt;:\tmov    $0x0,%eax  # %eax = 0   0x0000000000400ff7 &lt;+41&gt;:\tcmp    %edi,%ecx  # n1, 7    0x0000000000400ff9 &lt;+43&gt;:\tjge    0x401007 &lt;func4+57&gt; # n1&gt;=7跳转到func7 出口   0x0000000000400ffb &lt;+45&gt;:\tlea    0x1(%rcx),%esi  # ecx是rcx的低32位     0x1+7=&gt;esi=8    0x0000000000400ffe &lt;+48&gt;:\tcall   0x400fce &lt;func4&gt;\t  # 跳转   0x0000000000401003 &lt;+53&gt;:\tlea    0x1(%rax,%rax,1),%eax # 0x1 + func4+func4=&gt;eax   0x0000000000401007 &lt;+57&gt;:\tadd    $0x8,%rsp   0x000000000040100b &lt;+61&gt;:\tret    \n看看这个\n123450x0000000000401051 &lt;+69&gt;:\tcmpl   $0x0,0xc(%rsp)\t#比较第二个数与0的大小关系  0x0000000000401056 &lt;+74&gt;:\tje     0x40105d &lt;phase_4+81&gt; #相等就跳转结尾0x000000000040104d &lt;+65&gt;:\ttest   %eax,%eax\t# 按位逻辑与操作  0x000000000040104f &lt;+67&gt;:\tjne    0x401058 &lt;phase_4+76&gt; # 如果%eax不等于0,则跳转至爆炸\n所以n2必须等于0，n1的值要让函数func4的返回值为4，且n1∈[0,14]\n1234567891011121314151617181920212223242526272829//a: %edi b:%esi c:%edx d: %ecx e:%eaxint func4(int a,int b,int c)&#123;//a in %rdi,b in %rsi,c in %rdx,e in %rax,d in %ecx //y的初始值为0，z的初始值为14  int t=c-b;  int d=e&gt;&gt;31;  e=(e+d)&gt;&gt;1;  d=e+b;  if(k&gt;a)  &#123;    c=d-1;    func4(a,b,c);    e*=2;    return e;  &#125;  else   &#123;     e=0;     if(d&lt;a)     &#123;        b=da+1;        func4(a,b,c);        e=2*e+1;        return e;     &#125;     else         return e;   //要使返回值e（%eax）为0，其中一个答案为a=d=7   &#125;&#125;\n分析可得一个答案 7 0其余的挨个带进去试\n答案\n\n\n\n\n\n\n\n\n7 0\nphase_5 指针 字符串比较phase_5的汇编代码\n1234567891011121314151617181920212223242526272829303132333435363738394041Dump of assembler code for function phase_5:   0x0000000000401062 &lt;+0&gt;:\tpush   %rbx   0x0000000000401063 &lt;+1&gt;:\tsub    $0x20,%rsp   0x0000000000401067 &lt;+5&gt;:\tmov    %rdi,%rbx   #%rbx存放我们输入的字符串地址   0x000000000040106a &lt;+8&gt;:\tmov    %fs:0x28,%rax\t# 栈破坏检测,csapp P199页(金丝雀值),即在栈帧的任何局部缓冲区与栈状态之间存储一个值,在程序返回前检查该值，若该值发生变化，程序提前终止   0x0000000000401073 &lt;+17&gt;:\tmov    %rax,0x18(%rsp)    0x0000000000401078 &lt;+22&gt;:\txor    %eax,%eax        # 异或清零   0x000000000040107a &lt;+24&gt;:\tcall   0x40131b &lt;string_length&gt;    0x000000000040107f &lt;+29&gt;:\tcmp    $0x6,%eax   0x0000000000401082 &lt;+32&gt;:\tje     0x4010d2 &lt;phase_5+112&gt; # 输入的字符个数必须等于6，否则爆炸   0x0000000000401084 &lt;+34&gt;:\tcall   0x40143a &lt;explode_bomb&gt;   0x0000000000401089 &lt;+39&gt;:\tjmp    0x4010d2 &lt;phase_5+112&gt;    0x000000000040108b &lt;+41&gt;:\tmovzbl (%rbx,%rax,1),%ecx # rbx就是我们输入的字符串地址 翻译成语句:%ecx = %rbx + %rax*1 = %rbx+0*1=%rbx=我们输入的第一个字符   0x000000000040108f &lt;+45&gt;:\tmov    %cl,(%rsp)    # %cl是%ecx的低8位    0x0000000000401092 &lt;+48&gt;:\tmov    (%rsp),%rdx   # %rdx保存我们输入的一位字符   0x0000000000401096 &lt;+52&gt;:\tand    $0xf,%edx     # edx是rdx的低32位，取出低4位   0x0000000000401099 &lt;+55&gt;:\tmovzbl 0x4024b0(%rdx),%edx # 0x40240b0是字符串&quot;maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?&quot;的基址，设该字符串为str\t\t\t\t\t\t\t   # edx = str[rdx]   0x00000000004010a0 &lt;+62&gt;:\tmov    %dl,0x10(%rsp,%rax,1) # %dl是rdx的低4位   0x00000000004010a4 &lt;+66&gt;:\tadd    $0x1,%rax      # 加一   0x00000000004010a8 &lt;+70&gt;:\tcmp    $0x6,%rax      # 和6相比   0x00000000004010ac &lt;+74&gt;:\tjne    0x40108b &lt;phase_5+41&gt; # 不等于6跳转   0x00000000004010ae &lt;+76&gt;:\tmovb   $0x0,0x16(%rsp)   0x00000000004010b3 &lt;+81&gt;:\tmov    $0x40245e,%esi  #0x40245e是字符串flyers的地址，用立即数来表示的，应该是内置的   0x00000000004010b8 &lt;+86&gt;:\tlea    0x10(%rsp),%rdi # rdi是aduier的地址 ，结合下面的strings_not_equal函数来看，应该是要把我们输入的东西和flyers比较，由于我们输入的是abcdef,a的ASCII码是97，低4位是0001，所以取得是索引为1的,接下来就是要改变我们输入的东西，让其在str中截取得到的字符串为flyers即可   0x00000000004010bd &lt;+91&gt;:\tcall   0x401338 &lt;strings_not_equal&gt;   0x00000000004010c2 &lt;+96&gt;:\ttest   %eax,%eax    0x00000000004010c4 &lt;+98&gt;:\tje     0x4010d9 &lt;phase_5+119&gt;  #相等跳转   0x00000000004010c6 &lt;+100&gt;:\tcall   0x40143a &lt;explode_bomb&gt; #不相等就炸   0x00000000004010cb &lt;+105&gt;:\tnopl   0x0(%rax,%rax,1)   0x00000000004010d0 &lt;+110&gt;:\tjmp    0x4010d9 &lt;phase_5+119&gt;   0x00000000004010d2 &lt;+112&gt;:\tmov    $0x0,%eax  # %eax清零   0x00000000004010d7 &lt;+117&gt;:\tjmp    0x40108b &lt;phase_5+41&gt;    0x00000000004010d9 &lt;+119&gt;:\tmov    0x18(%rsp),%rax   0x00000000004010de &lt;+124&gt;:\txor    %fs:0x28,%rax   0x00000000004010e7 &lt;+133&gt;:\tje     0x4010ee &lt;phase_5+140&gt;   0x00000000004010e9 &lt;+135&gt;:\tcall   0x400b30 &lt;__stack_chk_fail@plt&gt;   0x00000000004010ee &lt;+140&gt;:\tadd    $0x20,%rsp   0x00000000004010f2 &lt;+144&gt;:\tpop    %rbx   0x00000000004010f3 &lt;+145&gt;:\tret    \n\n所以过关条件就是通过我们输入的六个字符的ASCII码的低4位作为索引,取切maduier那一大串的东西且返回的结果必须是flyers下面是flyers中各字符在maduier中的位置\n\n\n\n字符\n位置\n\n\n\nf\n9\n\n\nI\n15\n\n\ny\n14\n\n\ne\n5\n\n\nr\n6\n\n\ns\n7\n\n\n找到六个字符，他们的ASCII码值的低4位要是表格中的(从上到下，依次符合即可)接下来就是找字符\n答案不唯一\n\n\n\n\n\n\n\n\n\n9?&gt;uvwIONEFG\nphase6 链表这个我确实是很蒙，我尽力记录清楚,过段时间我再回顾一下，我画点图来帮助理解第一部分\n12345678910111213141516171819202122232425262728293031323334353637383940414243Dump of assembler code for function phase_6:   0x00000000004010f4 &lt;+0&gt;:\tpush   %r14   0x00000000004010f6 &lt;+2&gt;:\tpush   %r13   0x00000000004010f8 &lt;+4&gt;:\tpush   %r12   0x00000000004010fa &lt;+6&gt;:\tpush   %rbp   0x00000000004010fb &lt;+7&gt;:\tpush   %rbx   0x00000000004010fc &lt;+8&gt;:\tsub    $0x50,%rsp   0x0000000000401100 &lt;+12&gt;:\tmov    %rsp,%r13   0x0000000000401103 &lt;+15&gt;:\tmov    %rsp,%rsi   0x0000000000401106 &lt;+18&gt;:\tcall   0x40145c &lt;read_six_numbers&gt;   0x000000000040110b &lt;+23&gt;:\tmov    %rsp,%r14 # 保存我们输入的数的   0x000000000040110e &lt;+26&gt;:\tmov    $0x0,%r12d #    0x0000000000401114 &lt;+32&gt;:\tmov    %r13,%rbp     0x0000000000401117 &lt;+35&gt;:\tmov    0x0(%r13),%eax # %eax = nums[0]   0x000000000040111b &lt;+39&gt;:\tsub    $0x1,%eax   # %eax-=1   0x000000000040111e &lt;+42&gt;:\tcmp    $0x5,%eax  # eax-1&lt;=5   0x0000000000401121 &lt;+45&gt;:\tjbe    0x401128 &lt;phase_6+52&gt;   0x0000000000401123 &lt;+47&gt;:\tcall   0x40143a &lt;explode_bomb&gt;   0x0000000000401128 &lt;+52&gt;:\tadd    $0x1,%r12d # r12d=1   0x000000000040112c &lt;+56&gt;:\tcmp    $0x6,%r12d    0x0000000000401130 &lt;+60&gt;:\tje     0x401153 &lt;phase_6+95&gt;     0x0000000000401132 &lt;+62&gt;:\tmov    %r12d,%ebx # %ebx = 1  退出循环的条件是遍历完6个数字   0x0000000000401135 &lt;+65&gt;:\tmovslq %ebx,%rax  # rax = 1   0x0000000000401138 &lt;+68&gt;:\tmov    (%rsp,%rax,4),%eax  # eax =  2 拿到下一个元素给eax  4是int类型的4个字节   0x000000000040113b &lt;+71&gt;:\tcmp    %eax,0x0(%rbp)  # nums[i] !=nums[0]   0x000000000040113e &lt;+74&gt;:\tjne    0x401145 &lt;phase_6+81&gt;   0x0000000000401140 &lt;+76&gt;:\tcall   0x40143a &lt;explode_bomb&gt;    0x0000000000401145 &lt;+81&gt;:\tadd    $0x1,%ebx  # ebx=2   0x0000000000401148 &lt;+84&gt;:\tcmp    $0x5,%ebx  # ebx&lt;=5   0x000000000040114b &lt;+87&gt;:\tjle    0x401135 &lt;phase_6+65&gt; # 这个循环是判断数组运算是否相等   0x000000000040114d &lt;+89&gt;:\tadd    $0x4,%r13   0x0000000000401151 &lt;+93&gt;:\tjmp    0x401114 &lt;phase_6+32&gt;      0x0000000000401153 &lt;+95&gt;:\tlea    0x18(%rsp),%rsi   0x0000000000401158 &lt;+100&gt;:\tmov    %r14,%rax   0x000000000040115b &lt;+103&gt;:\tmov    $0x7,%ecx   0x0000000000401160 &lt;+108&gt;:\tmov    %ecx,%edx   0x0000000000401162 &lt;+110&gt;:\tsub    (%rax),%edx   0x0000000000401164 &lt;+112&gt;:\tmov    %edx,(%rax)   0x0000000000401166 &lt;+114&gt;:\tadd    $0x4,%rax\n伪代码\n123456789101112131415161718192021r14 = rsp  nums[0]rbp = r13  nums[0]eax = nums[0]eax -=1for(r12d =0;r12d&lt;6;r12d++)&#123;if(eax&gt;6)    explode_bomb();r12d++ if(r12d==6)\tbreak ebx = r12d for(ebx=r12d;ebx&lt;=5;ebx++)&#123;\trax = nums[rbx] \tif(nums[rbx] != rbp)\t&#123;ebx++;&#125;  else     explode_bomb();&#125;r13++; //(这里是加1，但是反应在内存上是加上了1*int类型所占的字节)&#125;&#125;\n也就是说每个数字必须&lt;&#x3D;6,且6个数字互不相等第二部分\n1234567890x0000000000401153 &lt;+95&gt;:\tlea    0x18(%rsp),%rsi # rsi = 0 ,判定是否遍历完了，第六个元素后面的那个存储单元没有值，那就是0，0x18=&gt;24，是因为我们有六个元素，每个元素4个字节，拿到最后一个元素后要地址(0x14)要+4，所以是0x180x0000000000401158 &lt;+100&gt;:\tmov    %r14,%rax  # *r14 = 5 = nums[0]0x000000000040115b &lt;+103&gt;:\tmov    $0x7,%ecx  # ecx = 70x0000000000401160 &lt;+108&gt;:\tmov    %ecx,%edx  # edx = ecx = 70x0000000000401162 &lt;+110&gt;:\tsub    (%rax),%edx # edx = edx  - *rax = 7 - *rax0x0000000000401164 &lt;+112&gt;:\tmov    %edx,(%rax) # *rax = edx0x0000000000401166 &lt;+114&gt;:\tadd    $0x4,%rax   # rax+=4 获取下一个元素0x000000000040116a &lt;+118&gt;:\tcmp    %rsi,%rax  # rax =num[1]=7-num[1]0x000000000040116d &lt;+121&gt;:\tjne    0x401160 &lt;phase_6+108&gt;\n12345rsi = 0;//实际上是nums[6]ecx = 7;for(rax=0;rax&lt;6;rax++) //底层里面nums[6]=0,要是不好理解，可以把中间的语句换成rax!=rsi,应该好理解点\tnums[rax]=7-nums[rax];\t\n第三部分第三部分中有一条语句\n10x0000000000401183 &lt;+143&gt;:\tmov    $0x6032d0,%edx  \n通过x&#x2F;30来查看 0x6032d0发现这是一个链表,但是前面的14c不知道是什么东西，结点如下\n12345struct node&#123;\tint value;\tint number;\tnode* next;&#125;\n1234567891011121314151617180x000000000040116f &lt;+123&gt;:\tmov    $0x0,%esi  # esi = 0 0x0000000000401174 &lt;+128&gt;:\tjmp    0x401197 &lt;phase_6+163&gt;0x0000000000401176 &lt;+130&gt;:\tmov    0x8(%rdx),%rdx # 是一个node类型 rdx = 当前结点的next值0x000000000040117a &lt;+134&gt;:\tadd    $0x1,%eax   # eax +=10x000000000040117d &lt;+137&gt;:\tcmp    %ecx,%eax   0x000000000040117f &lt;+139&gt;:\tjne    0x401176 &lt;phase_6+130&gt; # 不相等继续遍历，rdx最终指向链表的第%eax个结点0x0000000000401181 &lt;+141&gt;:\tjmp    0x401188 &lt;phase_6+148&gt;0x0000000000401183 &lt;+143&gt;:\tmov    $0x6032d0,%edx  # 0x6032d0是node1的地址0x0000000000401188 &lt;+148&gt;:\tmov    %rdx,0x20(%rsp,%rsi,2) # (rsp+32+rsi*2)=rdx0x000000000040118d &lt;+153&gt;:\tadd    $0x4,%rsi # rsi+=4 0x0000000000401191 &lt;+157&gt;:\tcmp    $0x18,%rsi # 240x0000000000401195 &lt;+161&gt;:\tje     0x4011ab &lt;phase_6+183&gt;0x0000000000401197 &lt;+163&gt;:\tmov    (%rsp,%rsi,1),%ecx  # ecx = *(rsp + rsi) 0x000000000040119a &lt;+166&gt;:\tcmp    $0x1,%ecx # ecx&lt;=10x000000000040119d &lt;+169&gt;:\tjle    0x401183 &lt;phase_6+143&gt;0x000000000040119f &lt;+171&gt;:\tmov    $0x1,%eax # eax = 10x00000000004011a4 &lt;+176&gt;:\tmov    $0x6032d0,%edx # 前面的那个立即数是一个node类型的指针,x/30 0x6032d0查看他附近的30个字节0x00000000004011a9 &lt;+181&gt;:\tjmp    0x401176 &lt;phase_6+130&gt;\n这部分我很蒙第四部分\n123456789101112131415161718192021222324252627282930313233for(int i=6;i&gt;=1;i--)\tnode[i].next=node[i-1]; 183~220   0x00000000004011ab &lt;+183&gt;:\tmov    0x20(%rsp),%rbx  # rbx = (0x20+rsp)   0x00000000004011b0 &lt;+188&gt;:\tlea    0x28(%rsp),%rax  # rax = (0x28+rsp)   0x00000000004011b5 &lt;+193&gt;:\tlea    0x50(%rsp),%rsi  # rsi = (0x50+rsp) 0x50是链表的尾端   0x00000000004011ba &lt;+198&gt;:\tmov    %rbx,%rcx      0x00000000004011bd &lt;+201&gt;:\tmov    (%rax),%rdx  # rdx = *rax   0x00000000004011c0 &lt;+204&gt;:\tmov    %rdx,0x8(%rcx) //栈   0x00000000004011c4 &lt;+208&gt;:\tadd    $0x8,%rax   0x00000000004011c8 &lt;+212&gt;:\tcmp    %rsi,%rax   0x00000000004011cb &lt;+215&gt;:\tje     0x4011d2 &lt;phase_6+222&gt;   0x00000000004011cd &lt;+217&gt;:\tmov    %rdx,%rcx   0x00000000004011d0 &lt;+220&gt;:\tjmp    0x4011bd &lt;phase_6+201&gt;   # 这里改一下输入,改成6 5 4 3 2 1   0x00000000004011d2 &lt;+222&gt;:\tmovq   $0x0,0x8(%rdx)  # 把最后一个结点的next域赋值为0   0x00000000004011da &lt;+230&gt;:\tmov    $0x5,%ebp       # ebp = 5   0x00000000004011df &lt;+235&gt;:\tmov    0x8(%rbx),%rax  # 指向重排后的第i个(1&lt;=i&lt;=5)   0x00000000004011e3 &lt;+239&gt;:\tmov    (%rax),%eax    #    0x00000000004011e5 &lt;+241&gt;:\tcmp    %eax,(%rbx)    # rbx指向的是重排后的第i+1个 第1个大于等于第二个,要呈现单调递减的顺序，而且比较的是类似于权重   0x00000000004011e7 &lt;+243&gt;:\tjge    0x4011ee &lt;phase_6+250&gt;  # 必须要单调递减   0x00000000004011e9 &lt;+245&gt;:\tcall   0x40143a &lt;explode_bomb&gt;   0x00000000004011ee &lt;+250&gt;:\tmov    0x8(%rbx),%rbx   0x00000000004011f2 &lt;+254&gt;:\tsub    $0x1,%ebp   0x00000000004011f5 &lt;+257&gt;:\tjne    0x4011df &lt;phase_6+235&gt;   0x00000000004011f7 &lt;+259&gt;:\tadd    $0x50,%rsp   0x00000000004011fb &lt;+263&gt;:\tpop    %rbx   0x00000000004011fc &lt;+264&gt;:\tpop    %rbp   0x00000000004011fd &lt;+265&gt;:\tpop    %r12      0x00000000004011ff &lt;+267&gt;:\tpop    %r13   0x0000000000401201 &lt;+269&gt;:\tpop    %r14   0x0000000000401203 &lt;+271&gt;:\tret    \n\n梳理1.输入六个数(&lt;&#x3D;6且互不相同)2.nums[i]&#x3D;7-nums[i]7 -nums[0]&#x3D;nums[0]7 -nums[1]&#x3D;nums[1]7 -nums[2]&#x3D;nums[2]7 -nums[3]&#x3D;nums[3]7 -nums[4]&#x3D;nums[4]7 -nums[5]&#x3D;nums[5]1   2   3   4   5   6332 168 924 691 477 443  这个是各个结点的权重,\n根据nums[i]的内容对node进行重排，确保重排后的各个结点的权重呈单调递减\n\n\n\n\n\n\n\n\n\n答案: 4 3 2 1 6 5\n全部的分析过程\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101Dump of assembler code for function phase_6:   0x00000000004010f4 &lt;+0&gt;:\tpush   %r14   0x00000000004010f6 &lt;+2&gt;:\tpush   %r13   0x00000000004010f8 &lt;+4&gt;:\tpush   %r12   0x00000000004010fa &lt;+6&gt;:\tpush   %rbp   0x00000000004010fb &lt;+7&gt;:\tpush   %rbx   0x00000000004010fc &lt;+8&gt;:\tsub    $0x50,%rsp   0x0000000000401100 &lt;+12&gt;:\tmov    %rsp,%r13   0x0000000000401103 &lt;+15&gt;:\tmov    %rsp,%rsi   0x0000000000401106 &lt;+18&gt;:\tcall   0x40145c &lt;read_six_numbers&gt;   0x000000000040110b &lt;+23&gt;:\tmov    %rsp,%r14 # nums[0] 基址   0x000000000040110e &lt;+26&gt;:\tmov    $0x0,%r12d #    0x0000000000401114 &lt;+32&gt;:\tmov    %r13,%rbp  # nums[0]   0x0000000000401117 &lt;+35&gt;:\tmov    0x0(%r13),%eax # %eax = nums[0]   0x000000000040111b &lt;+39&gt;:\tsub    $0x1,%eax   # %eax-=1   0x000000000040111e &lt;+42&gt;:\tcmp    $0x5,%eax  # eax-1&lt;=5   0x0000000000401121 &lt;+45&gt;:\tjbe    0x401128 &lt;phase_6+52&gt;   0x0000000000401123 &lt;+47&gt;:\tcall   0x40143a &lt;explode_bomb&gt;   0x0000000000401128 &lt;+52&gt;:\tadd    $0x1,%r12d # r12d=1   0x000000000040112c &lt;+56&gt;:\tcmp    $0x6,%r12d    0x0000000000401130 &lt;+60&gt;:\tje     0x401153 &lt;phase_6+95&gt;     0x0000000000401132 &lt;+62&gt;:\tmov    %r12d,%ebx # %ebx = 1  退出循环的条件是遍历完6个数字   0x0000000000401135 &lt;+65&gt;:\tmovslq %ebx,%rax  # rax = 1   0x0000000000401138 &lt;+68&gt;:\tmov    (%rsp,%rax,4),%eax  # eax =  2 拿到下一个元素给eax  4是int类型的4个字节   0x000000000040113b &lt;+71&gt;:\tcmp    %eax,0x0(%rbp)  # nums[i] !=nums[0]   0x000000000040113e &lt;+74&gt;:\tjne    0x401145 &lt;phase_6+81&gt;   0x0000000000401140 &lt;+76&gt;:\tcall   0x40143a &lt;explode_bomb&gt;    0x0000000000401145 &lt;+81&gt;:\tadd    $0x1,%ebx  # ebx=2   0x0000000000401148 &lt;+84&gt;:\tcmp    $0x5,%ebx  # ebx&lt;=5   0x000000000040114b &lt;+87&gt;:\tjle    0x401135 &lt;phase_6+65&gt; # 这个循环是判断数组运算是否相等   0x000000000040114d &lt;+89&gt;:\tadd    $0x4,%r13   0x0000000000401151 &lt;+93&gt;:\tjmp    0x401114 &lt;phase_6+32&gt;      0x0000000000401153 &lt;+95&gt;:\tlea    0x18(%rsp),%rsi # rsi = 0    0x0000000000401158 &lt;+100&gt;:\tmov    %r14,%rax  # *r14 = 5   0x000000000040115b &lt;+103&gt;:\tmov    $0x7,%ecx  # ecx = 7   0x0000000000401160 &lt;+108&gt;:\tmov    %ecx,%edx  # edx = ecx = 7   0x0000000000401162 &lt;+110&gt;:\tsub    (%rax),%edx # *edx = *edx  - *rax = 7 - *rax   0x0000000000401164 &lt;+112&gt;:\tmov    %edx,(%rax) # *rax = edx   0x0000000000401166 &lt;+114&gt;:\tadd    $0x4,%rax   # rax+=4 获取下一个元素   0x000000000040116a &lt;+118&gt;:\tcmp    %rsi,%rax  # rax =num[1]=7-num[1]   0x000000000040116d &lt;+121&gt;:\tjne    0x401160 &lt;phase_6+108&gt;4 3 2 1 5 6   0x000000000040116f &lt;+123&gt;:\tmov    $0x0,%esi  # esi = 0    0x0000000000401174 &lt;+128&gt;:\tjmp    0x401197 &lt;phase_6+163&gt;   0x0000000000401176 &lt;+130&gt;:\tmov    0x8(%rdx),%rdx # 是一个node类型 rdx = 当前结点的next值   0x000000000040117a &lt;+134&gt;:\tadd    $0x1,%eax   # eax +=1   0x000000000040117d &lt;+137&gt;:\tcmp    %ecx,%eax      0x000000000040117f &lt;+139&gt;:\tjne    0x401176 &lt;phase_6+130&gt; # 不相等继续遍历，rdx最终指向链表的第%eax个结点   0x0000000000401181 &lt;+141&gt;:\tjmp    0x401188 &lt;phase_6+148&gt;   0x0000000000401183 &lt;+143&gt;:\tmov    $0x6032d0,%edx  # 0x6032d0是node1的地址   0x0000000000401188 &lt;+148&gt;:\tmov    %rdx,0x20(%rsp,%rsi,2) # (rsp+32+rsi*2)=rdx   0x000000000040118d &lt;+153&gt;:\tadd    $0x4,%rsi # rsi+=4    0x0000000000401191 &lt;+157&gt;:\tcmp    $0x18,%rsi # 24   0x0000000000401195 &lt;+161&gt;:\tje     0x4011ab &lt;phase_6+183&gt;   0x0000000000401197 &lt;+163&gt;:\tmov    (%rsp,%rsi,1),%ecx  # ecx = *(rsp + rsi)    0x000000000040119a &lt;+166&gt;:\tcmp    $0x1,%ecx # ecx&lt;=1   0x000000000040119d &lt;+169&gt;:\tjle    0x401183 &lt;phase_6+143&gt;   0x000000000040119f &lt;+171&gt;:\tmov    $0x1,%eax # eax = 1   0x00000000004011a4 &lt;+176&gt;:\tmov    $0x6032d0,%edx # 前面的那个立即数是一个node类型的指针,x/30 0x6032d0查看他附近的30个字节   0x00000000004011a9 &lt;+181&gt;:\tjmp    0x401176 &lt;phase_6+130&gt;   for(int i=6;i&gt;=1;i--)\tnode[i].next=node[i-1]; 183~220   0x00000000004011ab &lt;+183&gt;:\tmov    0x20(%rsp),%rbx  # rbx = (0x20+rsp)   0x00000000004011b0 &lt;+188&gt;:\tlea    0x28(%rsp),%rax  # rax = (0x28+rsp)   0x00000000004011b5 &lt;+193&gt;:\tlea    0x50(%rsp),%rsi  # rsi = (0x50+rsp) 0x50是链表的尾端   0x00000000004011ba &lt;+198&gt;:\tmov    %rbx,%rcx      0x00000000004011bd &lt;+201&gt;:\tmov    (%rax),%rdx  # rdx = *rax   0x00000000004011c0 &lt;+204&gt;:\tmov    %rdx,0x8(%rcx) //栈   0x00000000004011c4 &lt;+208&gt;:\tadd    $0x8,%rax   0x00000000004011c8 &lt;+212&gt;:\tcmp    %rsi,%rax   0x00000000004011cb &lt;+215&gt;:\tje     0x4011d2 &lt;phase_6+222&gt;   0x00000000004011cd &lt;+217&gt;:\tmov    %rdx,%rcx   0x00000000004011d0 &lt;+220&gt;:\tjmp    0x4011bd &lt;phase_6+201&gt;   # 这里改一下输入,改成6 5 4 3 2 1   0x00000000004011d2 &lt;+222&gt;:\tmovq   $0x0,0x8(%rdx)  # 把最后一个结点的next域赋值为0   0x00000000004011da &lt;+230&gt;:\tmov    $0x5,%ebp       # ebp = 5   0x00000000004011df &lt;+235&gt;:\tmov    0x8(%rbx),%rax  # 指向重排后的第i个(1&lt;=i&lt;=5)   0x00000000004011e3 &lt;+239&gt;:\tmov    (%rax),%eax    #    0x00000000004011e5 &lt;+241&gt;:\tcmp    %eax,(%rbx)    # rbx指向的是重排后的第i+1个 第1个大于等于第二个,要呈现单调递减的顺序，而且比较的是类似于权重   0x00000000004011e7 &lt;+243&gt;:\tjge    0x4011ee &lt;phase_6+250&gt;  # 必须要单调递减   0x00000000004011e9 &lt;+245&gt;:\tcall   0x40143a &lt;explode_bomb&gt;   0x00000000004011ee &lt;+250&gt;:\tmov    0x8(%rbx),%rbx   0x00000000004011f2 &lt;+254&gt;:\tsub    $0x1,%ebp   0x00000000004011f5 &lt;+257&gt;:\tjne    0x4011df &lt;phase_6+235&gt;   0x00000000004011f7 &lt;+259&gt;:\tadd    $0x50,%rsp   0x00000000004011fb &lt;+263&gt;:\tpop    %rbx   0x00000000004011fc &lt;+264&gt;:\tpop    %rbp   0x00000000004011fd &lt;+265&gt;:\tpop    %r12   0x00000000004011ff &lt;+267&gt;:\tpop    %r13   0x0000000000401201 &lt;+269&gt;:\tpop    %r14   0x0000000000401203 &lt;+271&gt;:\tret    \n\nfinish明天试试隐藏关\n","slug":"BombLab","date":"2023-10-26T06:08:49.000Z","categories_index":"","tags_index":"CSAPP Lab","author_index":"Aurora"}]