<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Acwing-877 扩展欧几里得算法</title>
    <url>//post/Acwing-877-%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95.html</url>
    <content><![CDATA[<p>给定 n 对正整数 <code>ai</code>,<code>bi</code>，对于每对数，求出一组 <code>xi</code>,<code>yi</code>，使其满足 <code>ai×xi+bi×yi=gcd(ai,bi)</code></p>
<p>输入格式<br>第一行包含整数 n</p>
<p>接下来 n 行，每行包含两个整数 ai,bi</p>
<p>输出格式<br>输出共 n<br> 行，对于每组 ai,bi<br>，求出一组满足条件的 xi,yi<br>，每组结果占一行。</p>
<p>本题答案不唯一，输出任意满足条件的 xi,yi<br> 均可。</p>
<p>数据范围<br>1≤n≤105</p>
<p>1≤ai,bi≤2×109</p>
<p>输入样例：</p>
<blockquote>
<p>2</p>
<p>4 6<br>8 18</p>
<p>输出样例：</p>
<p>-1 1</p>
<p>-2 1</p>
<h1 id="数学前置知识"><a href="#数学前置知识" class="headerlink" title="数学前置知识"></a>数学前置知识</h1><p>a % b = a- a/b * b 注意 a/b是向下取整<br>$ax+by=gcd(a,b)$</p>
</blockquote>
<p>$gcd(a,b)=gcd(b,a\%b)$</p>
<p>将a=b，b=a%b带入ax+by得</p>
<p>$bx_1 + (a\%b)y_1 = bx_1 +(a-a/b <em>b)</em>y_1=bx_1+ay_1-(a/b)<br><em>b</em>y_1=ay_1+b(x_1-a/b*y_1)$</p>
<p>那么x=y1, y=x1-a/b*y1</p>
<h1 id="板子1"><a href="#板子1" class="headerlink" title="板子1"></a>板子1</h1><pre><code class="lang-java">static int[] x = new int[1];
static int[] y = new int[1];
public static int exgcd(int a,int b,int[] x,int[] y)&#123;
    if(b==0)&#123;
        //gcd(a,0) = a 
        // ax+by = a
        // x = 1, y =0
        x[0]=1;
        y[0]=0;
        return a;
    &#125;
    int d = exgcd(b,a%b,x,y);
    int temp = x[0];//更新y[0]时需要用到x[0]
    x[0] = y[0];
    y[0] = temp - a/b * y[0];
    return d;
&#125;
</code></pre>
<h1 id="板子2"><a href="#板子2" class="headerlink" title="板子2"></a>板子2</h1><h2 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h2><p>$ax+by=gcd(a,b)$</p>
<p>$gcd(a,b)=gcd(b,a\%b)$<br>把b带入ax+by中得b中，把a%b代入ax+by得a中可得</p>
<p>$(a\%b)x_1 + by_1 = (a-a/b <em>b)</em>x_1+by_1 =ax_1-a/b<em>b</em>x_1+b<em>y_1=a</em>x_1+b(y_1-a/b*x_1$)</p>
<p>这里得$x_1$就是x，所以x不用边，只需要改变y就好</p>
<pre><code class="lang-java">public static int exgcd(int a,int b,int[] x,int[] y)&#123;
    if(b==0)&#123;
        //gcd(a,0) = a 
        // ax+by = a
        // x = 1, y =0
        x[0]=1;
        y[0]=0;
        return a;
    &#125;
    int d = exgcd(b,a%b,y,x);
    y[0] -= a/b * x[0];
    return d;
&#125;
</code></pre>
]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Acwing 867 线性同余方程</title>
    <url>//post/Acwing-867-%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B.html</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定 <code>n</code> 组数据 ai,bi,mi，对于每组数求出一个 xi，使其满足 ai×xi≡bi(modmi)，如果无解则输出 impossible。</p>
<p>输入格式<br>第一行包含整数 n</p>
<p>接下来 n 行，每行包含一组数据 ai,bi,mi</p>
<p>输出格式<br>输出共 n<br> 行，每组数据输出一个整数表示一个满足条件的 xi，如果无解则输出 impossible。</p>
<p>每组数据结果占一行，结果可能不唯一，输出任意一个满足条件的结果均可。</p>
<p>输出答案必须在 int<br> 范围之内。</p>
<p>数据范围<br>1≤n≤105<br>,<br>1≤ai,bi,mi≤2×109<br>输入样例：<br>2<br>2 3 6<br>4 3 5<br>输出样例：<br>impossible<br>-3</p>
<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>需要用到扩展欧几里得定理<br><img src="../images/Acwing/867/describe.jpg" alt=""></p>
</blockquote>
<h1 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h1><pre><code class="lang-java">import java.io.*;
class Main&#123;
    static int[] x = new int[1];
    static int[] y = new int[1];
    public static int exgcd(int a,int b,int x[],int y[])&#123;
        if(b==0)&#123;
            x[0]=1;
            y[0]=0;
            return a;
        &#125;

            int d = exgcd(b,a%b,y,x);
            y[0] = y[0]- a/b * x[0];
            return d;
    &#125;
    public static void main(String[] args) throws IOException&#123;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int cnt = Integer.parseInt(br.readLine());
        while(cnt--&gt;0)&#123;
            int a,b,m;
            String[] content = br.readLine().split(&quot; &quot;);
            a = Integer.parseInt(content[0]);
            b = Integer.parseInt(content[1]);
            m = Integer.parseInt(content[2]);
            int d = exgcd(a,m,x,y);
            if(b % d!=0)
                System.out.println(&quot;impossible&quot;);
            else 

                System.out.printf(&quot;%d\n&quot;,(long)(b/d)*x[0] % m);
                /* 上一行的解释
                    我们需要找到 ax =b (mod m)
                    ax = b
                       = my + b
                    ax-my = b
                    ax+my = b，将y放大-1倍
                    由欧几里得定理可得，ax+my = gcd(a,m) 当前仅当 gcd(a,m)|m ,也就是m是gcd(a,m)的倍数，m%gcd(a,m)==0
                    令gcd(a,m)=d
                    那么 ax+my = d;①
                         ax+my = b;②
                         ①-&gt;②，要将①扩大b/d倍所以
                         (b/d)(ax+my)=d*(b/d)
                         (b/d)ax + (b/d)my = b
                         a(b/d)x + (b/d)my = b
                         ax                = b
                         x=(b/d)x，所以只需要将x放大b/d倍即可，两数相乘可能会爆int，所以转换成long类型

                */
        &#125;
        br.close();
        return;
    &#125;
&#125;
</code></pre>
]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>BombLab</title>
    <url>//post/BombLab.html</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>6关卡，每个关卡需要输入相应的内容，通过逆向工程来获取对应关卡的通过条件</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>需要用到gdb调试器</p>
<pre><code class="lang-shell">apt-get install gdb
</code></pre>
<p>系统: Ubuntu 22.04</p>
<p>本实验会用到的gdb调试器的指令如下<br>&gt;</p>
<blockquote>
<p>r或者 run或者run filename         运行程序,run filename就是用filename中的内容作为输入<br>b *address            在某个地址设置断点<br>d或delete                删除所有断点<br>d 断点号                删除指定断点<br>info b                    查看所有断点信息<br>x/参数 地址            查看指针解引用后的值，参数可以是s(字符串),d(十进制),x(十六进制),地址若是寄存器需要加上$<br>info register 或info r    查看所有寄存器的值<br>disas functionName    生成functionName的汇编代码<br>stepi 执行一个汇编指令<br>layout asm 窗口分为两部分，上面是将要执行的汇编代码，下面输入gdb调试命令</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="寄存器的东西"><a href="#寄存器的东西" class="headerlink" title="寄存器的东西"></a>寄存器的东西</h3><p>这里面有一些寄存器的知识，了解即可<br>%rsp (register stack pointer) 栈指针<br>%esi:通用寄存器，长应用于指针或索引<br>%rax:<strong>存储函数的返回值</strong>,存储临时数据,系统调用号<br>%r12,%rbx:通用寄存器,参数传递的<br>%rbp(register base pointer):通常是当作基址指针来用</p>
</blockquote>
<h3 id="指令相关"><a href="#指令相关" class="headerlink" title="指令相关"></a>指令相关</h3><h3 id="test-destination-source"><a href="#test-destination-source" class="headerlink" title="test destination,source"></a>test destination,source</h3><p>destination和source可以是寄存器,内存地址,立即数.对两个操作数进行<strong>按位逻辑与</strong>操作,会更新下面寄存器的状态</p>
<ul>
<li><strong>Zero flag(ZF):若结果为0，则设置为1,反之为0，这个若为1表明两个操作数相等或者某个操作数等于0</strong><ul>
<li>Sign flag (SF):若结果最高位为1,则为1,反之为0</li>
<li>Overflow flag(OF):有符号数溢出则为1,反之为0</li>
<li>Carry flag(CF):无符号数溢出则为1,反之为0</li>
<li>Parity flag(PF):结果的低8位包含奇数个1则为1，反之为0</li>
</ul>
</li>
</ul>
<h3 id="je-destination"><a href="#je-destination" class="headerlink" title="je destination"></a>je destination</h3><p>若ZF为1则跳转到destination处</p>
<h1 id="开干"><a href="#开干" class="headerlink" title="开干"></a>开干</h1><h2 id="Phase-1-字符串比较"><a href="#Phase-1-字符串比较" class="headerlink" title="Phase 1 字符串比较"></a>Phase 1 字符串比较</h2><p>终端输入gdb bomb<br>在输入disas phase_1,结果如下</p>
<pre><code class="lang-assembly">   0x0000000000400ee0 &lt;+0&gt;:    sub    $0x8,%rsp // 把栈指针减少8，给局部变量提供空间
   0x0000000000400ee4 &lt;+4&gt;:    mov    $0x402400,%esi // 将0x402400存储到%esi中，这个有可能是存放我们输入的值或者存放内置字符串的
   0x0000000000400ee9 &lt;+9&gt;:    call   0x401338 &lt;strings_not_equal&gt;//调用了函数strings_not_equal,估计是判断输入的字符串和内置字符串是否相同，相同返回0
   0x0000000000400eee &lt;+14&gt;:    test   %eax,%eax  //判断%eax(函数strings_not_equal的返回值)是否为0，若为0则ZF=1
   0x0000000000400ef0 &lt;+16&gt;:    je     0x400ef7 &lt;phase_1+23&gt; // ZF为1就跳转，反之顺序执行
   0x0000000000400ef2 &lt;+18&gt;:    call   0x40143a &lt;explode_bomb&gt;//拆弹失败，炸弹爆炸
   0x0000000000400ef7 &lt;+23&gt;:    add    $0x8,%rsp //回收栈指针
   0x0000000000400efb &lt;+27&gt;:    ret
</code></pre>
<p>把断点打到0x0000000000400ee9的位置,开始run,随便输点东西</p>
<pre><code class="lang-assembly">b *0x400ee9
run
x/s 0x402400
</code></pre>
<p>结果发现0x402400就是我们想要的东西:Border relations with Canada have never been better.<br>那么我们输入的东西到哪里去了?断点打到strings_not_equal里面,查看strings_not_equal汇编代码（在gdb中输入disas strings_not_equal）</p>
<pre><code class="lang-asm">Dump of assembler code for function strings_not_equal:
   0x0000000000401338 &lt;+0&gt;:    push   %r12
   0x000000000040133a &lt;+2&gt;:    push   %rbp 
   0x000000000040133b &lt;+3&gt;:    push   %rbx
   0x000000000040133c &lt;+4&gt;:    mov    %rdi,%rbx
   0x000000000040133f &lt;+7&gt;:    mov    %rsi,%rbp
   0x0000000000401342 &lt;+10&gt;:    call   0x40131b &lt;string_length&gt;
   0x0000000000401347 &lt;+15&gt;:    mov    %eax,%r12d
   0x000000000040134a &lt;+18&gt;:    mov    %rbp,%rdi
   0x000000000040134d &lt;+21&gt;:    call   0x40131b &lt;string_length&gt;
   0x0000000000401352 &lt;+26&gt;:    mov    $0x1,%edx
   0x0000000000401357 &lt;+31&gt;:    cmp    %eax,%r12d
   0x000000000040135a &lt;+34&gt;:    jne    0x40139b &lt;strings_not_equal+99&gt;
   0x000000000040135c &lt;+36&gt;:    movzbl (%rbx),%eax
   0x000000000040135f &lt;+39&gt;:    test   %al,%al
   0x0000000000401361 &lt;+41&gt;:    je     0x401388 &lt;strings_not_equal+80&gt;
   0x0000000000401363 &lt;+43&gt;:    cmp    0x0(%rbp),%al
   0x0000000000401366 &lt;+46&gt;:    je     0x401372 &lt;strings_not_equal+58&gt;
   0x0000000000401368 &lt;+48&gt;:    jmp    0x40138f &lt;strings_not_equal+87&gt;
   0x000000000040136a &lt;+50&gt;:    cmp    0x0(%rbp),%al
   0x000000000040136d &lt;+53&gt;:    nopl   (%rax)
   0x0000000000401370 &lt;+56&gt;:    jne    0x401396 &lt;strings_not_equal+94&gt;
   0x0000000000401372 &lt;+58&gt;:    add    $0x1,%rbx
</code></pre>
<p>断点打到0x401338的位置，运行程序<br>不停的stepi，知道运行到了第一次调用string_length函数,字符串一般来说是需要一个基址的,所以找能充当基指指针的寄存器,下面是试探过程</p>
<pre><code class="lang-asm">x/s $rbp //这个是内置字符串
x/s $rbx //这个是我们输入的字符串
</code></pre>
<h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><blockquote>
<p>Border relations with Canada have never been better.</p>
</blockquote>
<p>进入strings_not_equal函数才能看到我们输入的字符串是保存在%rbx这个寄存器当中的</p>
<h2 id="phase-2-循环"><a href="#phase-2-循环" class="headerlink" title="phase_2 循环"></a>phase_2 循环</h2><p>disas phase_2得到如下代码(我分成了两部分,这个是前面一部分)</p>
<pre><code class="lang-asm">   0x0000000000400efc &lt;+0&gt;:    push   %rbp  
   0x0000000000400efd &lt;+1&gt;:    push   %rbx 
   0x0000000000400efe &lt;+2&gt;:    sub    $0x28,%rsp
   0x0000000000400f02 &lt;+6&gt;:    mov    %rsp,%rsi
   0x0000000000400f05 &lt;+9&gt;:    call   0x40145c &lt;read_six_numbers&gt; //这里从名字可以知道要输入6个数字，那么是整形还是浮点数呢?这里先输入6个整形试试
</code></pre>
<p>输入stepi进入到read_six_numbers函数中，disas read_six_numbers得到下面的代码</p>
<pre><code class="lang-asm">Dump of assembler code for function read_six_numbers:
   0x000000000040145c &lt;+0&gt;:    sub    $0x18,%rsp  // 这个不用管
   0x0000000000401460 &lt;+4&gt;:    mov    %rsi,%rdx
   0x0000000000401463 &lt;+7&gt;:    lea    0x4(%rsi),%rcx
   0x0000000000401467 &lt;+11&gt;:    lea    0x14(%rsi),%rax
   0x000000000040146b &lt;+15&gt;:    mov    %rax,0x8(%rsp)
   0x0000000000401470 &lt;+20&gt;:    lea    0x10(%rsi),%rax
   0x0000000000401474 &lt;+24&gt;:    mov    %rax,(%rsp)
   0x0000000000401478 &lt;+28&gt;:    lea    0xc(%rsi),%r9
   0x000000000040147c &lt;+32&gt;:    lea    0x8(%rsi),%r8
   0x0000000000401480 &lt;+36&gt;:    mov    $0x4025c3,%esi   //看看%esi寄存器的内容
   0x0000000000401485 &lt;+41&gt;:    mov    $0x0,%eax
   0x000000000040148a &lt;+46&gt;:    call   0x400bf0 &lt;__isoc99_sscanf@plt&gt;
   0x000000000040148f &lt;+51&gt;:    cmp    $0x5,%eax
   0x0000000000401492 &lt;+54&gt;:    jg     0x401499 &lt;read_six_numbers+61&gt;
   0x0000000000401494 &lt;+56&gt;:    call   0x40143a &lt;explode_bomb&gt;
   0x0000000000401499 &lt;+61&gt;:    add    $0x18,%rsp
   0x000000000040149d &lt;+65&gt;:    ret
</code></pre>
<p>注意这一行<code>mov    $0x4025c3,%esi</code>,因为字符串是不可变的，地址固定死了，所以找立即数<br>esi寄存器的内容为<br><img src="../images/bomb_phrase2.jpg" alt="在这里插入图片描述"><br>六个整形数据猜测是对的，我们输入1 2 3 4 5 6试试<br>继续阅读phase_2后部分的代码</p>
<pre><code class="lang-asm">0x0000000000400f05 &lt;+9&gt;:    call   0x40145c &lt;read_six_numbers&gt;
   0x0000000000400f0a &lt;+14&gt;:    cmpl   $0x1,(%rsp) // (%rsp)=*rsp 就是我们输入的第一个数字1
   0x0000000000400f0e &lt;+18&gt;:    je     0x400f30 &lt;phase_2+52&gt; // 判断是否相等，相等就跳转
   0x0000000000400f10 &lt;+20&gt;:    call   0x40143a &lt;explode_bomb&gt; //否则就炸了
   0x0000000000400f15 &lt;+25&gt;:    jmp    0x400f30 &lt;phase_2+52&gt;
   0x0000000000400f17 &lt;+27&gt;:    mov    -0x4(%rbx),%eax // eax保存的是我们输入的第一个数，把rbx存放的值减4
   0x0000000000400f1a &lt;+30&gt;:    add    %eax,%eax  // eax*=2
   0x0000000000400f1c &lt;+32&gt;:    cmp    %eax,(%rbx) // 比较eax的值和rbx(就是第二个值)是否相等
   0x0000000000400f1e &lt;+34&gt;:    je     0x400f25 &lt;phase_2+41&gt; // 相等就跳转
   0x0000000000400f20 &lt;+36&gt;:    call   0x40143a &lt;explode_bomb&gt; //反之爆炸
   0x0000000000400f25 &lt;+41&gt;:    add    $0x4,%rbx // rbx 保存的是第三个值
   0x0000000000400f29 &lt;+45&gt;:    cmp    %rbp,%rbx // 看看是否遍历完了
   0x0000000000400f2c &lt;+48&gt;:    jne    0x400f17 &lt;phase_2+27&gt;
   0x0000000000400f2e &lt;+50&gt;:    jmp    0x400f3c &lt;phase_2+64&gt;
   0x0000000000400f30 &lt;+52&gt;:    lea    0x4(%rsp),%rbx // 0x4(%rsp)=我们输入的第二个数,加4的原因是因为int类型是4个字节
   0x0000000000400f35 &lt;+57&gt;:    lea    0x18(%rsp),%rbp// 0x18转换为十进制数为24,也就是第6个数字后面的第一个存储单元
   0x0000000000400f3a &lt;+62&gt;:    jmp    0x400f17 &lt;phase_2+27&gt;
   0x0000000000400f3c &lt;+64&gt;:    add    $0x28,%rsp
</code></pre>
<p>意思如下<br>程序开始时,将 <code>(%rsp)</code> 的值与立即数<code>$0x1</code>进行比较，所以第一个输入数必须为1，跳转至400f30，用lea指令分别加载<code>%rsp+4</code>和<code>%rsp+24</code>对应的地址到%rbx和%rbp，因为int型数据占4个字节，所以%rbx和%rbp分别存放第2个输入数的地址和第6个输入数的后一块的地址<br>后跳转至400f17，此时<code>(%rbx-4)</code>对应的值即<code>(%rsp)</code>对应的值，将其存放值<code>%eax</code>中，将该值*2后与<code>(%rbx)</code>对应的值（即第二个输入值）进行比较，即后一个数是前一个数的2倍，所以第二个输入值必须为2，后跳转至400f25，得到<code>%rbx=%rbx+4</code>，与<code>%rbp</code>进行比较（<code>%rbx</code>对应的值(地址)是否为<code>%rbp</code>对应的值(地址)），若不相等则又跳转至400f17重复操作，若相等，则跳转至400f3c，结束循环，可知这是一个循环操作，看是否比较完6个数。</p>
<p>循环中寄存器对应的值为:<br>|%rbx|%rbp|%eax|<br>|—|—|—|<br>|%rsp+4| %rsp+24| (%rsp)<em>2=2<br>|%rsp+8| | (%rsp)</em>2=4<br>|%rsp+12| | (%rsp)<em>2=8<br>|%rsp+16| | (%rsp)</em>2=16<br>|%rsp+20| | (%rsp)*2=32<br>|%rsp+24||</p>
<p>c代码如下</p>
<pre><code class="lang-c">int main()&#123;
    int[] array = new int[6];
    for(int i=1;i&lt;6;i++)
        array[i]=array[i-1]*2;
    return 0;
&#125;
</code></pre>
<h3 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h3><blockquote>
<p>1 2 4 8 16 32</p>
</blockquote>
<p>输入的第一个数时保存在(%rsp)中</p>
<h2 id="phase-3-分支语句"><a href="#phase-3-分支语句" class="headerlink" title="phase_3 分支语句"></a>phase_3 分支语句</h2><p>对汇编代码进行分析</p>
<pre><code class="lang-asm">Dump of assembler code for function phase_3:
   0x0000000000400f43 &lt;+0&gt;:    sub    $0x18,%rsp
   0x0000000000400f47 &lt;+4&gt;:    lea    0xc(%rsp),%rcx //这个可能是存储第二个数的
   0x0000000000400f4c &lt;+9&gt;:    lea    0x8(%rsp),%rdx//这个可能是存储第一个数的
   0x0000000000400f51 &lt;+14&gt;:    mov    $0x4025cf,%esi  //出现立即数了,后面调用了scanf，这里应该是初始化的，在gdb 中用x/s $esi 可以得到 %d %d
   0x0000000000400f56 &lt;+19&gt;:    mov    $0x0,%eax
   0x0000000000400f5b &lt;+24&gt;:    call   0x400bf0 &lt;__isoc99_sscanf@plt&gt;
   0x0000000000400f60 &lt;+29&gt;:    cmp    $0x1,%eax//%eax存储函数的返回值的，scanf的函数返回值就是输入数据的个数
   0x0000000000400f63 &lt;+32&gt;:    jg     0x400f6a &lt;phase_3+39&gt;//若大于1就跳转
   0x0000000000400f65 &lt;+34&gt;:    call   0x40143a &lt;explode_bomb&gt;//否则就爆炸
   0x0000000000400f6a &lt;+39&gt;:    cmpl   $0x7,0x8(%rsp)
   0x0000000000400f6f &lt;+44&gt;:    ja     0x400fad &lt;phase_3+106&gt;//无符号大于则跳转，跳转就爆炸了，所以第一个数必须小于7，可以等于,但是不能是负数
   0x0000000000400f71 &lt;+46&gt;:    mov    0x8(%rsp),%eax//%eax存储的是输入的第一个数
   0x0000000000400f75 &lt;+50&gt;:    jmp    *0x402470(,%rax,8) //*0x402470 = 124,通过x/d 0x402470得到, rax是64位的，eax是32位的，就是说eax是rax的低32位，这里应该是124+%rax*8(%rax就是我们输入的第一个数)来实现跳转。
   0x0000000000400f7c &lt;+57&gt;:    mov    $0xcf,%eax
   0x0000000000400f81 &lt;+62&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;
   0x0000000000400f83 &lt;+64&gt;:    mov    $0x2c3,%eax
   0x0000000000400f88 &lt;+69&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;
   0x0000000000400f8a &lt;+71&gt;:    mov    $0x100,%eax
   0x0000000000400f8f &lt;+76&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;
   0x0000000000400f91 &lt;+78&gt;:    mov    $0x185,%eax
   0x0000000000400f96 &lt;+83&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;
   0x0000000000400f98 &lt;+85&gt;:    mov    $0xce,%eax
--Type &lt;RET&gt; for more, q to quit, c to continue without paging--
   0x0000000000400f9d &lt;+90&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;
   0x0000000000400f9f &lt;+92&gt;:    mov    $0x2aa,%eax
   0x0000000000400fa4 &lt;+97&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;
   0x0000000000400fa6 &lt;+99&gt;:    mov    $0x147,%eax
   0x0000000000400fab &lt;+104&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;
   0x0000000000400fad &lt;+106&gt;:    call   0x40143a &lt;explode_bomb&gt;
   0x0000000000400fb2 &lt;+111&gt;:    mov    $0x0,%eax
   0x0000000000400fb7 &lt;+116&gt;:    jmp    0x400fbe &lt;phase_3+123&gt;
   0x0000000000400fb9 &lt;+118&gt;:    mov    $0x137,%eax
   0x0000000000400fbe &lt;+123&gt;:    cmp    0xc(%rsp),%eax
   0x0000000000400fc2 &lt;+127&gt;:    je     0x400fc9 &lt;phase_3+134&gt;
   0x0000000000400fc4 &lt;+129&gt;:    call   0x40143a &lt;explode_bomb&gt;
   0x0000000000400fc9 &lt;+134&gt;:    add    $0x18,%rsp
   0x0000000000400fcd &lt;+138&gt;:    ret    
End of assembler dump.
</code></pre>
<p>第一个数的范围是在[0,7]之间，开始试探<br>n1=0,跳转到0x400f7c,若n2!=0xcf,则爆炸<br>n1=1,跳转到0x400fb9,若n2!=0x137,则爆炸<br>n1=2,跳转到0x400f83,若n2!=0x2c3,则爆炸<br>n1=3,跳转到0x400f8a,若n2!=0x100,则爆炸<br>n1=4,跳转到0x400f91,若n2!=0x185,则爆炸<br>n1=5,跳转到0x400f98,若n2!=0xce,则爆炸<br>n1=6,跳转到0x400f9f,若n2!=0x2aa,则爆炸<br>n1=7,跳转到0x400fa6,若n2!=0x147,则爆炸</p>
<p>c代码</p>
<pre><code class="lang-c">void phase_3(char* input)&#123;
    //0x8(%rsp) 0xc(%rsp)
    int n1,n2;
    //res存放返回输入数据的个数
    int res = sscanf(input,&quot;%d %d&quot;,&amp;n1,&amp;n2);
    if(res&lt;=1)
        explode_bomb();
    switch(n1)&#123;
        case 0:
        if(n2!=0xcf)
            explode_bomb();
        break;
        case 1:
        if(n2!=0x137)
            explode_bomb();
        break;
        case 2:
        if(n2!=0x2c3)
            explode_bomb();
        break;
        case 3:
        if(n2!=0x100)
            explode_bomb();
        break;
        case 4:
        if(n2!=0x185)
            explode_bomb();
        break;
        case 5:
        if(n2!=0xce)
            explode_bomb();
        break;
        case 6:
        if(n2!=0x2aa)
            explode_bomb();
        break;
        case 7:
        if(n2!=0x147)
            explode_bomb();
        break;
    &#125;
&#125;
</code></pre>
<h3 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h3><ul>
<li>0 207</li>
<li>1 311</li>
<li>2 707</li>
<li>3 256</li>
<li>4 389</li>
<li>5 206</li>
<li>6 682</li>
<li>7 327</li>
</ul>
<h2 id="phase-4-递归"><a href="#phase-4-递归" class="headerlink" title="phase_4 递归"></a>phase_4 递归</h2><p>分析汇编代码</p>
<pre><code class="lang-asm">Dump of assembler code for function phase_4:
   0x000000000040100c &lt;+0&gt;:    sub    $0x18,%rsp    # 给局部变量腾出空间
   0x0000000000401010 &lt;+4&gt;:    lea    0xc(%rsp),%rcx   # 我们输入的第二个数
   0x0000000000401015 &lt;+9&gt;:    lea    0x8(%rsp),%rdx    # 我们输入的第一个数
   0x000000000040101a &lt;+14&gt;:    mov    $0x4025cf,%esi    # 通过x/s 0x4025cf 可以得到是格式化字符串&quot;%d %d&quot;
   0x000000000040101f &lt;+19&gt;:    mov    $0x0,%eax        # 这个就不说了
   0x0000000000401024 &lt;+24&gt;:    call   0x400bf0 &lt;__isoc99_sscanf@plt&gt; # 调用了scanf函数
   0x0000000000401029 &lt;+29&gt;:    cmp    $0x2,%eax    # 如果输入的数字个数不等于2就爆炸了
   0x000000000040102c &lt;+32&gt;:    jne    0x401035 &lt;phase_4+41&gt;
   0x000000000040102e &lt;+34&gt;:    cmpl   $0xe,0x8(%rsp)  # 比较第一个数与14的大小，若小于就跳转，若大于就爆炸，第一个数的范围[0,14]
   0x0000000000401033 &lt;+39&gt;:    jbe    0x40103a &lt;phase_4+46&gt;
   0x0000000000401035 &lt;+41&gt;:    call   0x40143a &lt;explode_bomb&gt;
   0x000000000040103a &lt;+46&gt;:    mov    $0xe,%edx       
   0x000000000040103f &lt;+51&gt;:    mov    $0x0,%esi
   0x0000000000401044 &lt;+56&gt;:    mov    0x8(%rsp),%edi
   0x0000000000401048 &lt;+60&gt;:    call   0x400fce &lt;func4&gt; #调用func4 应该是需要%edx %esi %edi这几个参数
   0x000000000040104d &lt;+65&gt;:    test   %eax,%eax    # 按位逻辑与操作
   0x000000000040104f &lt;+67&gt;:    jne    0x401058 &lt;phase_4+76&gt; # 如果%eax不等于0,则跳转至爆炸
   0x0000000000401051 &lt;+69&gt;:    cmpl   $0x0,0xc(%rsp)    #比较第二个数与0的大小关系
   0x0000000000401056 &lt;+74&gt;:    je     0x40105d &lt;phase_4+81&gt; #相等就跳转结尾
   0x0000000000401058 &lt;+76&gt;:    call   0x40143a &lt;explode_bomb&gt; #不相等就爆炸
   0x000000000040105d &lt;+81&gt;:    add    $0x18,%rsp
   0x0000000000401061 &lt;+85&gt;:    ret
</code></pre>
<p>接下来看看func4干了什么</p>
<pre><code class="lang-asm">Dump of assembler code for function func4:
   0x0000000000400fce &lt;+0&gt;:    sub    $0x8,%rsp   # 为局部变量腾出空间
   0x0000000000400fd2 &lt;+4&gt;:    mov    %edx,%eax   # 0xe
   0x0000000000400fd4 &lt;+6&gt;:    sub    %esi,%eax   # 0xe-0x0
   0x0000000000400fd6 &lt;+8&gt;:    mov    %eax,%ecx   # ecx = 0xe
   0x0000000000400fd8 &lt;+10&gt;:    shr    $0x1f,%ecx  # %ecx的值逻辑右移31位=1110&gt;&gt;31=14/2^31 =0
   0x0000000000400fdb &lt;+13&gt;:    add    %ecx,%eax   # ecx = ecx + eax = 0 + e
   0x0000000000400fdd &lt;+15&gt;:    sar    %eax       # 算数右移1位 %eax = %eax /2 = 0xe/2 = 7 
   0x0000000000400fdf &lt;+17&gt;:    lea    (%rax,%rsi,1),%ecx # %eax是%rax的低32位，%esi是%rsi的低32位  %rax + %rsi * 1 = 7 + 0=7 %ecx=7
   0x0000000000400fe2 &lt;+20&gt;:    cmp    %edi,%ecx  #  %edi保存的是输入的第一个数字 %ecx = 7 
   0x0000000000400fe4 &lt;+22&gt;:    jle    0x400ff2 &lt;func4+36&gt;
   0x0000000000400fe6 &lt;+24&gt;:    lea    -0x1(%rcx),%edx  # 7 -1 =&gt;edx=6
   0x0000000000400fe9 &lt;+27&gt;:    call   0x400fce &lt;func4&gt; # 递归调用
   0x0000000000400fee &lt;+32&gt;:    add    %eax,%eax    # eax*=2
   0x0000000000400ff0 &lt;+34&gt;:    jmp    0x401007 &lt;func4+57&gt;  # 出口
   0x0000000000400ff2 &lt;+36&gt;:    mov    $0x0,%eax  # %eax = 0
   0x0000000000400ff7 &lt;+41&gt;:    cmp    %edi,%ecx  # n1, 7 
   0x0000000000400ff9 &lt;+43&gt;:    jge    0x401007 &lt;func4+57&gt; # n1&gt;=7跳转到func7 出口
   0x0000000000400ffb &lt;+45&gt;:    lea    0x1(%rcx),%esi  # ecx是rcx的低32位     0x1+7=&gt;esi=8 
   0x0000000000400ffe &lt;+48&gt;:    call   0x400fce &lt;func4&gt;      # 跳转
   0x0000000000401003 &lt;+53&gt;:    lea    0x1(%rax,%rax,1),%eax # 0x1 + func4+func4=&gt;eax
   0x0000000000401007 &lt;+57&gt;:    add    $0x8,%rsp
   0x000000000040100b &lt;+61&gt;:    ret
</code></pre>
<p>看看这个</p>
<pre><code class="lang-asm"> 0x0000000000401051 &lt;+69&gt;:    cmpl   $0x0,0xc(%rsp)    #比较第二个数与0的大小关系
   0x0000000000401056 &lt;+74&gt;:    je     0x40105d &lt;phase_4+81&gt; #相等就跳转结尾

 0x000000000040104d &lt;+65&gt;:    test   %eax,%eax    # 按位逻辑与操作
   0x000000000040104f &lt;+67&gt;:    jne    0x401058 &lt;phase_4+76&gt; # 如果%eax不等于0,则跳转至爆炸
</code></pre>
<p>所以n2必须等于0，n1的值要让函数func4的返回值为4，且n1∈[0,14]</p>
<pre><code class="lang-c">//a: %edi b:%esi c:%edx d: %ecx e:%eax
int func4(int a,int b,int c)
&#123;//a in %rdi,b in %rsi,c in %rdx,e in %rax,d in %ecx
 //y的初始值为0，z的初始值为14
  int t=c-b;
  int d=e&gt;&gt;31;
  e=(e+d)&gt;&gt;1;
  d=e+b;
  if(k&gt;a)
  &#123;
    c=d-1;
    func4(a,b,c);
    e*=2;
    return e;
  &#125;
  else
   &#123;
     e=0;
     if(d&lt;a)
     &#123;
        b=da+1;
        func4(a,b,c);
        e=2*e+1;
        return e;
     &#125;
     else
         return e;   //要使返回值e（%eax）为0，其中一个答案为a=d=7
   &#125;
&#125;
</code></pre>
<p>分析可得一个答案 7 0<br>其余的挨个带进去试</p>
<h3 id="答案-3"><a href="#答案-3" class="headerlink" title="答案"></a>答案</h3><blockquote>
<p>7 0</p>
</blockquote>
<h2 id="phase-5-指针-字符串比较"><a href="#phase-5-指针-字符串比较" class="headerlink" title="phase_5 指针 字符串比较"></a>phase_5 指针 字符串比较</h2><p>phase_5的汇编代码</p>
<pre><code class="lang-asm">Dump of assembler code for function phase_5:
   0x0000000000401062 &lt;+0&gt;:    push   %rbx
   0x0000000000401063 &lt;+1&gt;:    sub    $0x20,%rsp
   0x0000000000401067 &lt;+5&gt;:    mov    %rdi,%rbx   #%rbx存放我们输入的字符串地址
   0x000000000040106a &lt;+8&gt;:    mov    %fs:0x28,%rax    # 栈破坏检测,csapp P199页(金丝雀值),即在栈帧的任何局部缓冲区与栈状态之间存储一个值,在程序返回前检查该值，若该值发生变化，程序提前终止
   0x0000000000401073 &lt;+17&gt;:    mov    %rax,0x18(%rsp) 
   0x0000000000401078 &lt;+22&gt;:    xor    %eax,%eax        # 异或清零
   0x000000000040107a &lt;+24&gt;:    call   0x40131b &lt;string_length&gt; 
   0x000000000040107f &lt;+29&gt;:    cmp    $0x6,%eax
   0x0000000000401082 &lt;+32&gt;:    je     0x4010d2 &lt;phase_5+112&gt; # 输入的字符个数必须等于6，否则爆炸
   0x0000000000401084 &lt;+34&gt;:    call   0x40143a &lt;explode_bomb&gt;
   0x0000000000401089 &lt;+39&gt;:    jmp    0x4010d2 &lt;phase_5+112&gt; 
   0x000000000040108b &lt;+41&gt;:    movzbl (%rbx,%rax,1),%ecx # rbx就是我们输入的字符串地址 翻译成语句:%ecx = %rbx + %rax*1 = %rbx+0*1=%rbx=我们输入的第一个字符
   0x000000000040108f &lt;+45&gt;:    mov    %cl,(%rsp)    # %cl是%ecx的低8位 
   0x0000000000401092 &lt;+48&gt;:    mov    (%rsp),%rdx   # %rdx保存我们输入的一位字符
   0x0000000000401096 &lt;+52&gt;:    and    $0xf,%edx     # edx是rdx的低32位，取出低4位
   0x0000000000401099 &lt;+55&gt;:    movzbl 0x4024b0(%rdx),%edx # 0x40240b0是字符串&quot;maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?&quot;的基址，设该字符串为str
                               # edx = str[rdx]
   0x00000000004010a0 &lt;+62&gt;:    mov    %dl,0x10(%rsp,%rax,1) # %dl是rdx的低4位
   0x00000000004010a4 &lt;+66&gt;:    add    $0x1,%rax      # 加一
   0x00000000004010a8 &lt;+70&gt;:    cmp    $0x6,%rax      # 和6相比
   0x00000000004010ac &lt;+74&gt;:    jne    0x40108b &lt;phase_5+41&gt; # 不等于6跳转
   0x00000000004010ae &lt;+76&gt;:    movb   $0x0,0x16(%rsp)
   0x00000000004010b3 &lt;+81&gt;:    mov    $0x40245e,%esi  #0x40245e是字符串flyers的地址，用立即数来表示的，应该是内置的
   0x00000000004010b8 &lt;+86&gt;:    lea    0x10(%rsp),%rdi # rdi是aduier的地址 ，结合下面的strings_not_equal函数来看，应该是要把我们输入的东西和flyers比较，由于我们输入的是abcdef,a的ASCII码是97，低4位是0001，所以取得是索引为1的,接下来就是要改变我们输入的东西，让其在str中截取得到的字符串为flyers即可
   0x00000000004010bd &lt;+91&gt;:    call   0x401338 &lt;strings_not_equal&gt;
   0x00000000004010c2 &lt;+96&gt;:    test   %eax,%eax 
   0x00000000004010c4 &lt;+98&gt;:    je     0x4010d9 &lt;phase_5+119&gt;  #相等跳转
   0x00000000004010c6 &lt;+100&gt;:    call   0x40143a &lt;explode_bomb&gt; #不相等就炸
   0x00000000004010cb &lt;+105&gt;:    nopl   0x0(%rax,%rax,1)
   0x00000000004010d0 &lt;+110&gt;:    jmp    0x4010d9 &lt;phase_5+119&gt;
   0x00000000004010d2 &lt;+112&gt;:    mov    $0x0,%eax  # %eax清零
   0x00000000004010d7 &lt;+117&gt;:    jmp    0x40108b &lt;phase_5+41&gt; 
   0x00000000004010d9 &lt;+119&gt;:    mov    0x18(%rsp),%rax
   0x00000000004010de &lt;+124&gt;:    xor    %fs:0x28,%rax
   0x00000000004010e7 &lt;+133&gt;:    je     0x4010ee &lt;phase_5+140&gt;
   0x00000000004010e9 &lt;+135&gt;:    call   0x400b30 &lt;__stack_chk_fail@plt&gt;
   0x00000000004010ee &lt;+140&gt;:    add    $0x20,%rsp
   0x00000000004010f2 &lt;+144&gt;:    pop    %rbx
   0x00000000004010f3 &lt;+145&gt;:    ret
</code></pre>
<p>所以过关条件就是通过我们输入的六个字符的ASCII码的低4位作为索引,取切maduier那一大串的东西且返回的结果必须是flyers<br>下面是flyers中各字符在maduier中的位置<br>|字符|位置|<br>|—|—<br>|f|9<br>|I|15<br>|y|14<br>|e|5<br>|r|6<br>|s|7</p>
<p>找到六个字符，他们的ASCII码值的低4位要是表格中的(从上到下，依次符合即可)<br>接下来就是找字符</p>
<h4 id="答案-4"><a href="#答案-4" class="headerlink" title="答案"></a>答案</h4><p>不唯一</p>
<blockquote>
<p>9?&gt;uvw<br>IONEFG</p>
</blockquote>
<h3 id="phase6-链表"><a href="#phase6-链表" class="headerlink" title="phase6 链表"></a>phase6 链表</h3><p>这个我确实是很蒙，我尽力记录清楚,过段时间我再回顾一下，我画点图来帮助理解<br>第一部分</p>
<pre><code class="lang-asm">Dump of assembler code for function phase_6:
   0x00000000004010f4 &lt;+0&gt;:    push   %r14
   0x00000000004010f6 &lt;+2&gt;:    push   %r13
   0x00000000004010f8 &lt;+4&gt;:    push   %r12
   0x00000000004010fa &lt;+6&gt;:    push   %rbp
   0x00000000004010fb &lt;+7&gt;:    push   %rbx
   0x00000000004010fc &lt;+8&gt;:    sub    $0x50,%rsp
   0x0000000000401100 &lt;+12&gt;:    mov    %rsp,%r13
   0x0000000000401103 &lt;+15&gt;:    mov    %rsp,%rsi
   0x0000000000401106 &lt;+18&gt;:    call   0x40145c &lt;read_six_numbers&gt;
   0x000000000040110b &lt;+23&gt;:    mov    %rsp,%r14 # 保存我们输入的数的
   0x000000000040110e &lt;+26&gt;:    mov    $0x0,%r12d # 
   0x0000000000401114 &lt;+32&gt;:    mov    %r13,%rbp  
   0x0000000000401117 &lt;+35&gt;:    mov    0x0(%r13),%eax # %eax = nums[0]
   0x000000000040111b &lt;+39&gt;:    sub    $0x1,%eax   # %eax-=1
   0x000000000040111e &lt;+42&gt;:    cmp    $0x5,%eax  # eax-1&lt;=5
   0x0000000000401121 &lt;+45&gt;:    jbe    0x401128 &lt;phase_6+52&gt;
   0x0000000000401123 &lt;+47&gt;:    call   0x40143a &lt;explode_bomb&gt;

   0x0000000000401128 &lt;+52&gt;:    add    $0x1,%r12d # r12d=1
   0x000000000040112c &lt;+56&gt;:    cmp    $0x6,%r12d 
   0x0000000000401130 &lt;+60&gt;:    je     0x401153 &lt;phase_6+95&gt;  
   0x0000000000401132 &lt;+62&gt;:    mov    %r12d,%ebx # %ebx = 1  退出循环的条件是遍历完6个数字

   0x0000000000401135 &lt;+65&gt;:    movslq %ebx,%rax  # rax = 1
   0x0000000000401138 &lt;+68&gt;:    mov    (%rsp,%rax,4),%eax  # eax =  2 拿到下一个元素给eax  4是int类型的4个字节
   0x000000000040113b &lt;+71&gt;:    cmp    %eax,0x0(%rbp)  # nums[i] !=nums[0]
   0x000000000040113e &lt;+74&gt;:    jne    0x401145 &lt;phase_6+81&gt;
   0x0000000000401140 &lt;+76&gt;:    call   0x40143a &lt;explode_bomb&gt; 
   0x0000000000401145 &lt;+81&gt;:    add    $0x1,%ebx  # ebx=2
   0x0000000000401148 &lt;+84&gt;:    cmp    $0x5,%ebx  # ebx&lt;=5
   0x000000000040114b &lt;+87&gt;:    jle    0x401135 &lt;phase_6+65&gt; # 这个循环是判断数组运算是否相等
   0x000000000040114d &lt;+89&gt;:    add    $0x4,%r13
   0x0000000000401151 &lt;+93&gt;:    jmp    0x401114 &lt;phase_6+32&gt;


   0x0000000000401153 &lt;+95&gt;:    lea    0x18(%rsp),%rsi
   0x0000000000401158 &lt;+100&gt;:    mov    %r14,%rax
   0x000000000040115b &lt;+103&gt;:    mov    $0x7,%ecx
   0x0000000000401160 &lt;+108&gt;:    mov    %ecx,%edx
   0x0000000000401162 &lt;+110&gt;:    sub    (%rax),%edx
   0x0000000000401164 &lt;+112&gt;:    mov    %edx,(%rax)
   0x0000000000401166 &lt;+114&gt;:    add    $0x4,%rax
</code></pre>
<p>伪代码</p>
<pre><code class="lang-c">r14 = rsp  nums[0]
rbp = r13  nums[0]
eax = nums[0]
eax -=1
for(r12d =0;r12d&lt;6;r12d++)&#123;
if(eax&gt;6)
    explode_bomb();
r12d++
 if(r12d==6)
    break
 ebx = r12d
 for(ebx=r12d;ebx&lt;=5;ebx++)&#123;
    rax = nums[rbx]
     if(nums[rbx] != rbp)
    &#123;ebx++;&#125;
  else 
    explode_bomb();
&#125;
r13++; //(这里是加1，但是反应在内存上是加上了1*int类型所占的字节)
&#125;
&#125;
</code></pre>
<p><strong>也就是说每个数字必须&lt;=6,且6个数字互不相等</strong><br>第二部分</p>
<pre><code class="lang-asm">   0x0000000000401153 &lt;+95&gt;:    lea    0x18(%rsp),%rsi # rsi = 0 ,判定是否遍历完了，第六个元素后面的那个存储单元没有值，那就是0，0x18=&gt;24，是因为我们有六个元素，每个元素4个字节，拿到最后一个元素后要地址(0x14)要+4，所以是0x18
   0x0000000000401158 &lt;+100&gt;:    mov    %r14,%rax  # *r14 = 5 = nums[0]
   0x000000000040115b &lt;+103&gt;:    mov    $0x7,%ecx  # ecx = 7
   0x0000000000401160 &lt;+108&gt;:    mov    %ecx,%edx  # edx = ecx = 7
   0x0000000000401162 &lt;+110&gt;:    sub    (%rax),%edx # edx = edx  - *rax = 7 - *rax
   0x0000000000401164 &lt;+112&gt;:    mov    %edx,(%rax) # *rax = edx
   0x0000000000401166 &lt;+114&gt;:    add    $0x4,%rax   # rax+=4 获取下一个元素
   0x000000000040116a &lt;+118&gt;:    cmp    %rsi,%rax  # rax =num[1]=7-num[1]
   0x000000000040116d &lt;+121&gt;:    jne    0x401160 &lt;phase_6+108&gt;
</code></pre>
<pre><code class="lang-c">rsi = 0;//实际上是nums[6]
ecx = 7;
for(rax=0;rax&lt;6;rax++) //底层里面nums[6]=0,要是不好理解，可以把中间的语句换成rax!=rsi,应该好理解点
    nums[rax]=7-nums[rax];
</code></pre>
<p>第三部分<br>第三部分中有一条语句</p>
<pre><code class="lang-asm">   0x0000000000401183 &lt;+143&gt;:    mov    $0x6032d0,%edx
</code></pre>
<p>通过x/30来查看 0x6032d0发现<br><img src="../images/bomb6.3.jpg" alt="在这里插入图片描述"><br>这是一个链表,但是前面的14c不知道是什么东西，结点如下</p>
<pre><code class="lang-c">struct node&#123;
    int value;
    int number;
    node* next;
&#125;
</code></pre>
<pre><code class="lang-asm">   0x000000000040116f &lt;+123&gt;:    mov    $0x0,%esi  # esi = 0 
   0x0000000000401174 &lt;+128&gt;:    jmp    0x401197 &lt;phase_6+163&gt;
   0x0000000000401176 &lt;+130&gt;:    mov    0x8(%rdx),%rdx # 是一个node类型 rdx = 当前结点的next值
   0x000000000040117a &lt;+134&gt;:    add    $0x1,%eax   # eax +=1
   0x000000000040117d &lt;+137&gt;:    cmp    %ecx,%eax   
   0x000000000040117f &lt;+139&gt;:    jne    0x401176 &lt;phase_6+130&gt; # 不相等继续遍历，rdx最终指向链表的第%eax个结点
   0x0000000000401181 &lt;+141&gt;:    jmp    0x401188 &lt;phase_6+148&gt;
   0x0000000000401183 &lt;+143&gt;:    mov    $0x6032d0,%edx  # 0x6032d0是node1的地址
   0x0000000000401188 &lt;+148&gt;:    mov    %rdx,0x20(%rsp,%rsi,2) # (rsp+32+rsi*2)=rdx
   0x000000000040118d &lt;+153&gt;:    add    $0x4,%rsi # rsi+=4 
   0x0000000000401191 &lt;+157&gt;:    cmp    $0x18,%rsi # 24
   0x0000000000401195 &lt;+161&gt;:    je     0x4011ab &lt;phase_6+183&gt;
   0x0000000000401197 &lt;+163&gt;:    mov    (%rsp,%rsi,1),%ecx  # ecx = *(rsp + rsi) 
   0x000000000040119a &lt;+166&gt;:    cmp    $0x1,%ecx # ecx&lt;=1
   0x000000000040119d &lt;+169&gt;:    jle    0x401183 &lt;phase_6+143&gt;
   0x000000000040119f &lt;+171&gt;:    mov    $0x1,%eax # eax = 1
   0x00000000004011a4 &lt;+176&gt;:    mov    $0x6032d0,%edx # 前面的那个立即数是一个node类型的指针,x/30 0x6032d0查看他附近的30个字节
   0x00000000004011a9 &lt;+181&gt;:    jmp    0x401176 &lt;phase_6+130&gt;
</code></pre>
<p>这部分我很蒙<br>第四部分</p>
<pre><code class="lang-asm">for(int i=6;i&gt;=1;i--)
    node[i].next=node[i-1]; 183~220
   0x00000000004011ab &lt;+183&gt;:    mov    0x20(%rsp),%rbx  # rbx = (0x20+rsp)
   0x00000000004011b0 &lt;+188&gt;:    lea    0x28(%rsp),%rax  # rax = (0x28+rsp)
   0x00000000004011b5 &lt;+193&gt;:    lea    0x50(%rsp),%rsi  # rsi = (0x50+rsp) 0x50是链表的尾端
   0x00000000004011ba &lt;+198&gt;:    mov    %rbx,%rcx   
   0x00000000004011bd &lt;+201&gt;:    mov    (%rax),%rdx  # rdx = *rax
   0x00000000004011c0 &lt;+204&gt;:    mov    %rdx,0x8(%rcx) //栈
   0x00000000004011c4 &lt;+208&gt;:    add    $0x8,%rax
   0x00000000004011c8 &lt;+212&gt;:    cmp    %rsi,%rax
   0x00000000004011cb &lt;+215&gt;:    je     0x4011d2 &lt;phase_6+222&gt;
   0x00000000004011cd &lt;+217&gt;:    mov    %rdx,%rcx
   0x00000000004011d0 &lt;+220&gt;:    jmp    0x4011bd &lt;phase_6+201&gt;
   # 这里改一下输入,改成6 5 4 3 2 1

   0x00000000004011d2 &lt;+222&gt;:    movq   $0x0,0x8(%rdx)  # 把最后一个结点的next域赋值为0
   0x00000000004011da &lt;+230&gt;:    mov    $0x5,%ebp       # ebp = 5
   0x00000000004011df &lt;+235&gt;:    mov    0x8(%rbx),%rax  # 指向重排后的第i个(1&lt;=i&lt;=5)
   0x00000000004011e3 &lt;+239&gt;:    mov    (%rax),%eax    # 
   0x00000000004011e5 &lt;+241&gt;:    cmp    %eax,(%rbx)    # rbx指向的是重排后的第i+1个 第1个大于等于第二个,要呈现单调递减的顺序，而且比较的是类似于权重
   0x00000000004011e7 &lt;+243&gt;:    jge    0x4011ee &lt;phase_6+250&gt;  # 必须要单调递减
   0x00000000004011e9 &lt;+245&gt;:    call   0x40143a &lt;explode_bomb&gt;
   0x00000000004011ee &lt;+250&gt;:    mov    0x8(%rbx),%rbx
   0x00000000004011f2 &lt;+254&gt;:    sub    $0x1,%ebp
   0x00000000004011f5 &lt;+257&gt;:    jne    0x4011df &lt;phase_6+235&gt;
   0x00000000004011f7 &lt;+259&gt;:    add    $0x50,%rsp
   0x00000000004011fb &lt;+263&gt;:    pop    %rbx
   0x00000000004011fc &lt;+264&gt;:    pop    %rbp
   0x00000000004011fd &lt;+265&gt;:    pop    %r12

   0x00000000004011ff &lt;+267&gt;:    pop    %r13
   0x0000000000401201 &lt;+269&gt;:    pop    %r14
   0x0000000000401203 &lt;+271&gt;:    ret
</code></pre>
<p>梳理<br>1.输入六个数(&lt;=6且互不相同)<br>2.nums[i]=7-nums[i]<br>7 -nums[0]=nums[0]<br>7 -nums[1]=nums[1]<br>7 -nums[2]=nums[2]<br>7 -nums[3]=nums[3]<br>7 -nums[4]=nums[4]<br>7 -nums[5]=nums[5]<br>1   2   3   4   5   6<br>332 168 924 691 477 443  这个是各个结点的权重,<br><img src="../images/image1.jpg" alt="在这里插入图片描述"></p>
<p>根据nums[i]的内容对node进行重排，确保重排后的各个结点的权重呈单调递减</p>
<blockquote>
<p>答案: 4 3 2 1 6 5</p>
</blockquote>
<p>全部的分析过程</p>
<pre><code class="lang-asm">Dump of assembler code for function phase_6:
   0x00000000004010f4 &lt;+0&gt;:    push   %r14
   0x00000000004010f6 &lt;+2&gt;:    push   %r13
   0x00000000004010f8 &lt;+4&gt;:    push   %r12
   0x00000000004010fa &lt;+6&gt;:    push   %rbp
   0x00000000004010fb &lt;+7&gt;:    push   %rbx
   0x00000000004010fc &lt;+8&gt;:    sub    $0x50,%rsp
   0x0000000000401100 &lt;+12&gt;:    mov    %rsp,%r13
   0x0000000000401103 &lt;+15&gt;:    mov    %rsp,%rsi
   0x0000000000401106 &lt;+18&gt;:    call   0x40145c &lt;read_six_numbers&gt;
   0x000000000040110b &lt;+23&gt;:    mov    %rsp,%r14 # nums[0] 基址
   0x000000000040110e &lt;+26&gt;:    mov    $0x0,%r12d # 
   0x0000000000401114 &lt;+32&gt;:    mov    %r13,%rbp  # nums[0]
   0x0000000000401117 &lt;+35&gt;:    mov    0x0(%r13),%eax # %eax = nums[0]
   0x000000000040111b &lt;+39&gt;:    sub    $0x1,%eax   # %eax-=1
   0x000000000040111e &lt;+42&gt;:    cmp    $0x5,%eax  # eax-1&lt;=5
   0x0000000000401121 &lt;+45&gt;:    jbe    0x401128 &lt;phase_6+52&gt;
   0x0000000000401123 &lt;+47&gt;:    call   0x40143a &lt;explode_bomb&gt;

   0x0000000000401128 &lt;+52&gt;:    add    $0x1,%r12d # r12d=1
   0x000000000040112c &lt;+56&gt;:    cmp    $0x6,%r12d 
   0x0000000000401130 &lt;+60&gt;:    je     0x401153 &lt;phase_6+95&gt;  
   0x0000000000401132 &lt;+62&gt;:    mov    %r12d,%ebx # %ebx = 1  退出循环的条件是遍历完6个数字

   0x0000000000401135 &lt;+65&gt;:    movslq %ebx,%rax  # rax = 1
   0x0000000000401138 &lt;+68&gt;:    mov    (%rsp,%rax,4),%eax  # eax =  2 拿到下一个元素给eax  4是int类型的4个字节
   0x000000000040113b &lt;+71&gt;:    cmp    %eax,0x0(%rbp)  # nums[i] !=nums[0]
   0x000000000040113e &lt;+74&gt;:    jne    0x401145 &lt;phase_6+81&gt;
   0x0000000000401140 &lt;+76&gt;:    call   0x40143a &lt;explode_bomb&gt; 
   0x0000000000401145 &lt;+81&gt;:    add    $0x1,%ebx  # ebx=2
   0x0000000000401148 &lt;+84&gt;:    cmp    $0x5,%ebx  # ebx&lt;=5
   0x000000000040114b &lt;+87&gt;:    jle    0x401135 &lt;phase_6+65&gt; # 这个循环是判断数组运算是否相等
   0x000000000040114d &lt;+89&gt;:    add    $0x4,%r13
   0x0000000000401151 &lt;+93&gt;:    jmp    0x401114 &lt;phase_6+32&gt;


   0x0000000000401153 &lt;+95&gt;:    lea    0x18(%rsp),%rsi # rsi = 0 
   0x0000000000401158 &lt;+100&gt;:    mov    %r14,%rax  # *r14 = 5
   0x000000000040115b &lt;+103&gt;:    mov    $0x7,%ecx  # ecx = 7
   0x0000000000401160 &lt;+108&gt;:    mov    %ecx,%edx  # edx = ecx = 7
   0x0000000000401162 &lt;+110&gt;:    sub    (%rax),%edx # *edx = *edx  - *rax = 7 - *rax
   0x0000000000401164 &lt;+112&gt;:    mov    %edx,(%rax) # *rax = edx
   0x0000000000401166 &lt;+114&gt;:    add    $0x4,%rax   # rax+=4 获取下一个元素
   0x000000000040116a &lt;+118&gt;:    cmp    %rsi,%rax  # rax =num[1]=7-num[1]
   0x000000000040116d &lt;+121&gt;:    jne    0x401160 &lt;phase_6+108&gt;

4 3 2 1 5 6

   0x000000000040116f &lt;+123&gt;:    mov    $0x0,%esi  # esi = 0 
   0x0000000000401174 &lt;+128&gt;:    jmp    0x401197 &lt;phase_6+163&gt;
   0x0000000000401176 &lt;+130&gt;:    mov    0x8(%rdx),%rdx # 是一个node类型 rdx = 当前结点的next值
   0x000000000040117a &lt;+134&gt;:    add    $0x1,%eax   # eax +=1
   0x000000000040117d &lt;+137&gt;:    cmp    %ecx,%eax   
   0x000000000040117f &lt;+139&gt;:    jne    0x401176 &lt;phase_6+130&gt; # 不相等继续遍历，rdx最终指向链表的第%eax个结点
   0x0000000000401181 &lt;+141&gt;:    jmp    0x401188 &lt;phase_6+148&gt;
   0x0000000000401183 &lt;+143&gt;:    mov    $0x6032d0,%edx  # 0x6032d0是node1的地址
   0x0000000000401188 &lt;+148&gt;:    mov    %rdx,0x20(%rsp,%rsi,2) # (rsp+32+rsi*2)=rdx
   0x000000000040118d &lt;+153&gt;:    add    $0x4,%rsi # rsi+=4 
   0x0000000000401191 &lt;+157&gt;:    cmp    $0x18,%rsi # 24
   0x0000000000401195 &lt;+161&gt;:    je     0x4011ab &lt;phase_6+183&gt;

   0x0000000000401197 &lt;+163&gt;:    mov    (%rsp,%rsi,1),%ecx  # ecx = *(rsp + rsi) 

   0x000000000040119a &lt;+166&gt;:    cmp    $0x1,%ecx # ecx&lt;=1
   0x000000000040119d &lt;+169&gt;:    jle    0x401183 &lt;phase_6+143&gt;
   0x000000000040119f &lt;+171&gt;:    mov    $0x1,%eax # eax = 1
   0x00000000004011a4 &lt;+176&gt;:    mov    $0x6032d0,%edx # 前面的那个立即数是一个node类型的指针,x/30 0x6032d0查看他附近的30个字节
   0x00000000004011a9 &lt;+181&gt;:    jmp    0x401176 &lt;phase_6+130&gt;

   for(int i=6;i&gt;=1;i--)
    node[i].next=node[i-1]; 183~220
   0x00000000004011ab &lt;+183&gt;:    mov    0x20(%rsp),%rbx  # rbx = (0x20+rsp)
   0x00000000004011b0 &lt;+188&gt;:    lea    0x28(%rsp),%rax  # rax = (0x28+rsp)
   0x00000000004011b5 &lt;+193&gt;:    lea    0x50(%rsp),%rsi  # rsi = (0x50+rsp) 0x50是链表的尾端
   0x00000000004011ba &lt;+198&gt;:    mov    %rbx,%rcx   
   0x00000000004011bd &lt;+201&gt;:    mov    (%rax),%rdx  # rdx = *rax
   0x00000000004011c0 &lt;+204&gt;:    mov    %rdx,0x8(%rcx) //栈
   0x00000000004011c4 &lt;+208&gt;:    add    $0x8,%rax
   0x00000000004011c8 &lt;+212&gt;:    cmp    %rsi,%rax
   0x00000000004011cb &lt;+215&gt;:    je     0x4011d2 &lt;phase_6+222&gt;
   0x00000000004011cd &lt;+217&gt;:    mov    %rdx,%rcx
   0x00000000004011d0 &lt;+220&gt;:    jmp    0x4011bd &lt;phase_6+201&gt;
   # 这里改一下输入,改成6 5 4 3 2 1

   0x00000000004011d2 &lt;+222&gt;:    movq   $0x0,0x8(%rdx)  # 把最后一个结点的next域赋值为0
   0x00000000004011da &lt;+230&gt;:    mov    $0x5,%ebp       # ebp = 5
   0x00000000004011df &lt;+235&gt;:    mov    0x8(%rbx),%rax  # 指向重排后的第i个(1&lt;=i&lt;=5)
   0x00000000004011e3 &lt;+239&gt;:    mov    (%rax),%eax    # 
   0x00000000004011e5 &lt;+241&gt;:    cmp    %eax,(%rbx)    # rbx指向的是重排后的第i+1个 第1个大于等于第二个,要呈现单调递减的顺序，而且比较的是类似于权重
   0x00000000004011e7 &lt;+243&gt;:    jge    0x4011ee &lt;phase_6+250&gt;  # 必须要单调递减
   0x00000000004011e9 &lt;+245&gt;:    call   0x40143a &lt;explode_bomb&gt;
   0x00000000004011ee &lt;+250&gt;:    mov    0x8(%rbx),%rbx
   0x00000000004011f2 &lt;+254&gt;:    sub    $0x1,%ebp
   0x00000000004011f5 &lt;+257&gt;:    jne    0x4011df &lt;phase_6+235&gt;
   0x00000000004011f7 &lt;+259&gt;:    add    $0x50,%rsp
   0x00000000004011fb &lt;+263&gt;:    pop    %rbx
   0x00000000004011fc &lt;+264&gt;:    pop    %rbp
   0x00000000004011fd &lt;+265&gt;:    pop    %r12
   0x00000000004011ff &lt;+267&gt;:    pop    %r13
   0x0000000000401201 &lt;+269&gt;:    pop    %r14
   0x0000000000401203 &lt;+271&gt;:    ret
</code></pre>
<p>finish<br>明天试试隐藏关</p>
]]></content>
      <tags>
        <tag>CSAPP Lab</tag>
      </tags>
  </entry>
  <entry>
    <title>Poem</title>
    <url>//post/Poem.html</url>
    <content><![CDATA[<p><strong>杨花落尽子规啼，闻道龙标过五溪</strong></p>
<p><strong>我寄愁心与明月，随风直到夜郎西</strong></p>
<p><strong>倘若相逢即别离</strong></p>
<p><strong>迢迢千里无期</strong></p>
<p><strong>此地 何时 再相遇</strong></p>
]]></content>
      <tags>
        <tag>诗词</tag>
        <tag>李白</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言中的随机数</title>
    <url>//post/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0.html</url>
    <content><![CDATA[<p>今天在一个小程序中看到了一个随机函数，心血来潮，来记录一下，顺便回忆一下c#(有点懒，c#部分后期再补)</p>
<h1 id="c语言中产生随机数"><a href="#c语言中产生随机数" class="headerlink" title="c语言中产生随机数"></a>c语言中产生随机数</h1><pre><code class="lang-c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;//这里要注意，必须写，不然vs报错，因为rand函数在stdlib下面
#include &lt;time.h&gt;//这里要注意，因为随机数是根据系统日期所产生的.
int main()
&#123;
    srand(time(0));//根据当前系统日期产生随机数
    //srand((unsigned) time(NULL));也可以这样写
    int num=rand()%201-100;
    //产生一个-100到100之间的数
    printf(&quot;你产生的随机数是%d\n&quot;,num);
&#125;
</code></pre>
<p>运行结果<br>第一次,下面是控制台输出</p>
<blockquote>
<p>你产生的随机数是47<br>第二次<br>你产生的随机数是-34</p>
<h2 id="rand"><a href="#rand" class="headerlink" title="rand()"></a>rand()</h2><p>rand函数指定数字范围原理<br>要让随机数限定在一个范围，可以采用模除加加法的方式。<br>要产生随机数r， 其范围为 m&lt;=r&lt;=n，可以使用如下公式：<br>rand()%(n-m+1)+m<br>其原理为，对于任意数，<br>0&lt;=rand()%(n-m+1)&lt;=n-m<br>同时加上m<br>0+m&lt;=rand()%(n-m+1)+m&lt;=n-m+m<br>得到<br>m&lt;=rand()%(n-m+1)+m&lt;=n</p>
<h2 id="rand的例子"><a href="#rand的例子" class="headerlink" title="rand的例子"></a>rand的例子</h2></blockquote>
<pre><code class="lang-c">#include&lt;stdio.h&gt;
#include&lt;time.h&gt;
#include&lt;stdlib.h&gt;
int main()
&#123;
    //产生一个-200到200之间的数
    srand((unsigned)time(NULL));
    //rand()%(200-(-200)+1)+(-200)
    //rand()%401-200
    int num=rand()%401-200;
    printf(&quot;随机数的结果为%d\n&quot;,num);
    return 0;
&#125;
</code></pre>
<h2 id="不足点"><a href="#不足点" class="headerlink" title="不足点"></a>不足点</h2><ol>
<li>没有说清楚srand和time的细节部分</li>
<li>rand细节部分</li>
</ol>
]]></content>
      <tags>
        <tag>C语言</tag>
        <tag>随机函数</tag>
      </tags>
  </entry>
  <entry>
    <title>SearchSkills</title>
    <url>//post/SearchSkills.html</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th>技巧</th>
<th>说明</th>
<th>例子</th>
<th>常用</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>“content”|内容中必须完整的包含content|”IT行业报告”<br>intitle:Exception|要求标题中必须包含Exception|intitle:犹太人<br>allintitle:标题1 标题2|要求标题中必须包含标题1和标题2|allintitle:王柠 天职师大<br>intext:content|限定内容关键词|intext:”沈峰” “浙江大学”<br>inurl:url|限定网址关键词|inurl:cctv<br>site:url|限定网址来源|”Sql Exception”site:stackoverflow.com<br>imagesize:widthxheight|限定图片尺寸|imagesize:100x200<br>filetype:文件类型名|限定文件格式|”IT行业报告” filetype:pdf|快速了解行业的情况用这个</p>
<p>快速找到免费报告的网站<br>filetype:pdf</p>
<ol>
<li>用inurl:baogao 搜出一堆的网站</li>
<li>再用Similar Sites把上面的网址丢进去，找到类似的网站<br>xx行业/岗位必逛的网站<br>websites programmer should visit</li>
</ol>
<p>找论文的<br>Google学术搜索<br>sci-hub</p>
<p>电子书<br>中文的 鸠摩搜书<br>英文的 直接Google，网站:zlibrary,manybooks,www.pdfbooksworld.com,谷歌图书Kindle</p>
<p>在线视频<br>Google搜索best online learning websites</p>
<p>百度网盘搜索引擎<br>学搜搜 盘搜搜 云盘狗，或者直接Google一下百度网盘搜索引擎</p>
<p>高清视频素材网站<br>wwww.pexels.com<br>wwww.pixabay.com<br>wwww.videvo.net<br>wwww.mixkit.co<br>或直接Google搜索best sites for free stock videos</p>
<p>youtube上下载视频,在www.后面输入9x,下载4K的网站 save.tube<br>199it.com  专业研究报告的<br>国产普通化妆品备案信息<br>2023年为基准<br>15年前<br>百度知道<br>百度贴吧<br>10年前<br>知乎<br>微信公众号(搜狗搜索或直接在微信公众号里面搜)<br>5年前<br>小红书，抖音，B站，快手，视频号，得到</p>
]]></content>
      <tags>
        <tag>particle skills</tag>
        <tag>Search skill</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu22.04搭建mysql主从复制</title>
    <url>//post/Ubuntu22-04%E6%90%AD%E5%BB%BAmysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.html</url>
    <content><![CDATA[<blockquote>
<p>记录哈，这个需要两台服务器，每台服务器上面都要安装mysql，若是没有安装，请分别在两台服务器上面运行下面的命令<br>sudo apt install mysql-server</p>
</blockquote>
<p>引用<br><a href="https://blog.csdn.net/qq_45418837/article/details/132065474">Ubuntu下的mysql8.0忘记密码怎么办?</a></p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>Ubuntu 22.04</li>
<li>主机:192.168.164.134</li>
<li>从机:192.168.164.136</li>
<li>两台服务器的mysql配置文件路径:/etc/mysql/mysql.conf.d/mysqld.cnf<blockquote>
<p>若是不知道在哪里运行下面的命令<br>find / -name mysqld.cnf</p>
</blockquote>
</li>
</ul>
<h1 id="主机的配置"><a href="#主机的配置" class="headerlink" title="主机的配置"></a>主机的配置</h1><p>vim /etc/mysql/mysql.conf.d/mysqld.cnf<br>修改成下面的样子,注意server-id不一定要等于1，只要服务器之间的server-id是不一样的就好<br><img src="../images/1.jpg" alt="在这里插入图片描述"><br>若是远程连接不上mysql服务器可以把/etc/mysql/mysql.conf.d/mysqld.cnf文件中的<br>bind-address=127.0.0.1<br>mysqlx-bind-address=127.0.0.1，这两行注释掉<br><img src="../images/187.jpg" alt="在这里插入图片描述"><br>完成后执行在终端中执行命令<br>systemctl restart mysql重启mysql服务</p>
<p>输入mysql -uroot进入到mysql中，注意我的没有设置密码，若你有密码需要加上-p后面写的你密码</p>
<p>输入下面的命令</p>
<pre><code class="lang-shell">CREATE USER &#39;remote&#39;@&#39;%&#39; IDENTIFIED BY &#39;remote&#39;;
     GRANT REPLICATION SLAVE ON *.* TO &#39;remote&#39;@&#39;%&#39;;
     FLUSH PRIVILEGES;
</code></pre>
<p>在mysql中输入下面命令show master status;<br><img src="../images/123.jpg" alt="在这里插入图片描述"><br>之后不要动主机</p>
<h1 id="从机的配置"><a href="#从机的配置" class="headerlink" title="从机的配置"></a>从机的配置</h1><p>vim /etc/mysql/mysql.conf.d/mysqld.cnf<br>增加或注释一句server-id =2,保存退出<br><img src="../images/12.jpg" alt="在这里插入图片描述"><br>重启mysql服务 systemctl restart mysql<br>输入mysql -uroot  -p你的密码进入到mysql当中<br>输入下面命令</p>
<pre><code class="lang-shell">stop slave;
change master to master_host=&#39;192.168.164.134&#39;,master_user=&#39;remote&#39;,master_password=&#39;remote&#39;,master_log_file=&#39;mysql-bin.000013&#39;,master_log_pos=157,get_master_public_key=1;
start slave;
show slave status\G
</code></pre>
<p>若show slave status\G的结果是如图片所示即可<br><img src="../images/987.jpg" alt="在这里插入图片描述"><br>验证:<br>主机用root身份登录<br>从机用root身份登录<br>在主机中新建一个数据库，看看从机中是否存在相同的，若有则配置成功，若没有找原因，原因及其解决办法我去翻翻历史记录，看看能不能找到</p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2019中出现【Windows SDK】找不到 Windows SDK 版本10.0.18362.0的解决办法</title>
    <url>//post/VS2019%E4%B8%AD%E5%87%BA%E7%8E%B0%E3%80%90Windows-SDK%E3%80%91%E6%89%BE%E4%B8%8D%E5%88%B0-Windows-SDK-%E7%89%88%E6%9C%AC10-0-18362-0%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</url>
    <content><![CDATA[<h1 id="VS2019中出现【Windows-SDK】找不到-Windows-SDK-版本10-0-18362-0的解决办法"><a href="#VS2019中出现【Windows-SDK】找不到-Windows-SDK-版本10-0-18362-0的解决办法" class="headerlink" title="VS2019中出现【Windows SDK】找不到 Windows SDK 版本10.0.18362.0的解决办法"></a>VS2019中出现【Windows SDK】找不到 Windows SDK 版本10.0.18362.0的解决办法</h1><h2 id="方法一：在项目上右击选择重定目标解决方案，将windosSdk的版本号选择10-0-18362-0"><a href="#方法一：在项目上右击选择重定目标解决方案，将windosSdk的版本号选择10-0-18362-0" class="headerlink" title="方法一：在项目上右击选择重定目标解决方案，将windosSdk的版本号选择10.0.18362.0"></a>方法一：在项目上右击选择重定目标解决方案，将windosSdk的版本号选择10.0.18362.0</h2><p><img src="../images/20200607202928750.jpg" alt="选择"><br><img src="../images/20200607203006912.jpg" alt="在这里插入图片描述"><br>如果这个不能解决问题<br>请看这里<br>在Visual Studio Installer中<img src="../images/20200607202153355.jpg" alt="修改"><br><img src="../images/20200607202319969.jpg" alt="勾选Windows 10 SDK(10.0.17764.0)点击修改即可"><br>勾选Windows 10 SDK(10.0.17764.0)点击修改即可<br>完成</p>
<p>是在不行，自己到微软官网上下载一个，<a href="https://developer.microsoft.com/zh-cn/windows/downloads/sdk-archive/">请点击这里</a></p>
]]></content>
      <tags>
        <tag>VS报错</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringWeb踩坑记录</title>
    <url>//post/SpringWeb%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h1 id="解决Maven依赖下载奇慢的问题-服务器在国外，很慢的"><a href="#解决Maven依赖下载奇慢的问题-服务器在国外，很慢的" class="headerlink" title="解决Maven依赖下载奇慢的问题,服务器在国外，很慢的"></a>解决Maven依赖下载奇慢的问题,服务器在国外，很慢的</h1><p>在IDEA中按两次shift键，输入settings.xml,选择Create<br><img src="../images/0113cb3af99a4839b131337b1f9afa71.png" alt="在这里插入图片描述"><br>粘贴以下内容到文件中</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;
          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
          xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0
                          https://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;

    &lt;mirrors&gt;

        &lt;mirror&gt;
            &lt;id&gt;alimaven&lt;/id&gt;
            &lt;name&gt;aliyun maven&lt;/name&gt;
            &lt;!-- https://maven.aliyun.com/repository/public/ --&gt;
            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;
            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
        &lt;/mirror&gt;
    &lt;/mirrors&gt;
&lt;/settings&gt;
</code></pre><p>重启IDEA，或者再次创建一个项目，下载速度很快。</p>
<h1 id="java-无效的目标发行版"><a href="#java-无效的目标发行版" class="headerlink" title="java:无效的目标发行版"></a>java:无效的目标发行版</h1><p>原因都知道哈，版本不对<br>IDEA-&gt;Settings-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Java Compiler<br><img src="../images/5d847efec6634fa0ac649a22e25ae47c.png" alt="在这里插入图片描述"><br>还有两个地方<br>File-&gt;Project Structure-&gt;Project<br><img src="../images/eaf65c98ae504be58c4155a689f22ce6.png" alt="在这里插入图片描述"><br>File-&gt;Project Structure-&gt;Modules<br><img src="../images/71a6aba9570045b6a802b3e361c43260.png" alt="在这里插入图片描述"><br>如果还不行，将pom.xml的的java.version改成你上述图片中选择的版本即可</p>
<pre><code class="lang-xml">    &lt;properties&gt;
        &lt;java.version&gt;19&lt;/java.version&gt;
    &lt;/properties&gt;
</code></pre>
<h1 id="List转换成Page时抛出ClassCastException"><a href="#List转换成Page时抛出ClassCastException" class="headerlink" title="List转换成Page时抛出ClassCastException"></a>List转换成Page时抛出ClassCastException</h1><p>报错信息:</p>
<pre><code>class java.util.ArrayList cannot be cast to class com.github.pagehelper.Page (java.util.ArrayList is in module java.base of loader &#39;bootstrap&#39;; com.github.pagehelper.Page is in unnamed module of loader &#39;app&#39;)
</code></pre><p>原先代码</p>
<pre><code class="lang-java">
        PageHelper.startPage(page,pageSize);
        List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);
        Page&lt;Emp&gt; emp = (Page&lt;Emp&gt;)empList;//这里出现了异常
        PageBean pageBean = new PageBean(emp.getTotal(), emp.getResult());
</code></pre>
<p>解决办法，将代码修改成下面的，原因不知道</p>
<pre><code class="lang-java">
        Page&lt;Emp&gt; emp = PageHelper.startPage(page,pageSize);
        List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);
        emp.addAll(empList);
        PageBean pageBean = new PageBean(emp.getTotal(), emp.getResult());
</code></pre>
<p>还有一个解决办法，把PageHelper的版本换成最新版，在pom.xml文件中改</p>
<h1 id="将静态页面加入到static文件夹从浏览器访问不到"><a href="#将静态页面加入到static文件夹从浏览器访问不到" class="headerlink" title="将静态页面加入到static文件夹从浏览器访问不到"></a>将静态页面加入到static文件夹从浏览器访问不到</h1><p>静态html加入到static文件夹后，从localhost:8080:/content.html访问不到，<br>解决办法:重新编译staic模块<br><img src="../images/ebb7f482ba7d48de9272af751ecb5038.png" alt="在这里插入图片描述"></p>
<h1 id="The-field-image-exceeds-its-maximum-permitted-size-of-1048576-bytes"><a href="#The-field-image-exceeds-its-maximum-permitted-size-of-1048576-bytes" class="headerlink" title="The field image exceeds its maximum permitted size of 1048576 bytes."></a>The field image exceeds its maximum permitted size of 1048576 bytes.</h1><p>原因:上传的文件太大了<br>解决办法:调整最大限制<br>在application.property中输入下面的,即可</p>
<pre><code># 上传的最大文件大小必须小于100MB
spring.servlet.multipart.max-file-size=100MB
# 上传多个文件的时候，单个文件大小不得超过20MB
spring.servlet.multipart.max-request-size=20MB
</code></pre><h1 id="io-jsonwebtoken-UnsupportedJwtException-Signed-Claims-JWSs-are-not-supported"><a href="#io-jsonwebtoken-UnsupportedJwtException-Signed-Claims-JWSs-are-not-supported" class="headerlink" title="io.jsonwebtoken.UnsupportedJwtException: Signed Claims JWSs are not supported."></a>io.jsonwebtoken.UnsupportedJwtException: Signed Claims JWSs are not supported.</h1><p>将Jwts.parser().parseClaimsJwt(str)改成Jwts.parser().parseClaimsJws(str)即可</p>
<pre><code class="lang-java">        Claims free = Jwts.parser().
                setSigningKey(&quot;free&quot;).//设置密钥
                parseClaimsJws(str).
                getBody();
        System.out.println(free);
</code></pre>
<h1 id="java-time-format-DateTimeParseException-Text-‘2023-5-11-11-12-13’-could-not-be-parsed-at-index-5"><a href="#java-time-format-DateTimeParseException-Text-‘2023-5-11-11-12-13’-could-not-be-parsed-at-index-5" class="headerlink" title="java.time.format.DateTimeParseException: Text ‘2023-5-11 11:12:13’ could not be parsed at index 5"></a>java.time.format.DateTimeParseException: Text ‘2023-5-11 11:12:13’ could not be parsed at index 5</h1><p>@DateTimeFormat(pattern=”@DateTimeFormat(pattern =”yyyy-MM-dd HH:mm:ss””)中的MM是两个<br>但是字符串中的月份是一位，解决办法把2023-5-11改成2023-05-11即可，这个纯属是粗心大意了</p>
<h1 id="IDEA创建Maven项目后没有src目录"><a href="#IDEA创建Maven项目后没有src目录" class="headerlink" title="IDEA创建Maven项目后没有src目录"></a>IDEA创建Maven项目后没有src目录</h1><p>IDEA版本号:2022.2.5<br>解决办法:File-&gt;Settings,搜索Runner这个选项,在VM Options中加入-Darchetype=Internal，apply-&gt;OK,<br>出现原因暂时不知道</p>
<h1 id="Unknown-database-xxx"><a href="#Unknown-database-xxx" class="headerlink" title="Unknown database xxx"></a>Unknown database xxx</h1><p>排错思路:</p>
<ol>
<li>数据库是否建好了?</li>
<li>数据库名称是否写对了</li>
<li>配置文件中账户与密码驱动是否写对了</li>
<li>mysql服务是否开启了</li>
<li>端口号是否被占用了<br>对应的措施<br>是否有数据库和数据库名称这个可以自己检查出来，这里主要是记录后面几种的做法<br>若是yml格式的，你的password可能需要加个引号<br><img src="../images/4edbaa41b97c4140a2b68831000b1a1f.png" alt="在这里插入图片描述"><br>驱动的话将版本改为最新版本试试</li>
</ol>
<pre><code class="lang-yaml">    &lt;dependency&gt;
      &lt;groupId&gt;mysql&lt;/groupId&gt;
      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
      &lt;version&gt;8.0.33&lt;/version&gt;
    &lt;/dependency&gt;
</code></pre>
<p>查看mysql服务是否开启<br>以管理员的身份运行cmd<br><img src="../images/02045ccacf9c4c08a4937fa360186d4f.png" alt="在这里插入图片描述"><br>输入 net start mysql,输入后是这个样子<br><img src="../images/792a88ffe4ae48688e6abfd8ebc8f861.png" alt="在这里插入图片描述"><br>最后检查端口号是否被占用，还是在cmd中输入netstart -ano<br><img src="../images/481eaf6ad0194cd0a3a817030c8b620d.png" alt="在这里插入图片描述"><br>找你在配置文件中设置的端口号，如何查看?<br>windows下默认是在C:/ProgramData/MySQL/MySQL Server X.X/my.ini或C:/Program Files (x86)/MySQL/MySQL Server X.X/my.ini。其中X.X代表MySQL版本号。在Linux系统下，MySQL配置文件通常位于/etc/my.cnf或/etc/mysql/my.cnf<br><img src="../images/c2efdfa7a54a4db98016f89b2167de2b.png" alt="在这里插入图片描述"><br>找到占用的程序，在任务管理器中结束掉，win+R输入services.msc找到mysql服务，重启试试。这是我能想到的所有解决办法</p>
<h1 id="SpringBoot测试失败并报错-Unable-to-find-a-SpringBootConfiguration-you-need-to-use-ContextConfiguration"><a href="#SpringBoot测试失败并报错-Unable-to-find-a-SpringBootConfiguration-you-need-to-use-ContextConfiguration" class="headerlink" title="SpringBoot测试失败并报错: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration"></a>SpringBoot测试失败并报错: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration</h1><p>一般是测试类所在的包名和启动类的包名不一致造成的<br><img src="../images/f2f1a7127c3c48b4bf728dfe017e2345.png" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows远程连接Redis(Ubuntu)</title>
    <url>//post/Windows%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Redis-Ubuntu.html</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>Windows版本:Win11 家庭版</li>
<li>Linux版本:Ubuntu22.04</li>
<li>Redis版本:Redis - 6.0.16</li>
<li>IDE: IDEA 2022.2.3</li>
<li>Redis:单机部署<h1 id="配置redis-conf"><a href="#配置redis-conf" class="headerlink" title="配置redis.conf"></a>配置redis.conf</h1>修改redis.conf配置文件 ,不知道在哪里在终端输入下面的命令<pre><code class="lang-shell">find / -name &#39;redis.conf&#39;
</code></pre>
注释掉 bind 127.0.0.1这一行<br>设置客户端连接的密码 requirepass<br>关闭保护模式 protected-mode no<h1 id="启动Redis"><a href="#启动Redis" class="headerlink" title="启动Redis"></a>启动Redis</h1><h2 id="开启redis服务"><a href="#开启redis服务" class="headerlink" title="开启redis服务"></a>开启redis服务</h2>指定redis.conf的文件位置<pre><code class="lang-shell">redis-server ./redis.conf
</code></pre>
<h2 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h2>在cmd中输入redis-cli -h address -a password —raw<br>—raw是防止中文乱码</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言里面的进制输出</title>
    <url>//post/c%E8%AF%AD%E8%A8%80%E9%87%8C%E9%9D%A2%E7%9A%84%E8%BF%9B%E5%88%B6%E8%BE%93%E5%87%BA.html</url>
    <content><![CDATA[<pre><code class="lang-c">    int num = 0;
    scanf_s(&quot;%d&quot;,&amp;num);
    char str[256] = &#123; 0 &#125;;
    _itoa_s(num, str, 64,2);//这个64是代表着str的长度应该是，超过了str的长度就会报str附近的堆栈已经损坏
    //num是进行转换的数
    //str是存放结果的字符数组
    //64我也不清楚，
    //2是进制，后面的一次类推
    printf(&quot;%s\n&quot;,str);

    _itoa_s(num, str, 64, 8);
    printf(&quot;%s\n&quot;, str);

    _itoa_s(num, str, 64, 10);
    printf(&quot;%s\n&quot;, str);

    _itoa_s(num, str, 64, 16);
    printf(&quot;%s\n&quot;, str);
    return 0;
</code></pre>
<p>很简单对吧，如果要将其结果输入或者输出至文本文件中呢?</p>
<h1 id="输入输出至文本文件中"><a href="#输入输出至文本文件中" class="headerlink" title="输入输出至文本文件中"></a>输入输出至文本文件中</h1><p>首先介绍一下在cmd中 &lt; &gt;是什么意思，这个是重定向符号<br>例子  进制转换.exe <1.txt 把1.txt中的内容输入至进制转换.exe中
进制转换.exe > 1.txt 把进制转换.exe中的结果输出至1.txt</p>
<p>ok,<br>例子<br>把十进制分别转换成B/D/O/H并写入指定的文本文件中<br>win+r 进入cmd界面<br>切换到程序所在的目录，再切换到Debug文件夹下(这是VS2019,其他的我不清楚，只要能找到那个以exe结尾的可执行文件就行)<br>输入 程序名.exe <1.txt
输出 程序名.exe >2.txt<br>图片以后再补充</p>
]]></content>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>修改试试</title>
    <url>//post/first-blog.html</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>测试,123</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>//post/hello-world.html</url>
    <content><![CDATA[<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>介绍性的东西</p>
<h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>Hexo、博客、创建、配置、插件、主题</p>
<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="1-1-背景"><a href="#1-1-背景" class="headerlink" title="1.1 背景"></a>1.1 背景</h3><p>随着互联网的发展，越来越多的人开始在网络上分享自己的知识和经验。博客是一种非常流行的方式，让人们可以轻松地创建和发布自己的文章。Hexo 是一个非常快速、简单且强大的博客框架，可以帮助人们快速创建自己的博客。</p>
<h3 id="1-2-目的"><a href="#1-2-目的" class="headerlink" title="1.2 目的"></a>1.2 目的</h3><p>在这篇文章中，我们将介绍如何创建和配置 Hexo 博客，以及如何使用一些常用的插件和主题来提升博客的体验。通过这篇文章，希望能够帮助读者快速上手 Hexo，并开始创建自己的博客。</p>
<h3 id="1-3-结构"><a href="#1-3-结构" class="headerlink" title="1.3 结构"></a>1.3 结构</h3><p>本文分为以下几个部分：<br>1.1 Hexo 简介<br>1.2 安装和配置 Hexo<br>1.3 使用插件和主题<br>1.4 总结</p>
<h2 id="安装和配置-Hexo"><a href="#安装和配置-Hexo" class="headerlink" title="安装和配置 Hexo"></a>安装和配置 Hexo</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><p>要在本地安装 Hexo，请遵循以下步骤：</p>
<ol>
<li>访问 Hexo 官网（<a href="https://hexo.io/）下载最新版本的">https://hexo.io/）下载最新版本的</a> Hexo。  </li>
<li>将下载的压缩包解压到一个文件夹中。  </li>
<li>进入解压后的文件夹，并运行以下命令安装依赖： </li>
</ol>
<h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h3><p>安装完成后，需要对 Hexo 进行一些基本配置。打开解压后的文件夹，找到 <code>config/config.yml</code> 文件，并编辑如下内容：</p>
<h2 id="使用插件和主题"><a href="#使用插件和主题" class="headerlink" title="使用插件和主题"></a>使用插件和主题</h2><h3 id="3-1-安装插件"><a href="#3-1-安装插件" class="headerlink" title="3.1 安装插件"></a>3.1 安装插件</h3><p>要安装插件，请进入解压后的文件夹，并运行以下命令：</p>
<h3 id="3-2-配置插件"><a href="#3-2-配置插件" class="headerlink" title="3.2 配置插件"></a>3.2 配置插件</h3><p>安装完成后，找到 <code>themes/theme-chalk/config/config.yml</code> 文件，添加以下内容：</p>
<h3 id="3-3-安装主题"><a href="#3-3-安装主题" class="headerlink" title="3.3 安装主题"></a>3.3 安装主题</h3><p>要安装主题，请进入解压后的文件夹，并运行以下命令：</p>
<h3 id="3-4-配置主题"><a href="#3-4-配置主题" class="headerlink" title="3.4 配置主题"></a>3.4 配置主题</h3><p>安装完成后，找到 <code>themes/theme-chalk/config/config.yml</code> 文件，添加以下内容：</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这篇文章中，我们介绍了如何创建和配置 Hexo 博客，以及如何使用一些常用的插件和主题来提升博客的体验。通过这篇文章，希望能够帮助读者快速上手 Hexo，并开始创建自己的博客。</p>
<p>感谢您的阅读，希望您喜欢这篇文章！  </p>
]]></content>
  </entry>
  <entry>
    <title>java环境搭建 Ubuntu Linux</title>
    <url>//post/java%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-Ubuntu-Linux.html</url>
    <content><![CDATA[<h1 id="jdk的安装和配置环境变量"><a href="#jdk的安装和配置环境变量" class="headerlink" title="jdk的安装和配置环境变量"></a>jdk的安装和配置环境变量</h1><ul>
<li>Ubuntu 22.04 LTS<h2 id="使用apt"><a href="#使用apt" class="headerlink" title="使用apt"></a>使用apt</h2>这个最简单<pre><code class="lang-shell">sudo apt install default-jdk
</code></pre>
若是安装成功了在终端输入java -version来查看是否安装成功<h2 id="使用官网下载的jdk包-离线安装"><a href="#使用官网下载的jdk包-离线安装" class="headerlink" title="使用官网下载的jdk包(离线安装)"></a>使用官网下载的jdk包(离线安装)</h2>直接在百度上搜索jdk，选择图片这个<br><img src="../images/2ad26025dac042a0a32035a5b214fa41.png" alt="在这里插入图片描述"><br>网址:<a href="https://www.oracle.com/java/technologies/downloads/">jdk下载网址</a><br><img src="../images/8f3caa75a4bd4e52964da0d8f13632e2.png" alt="在这里插入图片描述"><br>在linux中使用uname -m查看<br>若上面的命令结果是arm就选择带有arm的，反之选择x64的<br>切换到包所在的目录，打开终端，输入tar -zxf 包名<br>切换到解压后的目录当中，复制该路径，我这里是/usr/java/jdk<br>打开终端输入vim /etc/profile,输入i进入插入模式<br>在尾部追加<br>export JAVA_HOME=/usr/java/jdk<br>export CLASSPATH=$:CLASSPATH:$JAVA_HOME/lib/<br>export PATH=$PATH:$JAVA_HOME/bin</li>
</ul>
<p>按ESC键，输入:wq按下回车<br>在终端输入source /etc/profile<br>在终端输入java -version,看看版本，若有反应则安装成功</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot访问请求404的原因</title>
    <url>//post/springboot%E8%AE%BF%E9%97%AE%E8%AF%B7%E6%B1%82404%E7%9A%84%E5%8E%9F%E5%9B%A0.html</url>
    <content><![CDATA[<blockquote>
<p>是记录，可能出现错误</p>
</blockquote>
<p>可能出现的原因<br>1.你请求的URL路径不对,比如说你请求的路径是/usr/list,GET方法,但是你UserController上面的RequestMapping是这个样子:@RequestMapping(“user”)，有可能哈<br>2.前端的请求时GET方法，后端对应的处理函数的方法是非GET方法<br>3.Controller和RestController注解混用了，两个中删除一个试试<br>4.访问的是静态资源，那么查看是否配置好了静态资源，就是把静态资源放到Resources下面的static文件夹中，也可以通过配置类来自定义存放路径<br><img src="../images/f8a50d4efbe9431d95f030f3c88acfc9.png" alt="在这里插入图片描述"><br>下面是通过配置类的方式，来配置静态资源存放的路径<br>我的静态资源是直接放在Resources下面的，新建一个类，类名随意</p>
<blockquote>
<p>继承WebMvcConfigurationSupport<br>重写addResourceHandlers方法<br>在类上面加上@Configuration注解</p>
</blockquote>
<pre><code class="lang-java">@Configuration
@Slf4j
public class WebMvcConfig extends WebMvcConfigurationSupport &#123;
    /**
     * 配置静态资源映射
     *
     * @param registry
     **/
    @Override
    protected void addResourceHandlers(ResourceHandlerRegistry registry) &#123;
        log.info(&quot;开始进行静态资源映射&quot;);
        //将路径中包含backend的请求映射到backend文件夹下

//这句话的意思是，只要请求的是/backend下面的文件都映射到Resources下面的backend文件夹下面,classpath:
        registry.addResourceHandler(&quot;/backend/**&quot;).addResourceLocations(&quot;classpath:/backend/&quot;);
//上同        
        registry.addResourceHandler(&quot;/front/**&quot;).addResourceLocations(&quot;classpath:/front/&quot;);
    &#125;
    &#125;
</code></pre>
<p>5.你的Controller类没有被扫描到，这种情况一般是启动类在一个包里面<br><img src="../images/2.jpg" alt="在这里插入图片描述"><br>解决办法:</p>
<ol>
<li>把你的启动类从包里面拿出来，放到外面，如图所示<br><img src="../images/102.jpg" alt=""><ol>
<li>用和MapperScan和scanBasePackages来指明需要扫描的包<br>如图所示<br><img src="../images/999.jpg" alt="在这里插入图片描述"></li>
</ol>
</li>
<li>项目中有多个SpringBootServletInitializer子类<br>此类问题表现是，项目按模块划分，多个模块内包含Controller。在开发调试阶段正常，单独运行每个模块也正常；使用tomcat部署后，总会随机出现一些模块的Controller访问不了的情况。<br>这种情况，多是因为每个模块都创建了SpringBootServletInitailizer子类。<br>解决办法就是只保留入口模块的SpringBootServletInitialzer子类即可<br>补充:<br>若是线上部署阶段排错思路<br>1.确定资源确实是存在的<br>2.随机测试几个接口，看看是否都是404。</li>
</ol>
<ul>
<li>如果都是404，很可能是nginx配置错误</li>
<li>如果部分404，且是按模块404，查看项目中是否有多个SpringBootServletInitializer子类</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>错误	C2371	Cheer 重定义；不同的基类型</title>
    <url>//post/%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9F%BA%E7%B1%BB%E5%9E%8B.html</url>
    <content><![CDATA[<p>错误    C2371    “Cheer”: 重定义；不同的基类型</p>
<p>问题区: <img src="../images/20200704155605706.jpg" alt="报错"></p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>这是因为c语言编译器是从上往下执行的，也就是说你必须要把使用的函数名放在main函数之前，编译器把你写的代码读进去，每看到一个函数，就记下他的名字</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>把调用的函数写到main函数前面；<br>如<br><img src="../images/20200704155947750.jpg" alt="方法一"></p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>我教程上面说可以把函数头写到main函数前面，什么叫做函数头？</p>
<pre><code class="lang-c">void Cheer()//这个就是函数头
</code></pre>
<p><img src="../images/20200704160345300.jpg" alt="方法一"><br>若上面的有错误，请各位大佬指出，谢谢</p>
]]></content>
      <tags>
        <tag>VS报错</tag>
      </tags>
  </entry>
  <entry>
    <title>判定质数</title>
    <url>//post/%E5%88%A4%E5%AE%9A%E8%B4%A8%E6%95%B0.html</url>
    <content><![CDATA[<pre><code class="lang-java">public static boolean isPrime(int n)&#123;
        if(n&lt;2)
            return false;
        for(int i=2;i&lt;=n/i;i++)&#123;
            if(n%i==0)
                return false;
        &#125;
        return true;
    &#125;
</code></pre>
<h1 id="细节1-为什么要写成i-lt-n-i呢？"><a href="#细节1-为什么要写成i-lt-n-i呢？" class="headerlink" title="细节1 为什么要写成i&lt;=n/i呢？"></a>细节1 为什么要写成i&lt;=n/i呢？</h1><h2 id="整除与整除于的区别"><a href="#整除与整除于的区别" class="headerlink" title="整除与整除于的区别"></a>整除与整除于的区别</h2><ul>
<li>“整除”通常是指一个数a能够被另一个数b整除，即存在一个整数c，使得 <code>a = b × c</code>。a 和 b 是被除数和除数，c 是商。</li>
<li>“整除于”则是指一个数 a 能够被另一个数 b 整除于，即存在一个整数 c，使得 <code>a = b × c + d</code>。在这里，d 是余数。 <h2 id="数学定理1"><a href="#数学定理1" class="headerlink" title="数学定理1"></a>数学定理1</h2><blockquote>
<p>如果n % d == 0，那么(n/d) % n == 0。<br>由整除性的定义直接推出。</p>
<p>因为n % d == 0，所以存在一个整数k，使得n = kd,也就是n /d = k</p>
<p>那么n/d = kd/d = k，因此(n/d) % n == 0。</p>
<p>例如，假设n = 15，d = 3。</p>
<p>首先，我们知道15 % 3 == 0。</p>
<p>然后，我们可以计算n/d = 15 / 3 = 5。</p>
<p>最后，我们可以验证5 % 15 == 0，即5整除15。</p>
<p>所以，这个例子证明了如果d整除于n，那么n/d必然整除于n。</p>
</blockquote>
</li>
</ul>
<h2 id="数学定理2"><a href="#数学定理2" class="headerlink" title="数学定理2"></a>数学定理2</h2><blockquote>
<p>1~n之间的质数一定都小于等于sqrt(n);<br>质数这里用p来表示<br>p&lt;=sqrt(n)<br>因为sqrt(n)是上界,<br>p=sqrt(n)<br>p^2^=n  =&gt; p = n/p = sqrt(n) 所以上界就是n/p</p>
</blockquote>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>//post/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.html</url>
    <content><![CDATA[<blockquote>
<p>记录一下过程</p>
</blockquote>
<pre><code class="lang-java">import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
public class Main&#123;
  public static void main(String[] args) throws IOException&#123;
        InputStreamReader in = new InputStreamReader(System.in);
        BufferedReader br = new BufferedReader(in);
        int num = Integer.parseInt(br.readLine());
        int[] arr = new int[num];
        String[] res = br.readLine().split(&quot; &quot;);
        for (int i = 0; i &lt; num; i++) 
            arr[i] = Integer.parseInt(res[i]);
        quickSort(arr, 0, num - 1);
        for (int i = 0; i &lt; num; i++)
            System.out.print(arr[i] + &quot; &quot;);
        br.close();
    &#125;
   public static void quickSort(int[] arr,int left,int right)&#123;
        //快速排序要写大于等于，可能会没有数
        if(left &gt;= right)return;

        int i=left-1,j=right+1,value = arr[left+right+1&gt;&gt;1];

        while (i&lt;j)&#123;
            do i++;while (arr[i]&lt; value);
            do j--;while (arr[j]&gt;value);

            if(i&lt;j)&#123;
                int temp = arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
            &#125;
        &#125;
        quickSort(arr,left,j);  
        //这里写j的话，上面的value不能取成right和left+right+1&gt;&gt;1，其他的都可以。下面的left换成j+1
        //这里写i的话，上面的value不能取成left和(left+right)/2 其他的都可以，下面的left换成i-1;
        // 反例   1,2
        quickSort(arr,j+1,right);

    &#125;
&#125;
</code></pre>
<p>小细节:</p>
<ol>
<li>指针移动的判断不带等号</li>
<li>使用do-while在判断前先移动指针</li>
<li>区间左半边是[l,j]而不是[l,i]</li>
<li>value的位置<br>写法1:<pre><code class="lang-java">value = arr[left+right&gt;&gt;1]; //只要不写成right或left+right+1&gt;&gt;1都可以
quicksort(arr,left,j);
quicksort(arr,j+1,r)
</code></pre>
写法2:<pre><code class="lang-java">value = arr[left+right+1&gt;&gt;1]; //只要不写成right或left+right+1&gt;&gt;1都可以
quicksort(arr,left,i); 
quicksort(arr,i-1,right);
</code></pre>
</li>
</ol>
<p>还有一些其他的问题，若搞懂了就回来补上来</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>求约数</title>
    <url>//post/%E6%B1%82%E7%BA%A6%E6%95%B0.html</url>
    <content><![CDATA[<blockquote>
<p>数论的一些东西</p>
</blockquote>
<p>题目描述:第一行是a，表示接下来a行是输入的数，对于每一个数要从小到大输出他的约数</p>
<p>记住一个性质，一个数的约数是成对出现的，例如</p>
<blockquote>
<p>24 能被2 整除，那么也必定会被 24/2=12整除  所以 2和12是一对<br>24 能被3 整除，那么也必定会被 24/3=8整除   所以 3和8是一对</p>
</blockquote>
<pre><code class="lang-java">import java.io.*;
import java.util.*;
public class Main &#123;
    public static void main(String[] args) throws IOException&#123;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int i = Integer.parseInt(br.readLine());
        while (i--&gt;0)&#123;
            int a = Integer.parseInt(br.readLine());
            divisor(a).forEach(b-&gt;&#123;
                System.out.print(b+&quot; &quot;);
            &#125;);
            System.out.println();
        &#125;
        br.close();
    &#125;
    public static List&lt;Integer&gt; divisor(int n)&#123;
        List&lt;Integer&gt; res = new ArrayList&lt;&gt;(10);
        for(int i=1;i&lt;=n/i;i++)&#123;

            if(n%i==0)&#123;

                res.add(i);
                //这里用到了一个约数的性质，约数都是成对出现的
                // 若 n能被 a 整除，那么a是n的约数，那么n/a 也是n的约束
                // 如 24, 24能被1整除，那么24/1=24也是n的约数
                // 24能被2整除，俺么24也能被12整除
                if(i!=n/i)
                    res.add(n/i);
            &#125;
        &#125;
        Collections.sort(res);
        return res;
    &#125;
&#125;
</code></pre>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>//post/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<blockquote>
<p>是记录看《大话设计模式》这本书的感受</p>
</blockquote>
<p>还是从一个想法开始入手，书中的是让我们写一个商场收银系统，由于我java没有学GUI的那部分，我就直接将效果图贴过来了<br><img src="../images/策略模式/商场收银系统效果图.jpg" alt="商场收银系统效果图"><br>不难写出下面的伪代码</p>
<h1 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h1><pre><code class="lang-java">总计=0;
计算总费用()&#123;
   单次费用=单价*数量
    总计累加单次费用
    将此次商品加入显示结果集合中，格式:单价:xxxx 数量: xxxx 合计:xxxx
    在界面上显示总计费用
&#125;
</code></pre>
<h1 id="1-1-增加打折"><a href="#1-1-增加打折" class="headerlink" title="1.1 增加打折"></a>1.1 增加打折</h1><p>改,将打折直接加入到下拉列表中，根据当前下拉列表选中的项来计算总费用,伪代码如下</p>
<pre><code class="lang-java">    页面初始化方法()&#123;
        将折扣力度加入到下拉列表中
        折扣力度分别是正常收费，7折，6折，索引依次是0,1,2
    &#125;
    总计=0;
    计算总费用()&#123;
        单次费用 = 单价*数量
        对当前下拉列表中选中的项做判断，根据索引对单次费用进行操作
        下面的代码和1.0版本一致
    &#125;
</code></pre>
<p>但是忽略了一个问题，是在商场使用，而商场的活动有一个特点：持续时间短，改变大。若是以上面的方式实现的话，如果商场搞出了一个满多少返多少或满多少积分减多少的活动呢？<br>商场常见的活动如下:</p>
<ol>
<li>满xxx返xxx</li>
<li>打xxx折</li>
</ol>
<p>这样的话关于打折的只用写一个类即可,初始化时传入打几折即可<br>书中的原文让我茅塞顿开</p>
<blockquote>
<p><b>面向对象的编程,并不是类越多越好,类的划分是为了封装，但分类的基础是抽象,具有相同属性和功能的对象的抽象集合才是类<b></p>
</blockquote>
<p>所有的活动抽象成CashSuper,满xx返xx,打xx折全部继承自CashSuper<br><img src="../images/策略模式/FactoryAttempt.jpg" alt=""></p>
<h1 id="融入简单工厂"><a href="#融入简单工厂" class="headerlink" title="融入简单工厂"></a>融入简单工厂</h1><pre><code class="lang-java">package test;

import java.util.Arrays;
import java.util.Scanner;

public class Write &#123;
    public static void main(String[] args) &#123;
        Scanner s = new Scanner(System.in);
        System.out.print(&quot;请输入总计费用:&quot;);
        double fees = s.nextDouble();
        System.out.println(&quot;当前活动 0:正常收费 1:7折 2:6折 3:满300减100\n请输入你选择的活动编号&quot;);
        int idx = s.nextInt();
        CashSuper cs = CashFactory.createCashSuper(fees,idx);
        System.out.print(&quot;总费用是:&quot;);
        System.out.println(cs.acceptMoney());
    &#125;
&#125;
class CashFactory&#123;
    //idx是选择的活动
    //0:正常收费 1:7折 2:6折 3:满300减100
    public static CashContext createCashSuper(double money,int idx)&#123;
        CashContext cc = null;
        switch (idx)&#123;
            case 0:
                cs = new CashContext(new CashNormal(money));
                break;
            case 1:
            case 2:
                //这里最好分开写
                cs = new CashContext(new CashDiscount(money,idx==1?0.7:0.6));
                break;
            case 3:
                cs = new CashContext(new CashReturn(money,300,100));
                break;
        &#125;
        return cs;
    &#125;
&#125;
abstract class CashSuper&#123;
    protected double money;
    public CashSuper(double money)&#123;
        this.money = money;
    &#125;
    public abstract double acceptMoney();
&#125;
class CashDiscount extends CashSuper&#123;

    private double discount;
    public CashDiscount(double money,double discount) &#123;
        super(money);
        this.discount=discount;
    &#125;

    @Override
    public double acceptMoney() &#123;
        //不打折discount就是1,把这个不打折的抽象成一个类，让每个类的职责单一化
        return money*discount;
    &#125;
&#125;
class CashNormal extends  CashSuper&#123;

    public CashNormal(double money) &#123;
        super(money);
    &#125;

    @Override
    public double acceptMoney() &#123;
        return money;
    &#125;
&#125;
class CashReturn extends CashSuper&#123;
    private double condition;//条件
    private double returnMoney;//返利
    public CashReturn(double money,double condition,double returnMoney)&#123;
        super(money);
        this.condition = condition;
        this.returnMoney = returnMoney;
    &#125;

    @Override
    public double acceptMoney() &#123;
        return this.money - Math.floor(this.money/this.condition)*this.returnMoney;
    &#125;
&#125;
</code></pre>
<p>不足之处:</p>
<ul>
<li>数据校验没写</li>
<li>如果要增加打5折和打9折的活动，这里有一个想法，根据字符串判断是那种活动，若是打折活动，将折扣截取出来，这样就不用写重复的代码了</li>
<li>如果要增加满多少积分换取奖品呢</li>
<li>如果商场要把满300减100改成满300减50呢？又要改代码，麻烦</li>
</ul>
<p>接下来上策略模式</p>
<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><blockquote>
<p>定义: 策略模式(Strategy),它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户<br>就这个例子而言，算法就是每一种活动的对钱的操作</p>
<h2 id="整体结构图"><a href="#整体结构图" class="headerlink" title="整体结构图"></a>整体结构图</h2><p><img src="../images/策略模式/StrategyPattern.jpg" alt=""></p>
</blockquote>
<p>简易策略模式</p>
<pre><code class="lang-java">class Context&#123;
    Strategy s = null;
    public Context(Strategy s)&#123;
        this.s = s;
    &#125;
    public void ContextMethod()&#123;
        s.AlgorithmMethod();
    &#125;
&#125;
abstract class Strategy&#123;
    //抽象算法方法
    public abstract void AlgorithmMethod();
&#125;
class ConcreteA extends Strategy&#123;

    @Override
    public void AlgorithmMethod() &#123;
        System.out.println(&quot;算法A实现&quot;);
    &#125;
&#125;
class ConcreteB extends Strategy&#123;

    @Override
    public void AlgorithmMethod() &#123;
        System.out.println(&quot;算法B实现&quot;);
    &#125;
&#125;
</code></pre>
<p>基于策略模式对基于简单工厂的进行改造，加一个CashContext类，改写客户端的方法，Strategy对应到这个例子就是基于简单工厂的CashSuper类。<br>CashContext类</p>
<pre><code class="lang-java">class CashContext&#123;
    CashSuper cs;
    public CashContext(int idx,double money)&#123;
       switch (idx)&#123;
            case 0:
                cs = new CashContext(new CashNormal(money));
                break;
            case 1:
            case 2:
                //这里最好分开写
                cs = new CashContext(new CashDiscount(money,idx==1?0.7:0.6));
                break;
            case 3:
                cs = new CashContext(new CashReturn(money,300,100));
                break;
        &#125;
    &#125;
    public void ContextMethod()&#123;
        cs.acceptMoney();
    &#125;
&#125;
</code></pre>
<p>客户端</p>
<pre><code class="lang-java">        CashContext cc = new CashContext(idx,fees)
        System.out.println(cc.acceptMoney());
</code></pre>
<p>搞定</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol>
<li>策略模式可以以相同的方式调用所有的算法，降低了各种算法类之间的耦合。能理解前面半句话从客户端的<code>cc.acceptMoney()</code>可以看出来，都是调用一个acceptMoney，降低各种算法之间的耦合有点感触，可能是算法之间没有彼此依赖，这样改变一个算法其他的算法不受影响</li>
<li>策略模式的Strategy类层次为Context定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中的公共功能。就这个例子而言这里的公共功能就是计算钱的功能，如果把属性算上的话，那么抽象类CashSuper的money属性也算一个。</li>
<li>策略模式简化了单元测试。这个理解不了，单元测试用过，但是没什么感触</li>
<li>针对于if语句中堆砌了大量的操作的情况，把这些大量的操作封装成一个个Strategy类，这样利用策略模式的特点之一：以相同的方式调用所有的算法，这样可以消除语句</li>
</ol>
<h2 id="面向对象的理解"><a href="#面向对象的理解" class="headerlink" title="面向对象的理解"></a>面向对象的理解</h2><blockquote>
<p>类的划分是为了封装，但划分的前提是抽象,具有相同属性和功能的对象的抽象集合才是类<b><br>继承，将共同属性和行为丢到父类中，这样减少代码冗余</p>
</blockquote>
<p>搞定</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>筛质数</title>
    <url>//post/%E7%AD%9B%E8%B4%A8%E6%95%B0.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个正整数 n<br>，请你求出 1∼n<br> 中质数的个数。</p>
<p>输入格式<br>共一行，包含整数 n。</p>
<p>输出格式<br>共一行，包含一个整数，表示 1∼n 中质数的个数。</p>
<p>数据范围</p>
<blockquote>
<p>1≤n≤106</p>
<p>输入样例：<br>8</p>
</blockquote>
<p>输出样例：</p>
<blockquote>
<p>4</p>
<h1 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h1><p>思路:</p>
<p> 开一个标记数组mark，长度是n; 遍历区间[2,sqrt(n)]之间的数字,若mark[i]为false</p>
<p>计数器加1，把所有i的倍数全部标记为true</p>
</blockquote>
<pre><code class="lang-java">void printPrime(int n)&#123;
    for(int i=2;i&lt;=n/i;i++)&#123;
        if(mark[i])
            continue;
        cnt++;
        //这个for循环也可以放到上面的if当中
        for(int j=i+i;j&lt;=n;j+=i)
            mark[j]=true;
    &#125;
&#125;
</code></pre>
<h1 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h1><p>也叫做欧拉筛,这个算法的速度要比上面的要快，数据规模不大的时候，线性筛和埃氏筛效率差不多</p>
<pre><code class="lang-java">void primer(int n)&#123;
    for(int i=2;i&lt;=n;i++)&#123;
        if(mark[i])
            continue;
        primer[cnt++]=i;
        //考虑到，primer[j]*i可能会越界,所以换成 primer[j]&lt;=n/i;    
        for(int j=0; primer[j]*i&lt;=n;j++)&#123;
            mark[primer[j]*i]=true;
            if(i % primer[j]==0)// i在素数表里面找到了他的最小质因数，直接跳出循环即可
                break;
        &#125;
    &#125;
&#125;
</code></pre>
<p>这个还有优化的空间，待会再学</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>简单工厂模式</title>
    <url>//post/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<blockquote>
<p>这个系列主要是记录我看大话设计模式这一本书的一些感受，会有部分图片是来自于《大话设计模式》这本书</p>
</blockquote>
<p>设计一个计算器,以java为例</p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><h1 id="第一个版本"><a href="#第一个版本" class="headerlink" title="第一个版本"></a>第一个版本</h1><p>不费吹灰之力，轻松拿下</p>
<pre><code class="lang-java">import java.util.Scanner;

class Study&#123;
    public static void main(String[] args) &#123;
        Scanner s = new Scanner(System.in);
        System.out.print(&quot;请输入数字A:&quot;);
        double numsA = s.nextDouble();
        System.out.print(&quot;请输入运算符号:&quot;);
        String operator = s.next().strip();
        System.out.print(&quot;请输入数字B:&quot;);
        double numsB = s.nextDouble();
        System.out.println(calculate(numsA,numsB,operator));
        s.close();
    &#125;
    public static String calculate(double a,double b,String operator)&#123;
        StringBuilder sb = new StringBuilder();
        switch (operator)&#123;
            case &quot;+&quot;:
                sb.append(String.format(&quot;%.1f + %.1f = %.1f&quot;,a,b,a+b));
                break;
            case &quot;-&quot;:
                sb.append(String.format(&quot;%.1f - %.1f = %.1f&quot;,a,b,a-b));
                break;
            case &quot;*&quot;:
                sb.append(String.format(&quot;%.1f * %.1f = %.1f&quot;,a,b,a*b));
                break;
            case &quot;/&quot;:
                sb.append(String.format(&quot;%.1f / %.1f = %.11f&quot;,a,b,a/b));
                break;
            default:
                return &quot;运算符不支持或错误&quot;;
        &#125;
        return sb.toString();
    &#125;
&#125;
</code></pre>
<h2 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h2><ol>
<li>运算符这一参数特别可能输错,用户怎么知道你支持哪些运算符?</li>
<li>对于异常没有处理,如除以0的异常没有处理</li>
</ol>
<h1 id="第二个版本"><a href="#第二个版本" class="headerlink" title="第二个版本"></a>第二个版本</h1><p>加异常处理</p>
<pre><code class="lang-java">import java.util.Scanner;

class Study&#123;
    public static void main(String[] args) &#123;
        Scanner s = new Scanner(System.in);
        System.out.print(&quot;请输入数字A:&quot;);
        double numsA = s.nextDouble();
        System.out.print(&quot;请输入运算符号(+ - * /):&quot;); //这里用图形化界面可能更好点
        String operator = s.next().strip();
        while(isOperator(operator))&#123;
            System.out.print(&quot;不正确，重新输入:&quot;)
            opertaor = s.next().strip();    
        &#125;
        System.out.print(&quot;请输入数字B:&quot;);
        double numsB = s.nextDouble();
        System.out.println(calculate(numsA,numsB,operator));
        s.close();
    &#125;
    public static boolean isOperator(String s)&#123;
        switch(s)&#123;
            case &quot;+&quot;:
            case &quot;-&quot;:
            case &quot;*&quot;:
            case &quot;/&quot;:
                return true;
        &#125;
        return false;
    &#125;
    public static String calculate(double a,double b,String operator)&#123;
        StringBuilder sb = new StringBuilder();
        switch (operator)&#123;
            case &quot;+&quot;:
                sb.append(String.format(&quot;%.1f + %.1f = %.1f&quot;,a,b,a+b));
                break;
            case &quot;-&quot;:
                sb.append(String.format(&quot;%.1f - %.1f = %.1f&quot;,a,b,a-b));
                break;
            case &quot;*&quot;:
                sb.append(String.format(&quot;%.1f * %.1f = %.1f&quot;,a,b,a*b));
                break;
            case &quot;/&quot;:
                if(b==0)
                    return &quot;不能除0&quot;;
                sb.append(String.format(&quot;%.1f / %.1f = %.11f&quot;,a,b,a/b));
                break;
            default:
                return &quot;运算符不支持或错误&quot;;
        &#125;
        return sb.toString();
    &#125;
&#125;
</code></pre>
<h2 id="第三个版本"><a href="#第三个版本" class="headerlink" title="第三个版本"></a>第三个版本</h2><h3 id="一些感悟"><a href="#一些感悟" class="headerlink" title="一些感悟"></a>一些感悟</h3><p>以下感受是结合活字印刷的</p>
<ul>
<li>可维护性:只用改想改的地方，不用改不想改的地方，或者说只用改局部，不用改整体。比如文章局部不好，只需要对局部进行修改，而不用改整体</li>
<li>可复用性:按功能点划分，形成一个组件，这样可以在以后的业务中能反复使用，公司里好像叫组件库或者构件库。我的理解就是一个字不可能只用一次，常用的字在文章中有大量的使用</li>
<li>可扩展性: 加功能点很容易。结合活字印刷来说就是添加文字特别简单</li>
<li>灵活性好:通过简易的操作来实现一些简单的功能。</li>
</ul>
<p>设计过程:在整个过程中，只有运算的数在改变，运算规则不变，将运算规则抽取出来（作为一个类operator，+-*/都继承operator即可），运算的数字作为参数传递过去。</p>
<p>Operator类</p>
<pre><code class="lang-java">
abstract class Operator&#123;
    public Double getA() &#123;
        return a;
    &#125;

    public void setA(Double a) &#123;
        this.a = a;
    &#125;

    public Double getB() &#123;
        return b;
    &#125;

    public void setB(Double b) &#123;
        this.b = b;
    &#125;

    private Double a,b;
    public Operator(Double a,Double b)&#123;
        this.a = a;
        this.b = b;
    &#125;
    public Operator()&#123;

    &#125;
    public abstract double getResult();
&#125;
&#125;
</code></pre>
<p>加减乘除类</p>
<pre><code class="lang-java">class Add extends Operator&#123;


    @Override
    public double getResult() &#123;
        return getA()+getB();
    &#125;
&#125;
class Sub extends Operator&#123;
    @Override
    public double getResult() &#123;
        return getA() - getB();
    &#125;
&#125;
class Mul extends Operator&#123;
    @Override
    public double getResult() &#123;
        return getA()*getB();
    &#125;
&#125;
class Div extends Operator&#123;


    @Override
    public double getResult()throws ArithmeticException &#123;
        double res = 0;
        if(getB()==0)
            throw new ArithmeticException(&quot;除数为0&quot;);
        else res = getA()/getB();
        return res;
    &#125;
&#125;
</code></pre>
<p>工厂类</p>
<pre><code class="lang-java">class OperatorFactory&#123;
    public static Operator GenerateOperatorByCharacter(String s)&#123;
        Operator res = null;
        switch (s)&#123;
            case &quot;+&quot;:
                res = new Add();
                break;
            case &quot;-&quot;:
                res = new Sub();
                break;
            case &quot;*&quot;:
                res = new Mul();
                break;
            case &quot;/&quot;:
                res = new Div();
                break;
        &#125;
        return res;
    &#125;
&#125;
</code></pre>
<p>主程序</p>
<pre><code class="lang-java">    public static void main(String[] args) &#123;
        Scanner s = new Scanner(System.in);
        System.out.print(&quot;请输入数字A:&quot;);
        double numsA = s.nextDouble();
        System.out.print(&quot;请输入运算符号:&quot;);
        String operator = s.next().strip();
        System.out.print(&quot;请输入数字B:&quot;);
        double numsB = s.nextDouble();
        Operator operator1 = OperatorFactory.GenerateOperatorByCharacter(operator);
        operator1.setA(numsA);
        operator1.setB(numsB);
        System.out.println(operator1.getResult());
        s.close();
    &#125;
</code></pre>
<p>这样一来若加入其他运算只用加类，在工厂方法中加入代码即可</p>
<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><p>这个多看看就行，来看一个比较全的图<br><img src="../images/Snipaste_2023-12-11_15-30-40.jpg" alt="UML类图全"></p>
<p>在UML中+-#的含义如下<br>| 符号 | 表示的修饰符 |<br>| —— | —————— |<br>| +    | public       |<br>| -    | private      |<br>| #    | protected    |</p>
<blockquote>
<p>在UML图中‘+’表示public,’-‘表示private,’#’表示protected</p>
<h2 id="类的表示"><a href="#类的表示" class="headerlink" title="类的表示"></a>类的表示</h2><p>从动物这个类开始解析<br><img src="../images/animal%20resolve.jpg" alt="解析动物类"><br><b>一个矩形框就是一个类，第一层就是类名，如果是抽象类，类名须用斜体，第二层是属性和字段，第三层是方法或行为。</p>
</blockquote>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>表示:虚线的实心箭头<br>我的个人理解就是在B中用到了A，那么B就依赖于A，B受制于A。<br><img src="../images/resolveDependency.jpg" alt=""><br>想起了一张图片：燕子，没有你我可怎么活啊<br><img src="../images/explainDependency.gif" alt=""></p>
<h2 id="接口的表示"><a href="#接口的表示" class="headerlink" title="接口的表示"></a>接口的表示</h2><p>和类表示的不同之处主要在于其顶端有《interface》，第一行是接口名称；第二行是接口方法；<br><img src="../images/interface.jpg" alt=""><br>还有一种方式来表示接口,以下面的图为例，应该是唐老鸭实现了讲人话的接口<br><img src="../images/ExpressInterfaceTwo.jpg" alt=""></p>
<h2 id="继承类和实现接口的表示"><a href="#继承类和实现接口的表示" class="headerlink" title="继承类和实现接口的表示"></a>继承类和实现接口的表示</h2><p>实现接口是用空心三角形+虚线来表示.例如:<br><img src="../images/inherit.jpg" alt=""><br>继承使用空心三角形+实线来表示<br><img src="../images/implementaInterface.jpg" alt=""></p>
<h2 id="关联的表示"><a href="#关联的表示" class="headerlink" title="关联的表示"></a>关联的表示</h2><p>表示：用实现箭头来表示<br><img src="../images/association.jpg" alt=""><br>此书中表示：当一个类“知道”另一个类时，可以用关联。但是让我不理解的是什么叫做知道？</p>
<h2 id="聚合的表示"><a href="#聚合的表示" class="headerlink" title="聚合的表示"></a>聚合的表示</h2><p>用空心的菱形+实现箭头来表示<br><img src="../images/aggregation.jpg" alt=""><br>表示一种<b>弱</b>的‘拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分。</p>
<blockquote>
<p>弱的体现<br>个体离开了群体还能存活</p>
<h2 id="组合的表示"><a href="#组合的表示" class="headerlink" title="组合的表示"></a>组合的表示</h2><p>用<b>实心的菱形+实现箭头</b>来表示<br><img src="../images/Composition.jpg" alt=""><br>其表示一种<b>强</b>的拥有关系，说人话就是群体离开了个体，这个群体就废了.以图片为例，鸟没了翅膀不就废了吗<br>图片上的1和2是表示基数<br>2：表示1只鸟有两个翅膀<br>1：表示两个翅膀对应一只鸟</p>
</blockquote>
<h2 id="总结篇"><a href="#总结篇" class="headerlink" title="总结篇"></a>总结篇</h2><p>这里只总结容易混的东西<br>| 关系     | 表示                | 技巧                               | 指向           |<br>| ———— | —————————- | ————————————————— | ——————— |<br>| 继承     | 实线空心三角形      | 继承的都是具体的东西，用实线       | 从子类指向父类 |<br>| 实现接口 | 虚线空心三角形      | 实现的是相较于比较虚的，用虚线     | 从类指向接口   |<br>| 组合     | 实心菱形+实线箭头   | ，由于比较强（内心丰盈）所以是实心 | 部分指向整体   |<br>| 聚合     | 空心的菱形+实线箭头 | 约束性不强，空心                   | 部分指向整体   |</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>约数个数</title>
    <url>//post/%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0.html</url>
    <content><![CDATA[<p>这个是纯粹的欧拉函数转换，原理暂时不太清楚，这周末开始补</p>
<pre><code class="lang-java">import java.io.*;
import java.util.*;

public class Main &#123;
    public static void main(String[] args) throws IOException&#123;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int cnt = Integer.parseInt(br.readLine());
        while(cnt--&gt;0)&#123;
            int n = Integer.parseInt(br.readLine());
            long res = n;
            for(int i=2;i&lt;=n/i;i++)&#123;
                if(n%i==0)&#123;
                    res = res/i *(i-1);
                    while (n%i==0)
                        n/=i;
                &#125;
            &#125;
            //一个数最多只有一个大于其平方根的因子，能进到这里来表明就是那个因子
            if(n&gt;1)
                res = res / n *(n-1);
            System.out.println(res);
        &#125;
        br.close();
    &#125;

&#125;
</code></pre>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>数论</tag>
      </tags>
  </entry>
</search>
