<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Poem</title>
    <url>//post/Poem.html</url>
    <content><![CDATA[<p><strong>杨花落尽子规啼，闻道龙标过五溪</strong></p>
<p><strong>我寄愁心与明月，随风直到夜郎西</strong></p>
<p><strong>倘若相逢即别离</strong></p>
<p><strong>迢迢千里无期</strong></p>
<p><strong>此地 何时 再相遇</strong></p>
]]></content>
      <tags>
        <tag>诗词</tag>
        <tag>李白</tag>
      </tags>
  </entry>
  <entry>
    <title>BombLab</title>
    <url>//post/BombLab.html</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>6关卡，每个关卡需要输入相应的内容，通过逆向工程来获取对应关卡的通过条件</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>需要用到gdb调试器</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apt-get install gdb</code></pre>
<p>系统: Ubuntu 22.04</p>
<p>本实验会用到的gdb调试器的指令如下</p>
<blockquote>
<p>r或者 run或者run filename 		运行程序,run filename就是用filename中的内容作为输入<br>b *address			在某个地址设置断点<br>d或delete				删除所有断点<br>d 断点号				删除指定断点<br>info b					查看所有断点信息<br>x&#x2F;参数 地址			查看指针解引用后的值，参数可以是s(字符串),d(十进制),x(十六进制),地址若是寄存器需要加上$<br>info register 或info r	查看所有寄存器的值<br>disas functionName	生成functionName的汇编代码<br>stepi 执行一个汇编指令<br>layout asm 窗口分为两部分，上面是将要执行的汇编代码，下面输入gdb调试命令</p>
</blockquote>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="寄存器的东西"><a href="#寄存器的东西" class="headerlink" title="寄存器的东西"></a>寄存器的东西</h3><p>这里面有一些寄存器的知识，了解即可<br>%rsp (register stack pointer) 栈指针<br>%esi:通用寄存器，长应用于指针或索引<br>%rax:<strong>存储函数的返回值</strong>,存储临时数据,系统调用号<br>%r12,%rbx:通用寄存器,参数传递的<br>%rbp(register base pointer):通常是当作基址指针来用</p>
<h3 id="指令相关"><a href="#指令相关" class="headerlink" title="指令相关"></a>指令相关</h3><h3 id="test-destination-source"><a href="#test-destination-source" class="headerlink" title="test destination,source"></a>test destination,source</h3><p>destination和source可以是寄存器,内存地址,立即数.对两个操作数进行<strong>按位逻辑与</strong>操作,会更新下面寄存器的状态</p>
<ul>
<li><strong>Zero flag(ZF):若结果为0，则设置为1,反之为0，这个若为1表明两个操作数相等或者某个操作数等于0</strong></li>
<li>Sign flag (SF):若结果最高位为1,则为1,反之为0</li>
<li>Overflow flag(OF):有符号数溢出则为1,反之为0</li>
<li>Carry flag(CF):无符号数溢出则为1,反之为0</li>
<li>Parity flag(PF):结果的低8位包含奇数个1则为1，反之为0</li>
</ul>
<h3 id="je-destination"><a href="#je-destination" class="headerlink" title="je destination"></a>je destination</h3><p>若ZF为1则跳转到destination处</p>
<h1 id="开干"><a href="#开干" class="headerlink" title="开干"></a>开干</h1><h2 id="Phase-1-字符串比较"><a href="#Phase-1-字符串比较" class="headerlink" title="Phase 1 字符串比较"></a>Phase 1 字符串比较</h2><p>终端输入gdb bomb<br>在输入disas phase_1,结果如下</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">0x0000000000400ee0 &lt;+0&gt;:	sub    $0x8,%rsp &#x2F;&#x2F; 把栈指针减少8，给局部变量提供空间
0x0000000000400ee4 &lt;+4&gt;:	mov    $0x402400,%esi &#x2F;&#x2F; 将0x402400存储到%esi中，这个有可能是存放我们输入的值或者存放内置字符串的
0x0000000000400ee9 &lt;+9&gt;:	call   0x401338 &lt;strings_not_equal&gt;&#x2F;&#x2F;调用了函数strings_not_equal,估计是判断输入的字符串和内置字符串是否相同，相同返回0
0x0000000000400eee &lt;+14&gt;:	test   %eax,%eax  &#x2F;&#x2F;判断%eax(函数strings_not_equal的返回值)是否为0，若为0则ZF&#x3D;1
0x0000000000400ef0 &lt;+16&gt;:	je     0x400ef7 &lt;phase_1+23&gt; &#x2F;&#x2F; ZF为1就跳转，反之顺序执行
0x0000000000400ef2 &lt;+18&gt;:	call   0x40143a &lt;explode_bomb&gt;&#x2F;&#x2F;拆弹失败，炸弹爆炸
0x0000000000400ef7 &lt;+23&gt;:	add    $0x8,%rsp &#x2F;&#x2F;回收栈指针
0x0000000000400efb &lt;+27&gt;:	ret    </code></pre>
<p>把断点打到0x0000000000400ee9的位置,开始run,随便输点东西</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">b *0x400ee9
run
x&#x2F;s 0x402400	</code></pre>
<p>结果发现0x402400就是我们想要的东西:Border relations with Canada have never been better.<br>那么我们输入的东西到哪里去了?断点打到strings_not_equal里面,查看strings_not_equal汇编代码（在gdb中输入disas strings_not_equal）</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">Dump of assembler code for function strings_not_equal:
   0x0000000000401338 &lt;+0&gt;:	push   %r12
   0x000000000040133a &lt;+2&gt;:	push   %rbp 
   0x000000000040133b &lt;+3&gt;:	push   %rbx
   0x000000000040133c &lt;+4&gt;:	mov    %rdi,%rbx
   0x000000000040133f &lt;+7&gt;:	mov    %rsi,%rbp
   0x0000000000401342 &lt;+10&gt;:	call   0x40131b &lt;string_length&gt;
   0x0000000000401347 &lt;+15&gt;:	mov    %eax,%r12d
   0x000000000040134a &lt;+18&gt;:	mov    %rbp,%rdi
   0x000000000040134d &lt;+21&gt;:	call   0x40131b &lt;string_length&gt;
   0x0000000000401352 &lt;+26&gt;:	mov    $0x1,%edx
   0x0000000000401357 &lt;+31&gt;:	cmp    %eax,%r12d
   0x000000000040135a &lt;+34&gt;:	jne    0x40139b &lt;strings_not_equal+99&gt;
   0x000000000040135c &lt;+36&gt;:	movzbl (%rbx),%eax
   0x000000000040135f &lt;+39&gt;:	test   %al,%al
   0x0000000000401361 &lt;+41&gt;:	je     0x401388 &lt;strings_not_equal+80&gt;
   0x0000000000401363 &lt;+43&gt;:	cmp    0x0(%rbp),%al
   0x0000000000401366 &lt;+46&gt;:	je     0x401372 &lt;strings_not_equal+58&gt;
   0x0000000000401368 &lt;+48&gt;:	jmp    0x40138f &lt;strings_not_equal+87&gt;
   0x000000000040136a &lt;+50&gt;:	cmp    0x0(%rbp),%al
   0x000000000040136d &lt;+53&gt;:	nopl   (%rax)
   0x0000000000401370 &lt;+56&gt;:	jne    0x401396 &lt;strings_not_equal+94&gt;
   0x0000000000401372 &lt;+58&gt;:	add    $0x1,%rbx
</code></pre>
<p>断点打到0x401338的位置，运行程序<br>不停的stepi，知道运行到了第一次调用string_length函数,字符串一般来说是需要一个基址的,所以找能充当基指指针的寄存器,下面是试探过程</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">x&#x2F;s $rbp &#x2F;&#x2F;这个是内置字符串
x&#x2F;s $rbx &#x2F;&#x2F;这个是我们输入的字符串</code></pre>
<h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><blockquote>
<p>Border relations with Canada have never been better.</p>
</blockquote>
<p>进入strings_not_equal函数才能看到我们输入的字符串是保存在%rbx这个寄存器当中的</p>
<h2 id="phase-2-循环"><a href="#phase-2-循环" class="headerlink" title="phase_2 循环"></a>phase_2 循环</h2><p>disas phase_2得到如下代码(我分成了两部分,这个是前面一部分)</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">0x0000000000400efc &lt;+0&gt;:	push   %rbp  
0x0000000000400efd &lt;+1&gt;:	push   %rbx 
0x0000000000400efe &lt;+2&gt;:	sub    $0x28,%rsp
0x0000000000400f02 &lt;+6&gt;:	mov    %rsp,%rsi
0x0000000000400f05 &lt;+9&gt;:	call   0x40145c &lt;read_six_numbers&gt; &#x2F;&#x2F;这里从名字可以知道要输入6个数字，那么是整形还是浮点数呢?这里先输入6个整形试试</code></pre>
<p>输入stepi进入到read_six_numbers函数中，disas read_six_numbers得到下面的代码</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">Dump of assembler code for function read_six_numbers:
   0x000000000040145c &lt;+0&gt;:	sub    $0x18,%rsp  &#x2F;&#x2F; 这个不用管
   0x0000000000401460 &lt;+4&gt;:	mov    %rsi,%rdx
   0x0000000000401463 &lt;+7&gt;:	lea    0x4(%rsi),%rcx
   0x0000000000401467 &lt;+11&gt;:	lea    0x14(%rsi),%rax
   0x000000000040146b &lt;+15&gt;:	mov    %rax,0x8(%rsp)
   0x0000000000401470 &lt;+20&gt;:	lea    0x10(%rsi),%rax
   0x0000000000401474 &lt;+24&gt;:	mov    %rax,(%rsp)
   0x0000000000401478 &lt;+28&gt;:	lea    0xc(%rsi),%r9
   0x000000000040147c &lt;+32&gt;:	lea    0x8(%rsi),%r8
   0x0000000000401480 &lt;+36&gt;:	mov    $0x4025c3,%esi   &#x2F;&#x2F;看看%esi寄存器的内容
   0x0000000000401485 &lt;+41&gt;:	mov    $0x0,%eax
   0x000000000040148a &lt;+46&gt;:	call   0x400bf0 &lt;__isoc99_sscanf@plt&gt;
   0x000000000040148f &lt;+51&gt;:	cmp    $0x5,%eax
   0x0000000000401492 &lt;+54&gt;:	jg     0x401499 &lt;read_six_numbers+61&gt;
   0x0000000000401494 &lt;+56&gt;:	call   0x40143a &lt;explode_bomb&gt;
   0x0000000000401499 &lt;+61&gt;:	add    $0x18,%rsp
   0x000000000040149d &lt;+65&gt;:	ret    </code></pre>
<p>注意这一行<code>mov    $0x4025c3,%esi</code>,因为字符串是不可变的，地址固定死了，所以找立即数<br>esi寄存器的内容为<br><img src="/../images/bomb_phrase2.jpg" alt="在这里插入图片描述"><br>六个整形数据猜测是对的，我们输入1 2 3 4 5 6试试<br>继续阅读phase_2后部分的代码</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">0x0000000000400f05 &lt;+9&gt;:	call   0x40145c &lt;read_six_numbers&gt;
   0x0000000000400f0a &lt;+14&gt;:	cmpl   $0x1,(%rsp) &#x2F;&#x2F; (%rsp)&#x3D;*rsp 就是我们输入的第一个数字1
   0x0000000000400f0e &lt;+18&gt;:	je     0x400f30 &lt;phase_2+52&gt; &#x2F;&#x2F; 判断是否相等，相等就跳转
   0x0000000000400f10 &lt;+20&gt;:	call   0x40143a &lt;explode_bomb&gt; &#x2F;&#x2F;否则就炸了
   0x0000000000400f15 &lt;+25&gt;:	jmp    0x400f30 &lt;phase_2+52&gt;
   0x0000000000400f17 &lt;+27&gt;:	mov    -0x4(%rbx),%eax &#x2F;&#x2F; eax保存的是我们输入的第一个数，把rbx存放的值减4
   0x0000000000400f1a &lt;+30&gt;:	add    %eax,%eax  &#x2F;&#x2F; eax*&#x3D;2
   0x0000000000400f1c &lt;+32&gt;:	cmp    %eax,(%rbx) &#x2F;&#x2F; 比较eax的值和rbx(就是第二个值)是否相等
   0x0000000000400f1e &lt;+34&gt;:	je     0x400f25 &lt;phase_2+41&gt; &#x2F;&#x2F; 相等就跳转
   0x0000000000400f20 &lt;+36&gt;:	call   0x40143a &lt;explode_bomb&gt; &#x2F;&#x2F;反之爆炸
   0x0000000000400f25 &lt;+41&gt;:	add    $0x4,%rbx &#x2F;&#x2F; rbx 保存的是第三个值
   0x0000000000400f29 &lt;+45&gt;:	cmp    %rbp,%rbx &#x2F;&#x2F; 看看是否遍历完了
   0x0000000000400f2c &lt;+48&gt;:	jne    0x400f17 &lt;phase_2+27&gt;
   0x0000000000400f2e &lt;+50&gt;:	jmp    0x400f3c &lt;phase_2+64&gt;
   0x0000000000400f30 &lt;+52&gt;:	lea    0x4(%rsp),%rbx &#x2F;&#x2F; 0x4(%rsp)&#x3D;我们输入的第二个数,加4的原因是因为int类型是4个字节
   0x0000000000400f35 &lt;+57&gt;:	lea    0x18(%rsp),%rbp&#x2F;&#x2F; 0x18转换为十进制数为24,也就是第6个数字后面的第一个存储单元
   0x0000000000400f3a &lt;+62&gt;:	jmp    0x400f17 &lt;phase_2+27&gt;
   0x0000000000400f3c &lt;+64&gt;:	add    $0x28,%rsp</code></pre>


<p>意思如下<br>程序开始时,将 <code>(%rsp)</code> 的值与立即数<code>$0x1</code>进行比较，所以第一个输入数必须为1，跳转至400f30，用lea指令分别加载<code>%rsp+4</code>和<code>%rsp+24</code>对应的地址到%rbx和%rbp，因为int型数据占4个字节，所以%rbx和%rbp分别存放第2个输入数的地址和第6个输入数的后一块的地址<br>后跳转至400f17，此时<code>(%rbx-4)</code>对应的值即<code>(%rsp)</code>对应的值，将其存放值<code>%eax</code>中，将该值*2后与<code>(%rbx)</code>对应的值（即第二个输入值）进行比较，即后一个数是前一个数的2倍，所以第二个输入值必须为2，后跳转至400f25，得到<code>%rbx=%rbx+4</code>，与<code>%rbp</code>进行比较（<code>%rbx</code>对应的值(地址)是否为<code>%rbp</code>对应的值(地址)），若不相等则又跳转至400f17重复操作，若相等，则跳转至400f3c，结束循环，可知这是一个循环操作，看是否比较完6个数。</p>
<p>循环中寄存器对应的值为:</p>
<table>
<thead>
<tr>
<th>%rbx</th>
<th>%rbp</th>
<th>%eax</th>
</tr>
</thead>
<tbody><tr>
<td>%rsp+4</td>
<td>%rsp+24</td>
<td>(%rsp)*2&#x3D;2</td>
</tr>
<tr>
<td>%rsp+8</td>
<td></td>
<td>(%rsp)*2&#x3D;4</td>
</tr>
<tr>
<td>%rsp+12</td>
<td></td>
<td>(%rsp)*2&#x3D;8</td>
</tr>
<tr>
<td>%rsp+16</td>
<td></td>
<td>(%rsp)*2&#x3D;16</td>
</tr>
<tr>
<td>%rsp+20</td>
<td></td>
<td>(%rsp)*2&#x3D;32</td>
</tr>
<tr>
<td>%rsp+24</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>c代码如下</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">int main()&#123;
	int[] array &#x3D; new int[6];
	for(int i&#x3D;1;i&lt;6;i++)
		array[i]&#x3D;array[i-1]*2;
	return 0;
&#125;</code></pre>

<h3 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h3><blockquote>
<p>1 2 4 8 16 32</p>
</blockquote>
<p>输入的第一个数时保存在(%rsp)中</p>
<h2 id="phase-3-分支语句"><a href="#phase-3-分支语句" class="headerlink" title="phase_3 分支语句"></a>phase_3 分支语句</h2><p>对汇编代码进行分析</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">Dump of assembler code for function phase_3:
   0x0000000000400f43 &lt;+0&gt;:	sub    $0x18,%rsp
   0x0000000000400f47 &lt;+4&gt;:	lea    0xc(%rsp),%rcx &#x2F;&#x2F;这个可能是存储第二个数的
   0x0000000000400f4c &lt;+9&gt;:	lea    0x8(%rsp),%rdx&#x2F;&#x2F;这个可能是存储第一个数的
   0x0000000000400f51 &lt;+14&gt;:	mov    $0x4025cf,%esi  &#x2F;&#x2F;出现立即数了,后面调用了scanf，这里应该是初始化的，在gdb 中用x&#x2F;s $esi 可以得到 %d %d
   0x0000000000400f56 &lt;+19&gt;:	mov    $0x0,%eax
   0x0000000000400f5b &lt;+24&gt;:	call   0x400bf0 &lt;__isoc99_sscanf@plt&gt;
   0x0000000000400f60 &lt;+29&gt;:	cmp    $0x1,%eax&#x2F;&#x2F;%eax存储函数的返回值的，scanf的函数返回值就是输入数据的个数
   0x0000000000400f63 &lt;+32&gt;:	jg     0x400f6a &lt;phase_3+39&gt;&#x2F;&#x2F;若大于1就跳转
   0x0000000000400f65 &lt;+34&gt;:	call   0x40143a &lt;explode_bomb&gt;&#x2F;&#x2F;否则就爆炸
   0x0000000000400f6a &lt;+39&gt;:	cmpl   $0x7,0x8(%rsp)
   0x0000000000400f6f &lt;+44&gt;:	ja     0x400fad &lt;phase_3+106&gt;&#x2F;&#x2F;无符号大于则跳转，跳转就爆炸了，所以第一个数必须小于7，可以等于,但是不能是负数
   0x0000000000400f71 &lt;+46&gt;:	mov    0x8(%rsp),%eax&#x2F;&#x2F;%eax存储的是输入的第一个数
   0x0000000000400f75 &lt;+50&gt;:	jmp    *0x402470(,%rax,8) &#x2F;&#x2F;*0x402470 &#x3D; 124,通过x&#x2F;d 0x402470得到, rax是64位的，eax是32位的，就是说eax是rax的低32位，这里应该是124+%rax*8(%rax就是我们输入的第一个数)来实现跳转。
   0x0000000000400f7c &lt;+57&gt;:	mov    $0xcf,%eax
   0x0000000000400f81 &lt;+62&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;
   0x0000000000400f83 &lt;+64&gt;:	mov    $0x2c3,%eax
   0x0000000000400f88 &lt;+69&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;
   0x0000000000400f8a &lt;+71&gt;:	mov    $0x100,%eax
   0x0000000000400f8f &lt;+76&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;
   0x0000000000400f91 &lt;+78&gt;:	mov    $0x185,%eax
   0x0000000000400f96 &lt;+83&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;
   0x0000000000400f98 &lt;+85&gt;:	mov    $0xce,%eax
--Type &lt;RET&gt; for more, q to quit, c to continue without paging--
   0x0000000000400f9d &lt;+90&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;
   0x0000000000400f9f &lt;+92&gt;:	mov    $0x2aa,%eax
   0x0000000000400fa4 &lt;+97&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;
   0x0000000000400fa6 &lt;+99&gt;:	mov    $0x147,%eax
   0x0000000000400fab &lt;+104&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;
   0x0000000000400fad &lt;+106&gt;:	call   0x40143a &lt;explode_bomb&gt;
   0x0000000000400fb2 &lt;+111&gt;:	mov    $0x0,%eax
   0x0000000000400fb7 &lt;+116&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;
   0x0000000000400fb9 &lt;+118&gt;:	mov    $0x137,%eax
   0x0000000000400fbe &lt;+123&gt;:	cmp    0xc(%rsp),%eax
   0x0000000000400fc2 &lt;+127&gt;:	je     0x400fc9 &lt;phase_3+134&gt;
   0x0000000000400fc4 &lt;+129&gt;:	call   0x40143a &lt;explode_bomb&gt;
   0x0000000000400fc9 &lt;+134&gt;:	add    $0x18,%rsp
   0x0000000000400fcd &lt;+138&gt;:	ret    
End of assembler dump.</code></pre>
<p>第一个数的范围是在[0,7]之间，开始试探<br>n1&#x3D;0,跳转到0x400f7c,若n2!&#x3D;0xcf,则爆炸<br>n1&#x3D;1,跳转到0x400fb9,若n2!&#x3D;0x137,则爆炸<br>n1&#x3D;2,跳转到0x400f83,若n2!&#x3D;0x2c3,则爆炸<br>n1&#x3D;3,跳转到0x400f8a,若n2!&#x3D;0x100,则爆炸<br>n1&#x3D;4,跳转到0x400f91,若n2!&#x3D;0x185,则爆炸<br>n1&#x3D;5,跳转到0x400f98,若n2!&#x3D;0xce,则爆炸<br>n1&#x3D;6,跳转到0x400f9f,若n2!&#x3D;0x2aa,则爆炸<br>n1&#x3D;7,跳转到0x400fa6,若n2!&#x3D;0x147,则爆炸</p>
<p>c代码</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">void phase_3(char* input)&#123;
	&#x2F;&#x2F;0x8(%rsp) 0xc(%rsp)
	int n1,n2;
	&#x2F;&#x2F;res存放返回输入数据的个数
	int res &#x3D; sscanf(input,&quot;%d %d&quot;,&amp;n1,&amp;n2);
	if(res&lt;&#x3D;1)
		explode_bomb();
	switch(n1)&#123;
		case 0:
		if(n2!&#x3D;0xcf)
			explode_bomb();
		break;
		case 1:
		if(n2!&#x3D;0x137)
			explode_bomb();
		break;
		case 2:
		if(n2!&#x3D;0x2c3)
			explode_bomb();
		break;
		case 3:
		if(n2!&#x3D;0x100)
			explode_bomb();
		break;
		case 4:
		if(n2!&#x3D;0x185)
			explode_bomb();
		break;
		case 5:
		if(n2!&#x3D;0xce)
			explode_bomb();
		break;
		case 6:
		if(n2!&#x3D;0x2aa)
			explode_bomb();
		break;
		case 7:
		if(n2!&#x3D;0x147)
			explode_bomb();
		break;
	&#125;
&#125;</code></pre>


<h3 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h3><ul>
<li>0 207</li>
<li>1 311</li>
<li>2 707</li>
<li>3 256</li>
<li>4 389</li>
<li>5 206</li>
<li>6 682</li>
<li>7 327</li>
</ul>
<h2 id="phase-4-递归"><a href="#phase-4-递归" class="headerlink" title="phase_4 递归"></a>phase_4 递归</h2><p>分析汇编代码</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">Dump of assembler code for function phase_4:
   0x000000000040100c &lt;+0&gt;:	sub    $0x18,%rsp	# 给局部变量腾出空间
   0x0000000000401010 &lt;+4&gt;:	lea    0xc(%rsp),%rcx   # 我们输入的第二个数
   0x0000000000401015 &lt;+9&gt;:	lea    0x8(%rsp),%rdx	# 我们输入的第一个数
   0x000000000040101a &lt;+14&gt;:	mov    $0x4025cf,%esi	# 通过x&#x2F;s 0x4025cf 可以得到是格式化字符串&quot;%d %d&quot;
   0x000000000040101f &lt;+19&gt;:	mov    $0x0,%eax        # 这个就不说了
   0x0000000000401024 &lt;+24&gt;:	call   0x400bf0 &lt;__isoc99_sscanf@plt&gt; # 调用了scanf函数
   0x0000000000401029 &lt;+29&gt;:	cmp    $0x2,%eax	# 如果输入的数字个数不等于2就爆炸了
   0x000000000040102c &lt;+32&gt;:	jne    0x401035 &lt;phase_4+41&gt;
   0x000000000040102e &lt;+34&gt;:	cmpl   $0xe,0x8(%rsp)  # 比较第一个数与14的大小，若小于就跳转，若大于就爆炸，第一个数的范围[0,14]
   0x0000000000401033 &lt;+39&gt;:	jbe    0x40103a &lt;phase_4+46&gt;
   0x0000000000401035 &lt;+41&gt;:	call   0x40143a &lt;explode_bomb&gt;
   0x000000000040103a &lt;+46&gt;:	mov    $0xe,%edx       
   0x000000000040103f &lt;+51&gt;:	mov    $0x0,%esi
   0x0000000000401044 &lt;+56&gt;:	mov    0x8(%rsp),%edi
   0x0000000000401048 &lt;+60&gt;:	call   0x400fce &lt;func4&gt; #调用func4 应该是需要%edx %esi %edi这几个参数
   0x000000000040104d &lt;+65&gt;:	test   %eax,%eax	# 按位逻辑与操作
   0x000000000040104f &lt;+67&gt;:	jne    0x401058 &lt;phase_4+76&gt; # 如果%eax不等于0,则跳转至爆炸
   0x0000000000401051 &lt;+69&gt;:	cmpl   $0x0,0xc(%rsp)	#比较第二个数与0的大小关系
   0x0000000000401056 &lt;+74&gt;:	je     0x40105d &lt;phase_4+81&gt; #相等就跳转结尾
   0x0000000000401058 &lt;+76&gt;:	call   0x40143a &lt;explode_bomb&gt; #不相等就爆炸
   0x000000000040105d &lt;+81&gt;:	add    $0x18,%rsp
   0x0000000000401061 &lt;+85&gt;:	ret    </code></pre>
<p>接下来看看func4干了什么</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">Dump of assembler code for function func4:
   0x0000000000400fce &lt;+0&gt;:	sub    $0x8,%rsp   # 为局部变量腾出空间
   0x0000000000400fd2 &lt;+4&gt;:	mov    %edx,%eax   # 0xe
   0x0000000000400fd4 &lt;+6&gt;:	sub    %esi,%eax   # 0xe-0x0
   0x0000000000400fd6 &lt;+8&gt;:	mov    %eax,%ecx   # ecx &#x3D; 0xe
   0x0000000000400fd8 &lt;+10&gt;:	shr    $0x1f,%ecx  # %ecx的值逻辑右移31位&#x3D;1110&gt;&gt;31&#x3D;14&#x2F;2^31 &#x3D;0
   0x0000000000400fdb &lt;+13&gt;:	add    %ecx,%eax   # ecx &#x3D; ecx + eax &#x3D; 0 + e
   0x0000000000400fdd &lt;+15&gt;:	sar    %eax	   # 算数右移1位 %eax &#x3D; %eax &#x2F;2 &#x3D; 0xe&#x2F;2 &#x3D; 7 
   0x0000000000400fdf &lt;+17&gt;:	lea    (%rax,%rsi,1),%ecx # %eax是%rax的低32位，%esi是%rsi的低32位  %rax + %rsi * 1 &#x3D; 7 + 0&#x3D;7 %ecx&#x3D;7
   0x0000000000400fe2 &lt;+20&gt;:	cmp    %edi,%ecx  #  %edi保存的是输入的第一个数字 %ecx &#x3D; 7 
   0x0000000000400fe4 &lt;+22&gt;:	jle    0x400ff2 &lt;func4+36&gt;
   0x0000000000400fe6 &lt;+24&gt;:	lea    -0x1(%rcx),%edx  # 7 -1 &#x3D;&gt;edx&#x3D;6
   0x0000000000400fe9 &lt;+27&gt;:	call   0x400fce &lt;func4&gt; # 递归调用
   0x0000000000400fee &lt;+32&gt;:	add    %eax,%eax	# eax*&#x3D;2
   0x0000000000400ff0 &lt;+34&gt;:	jmp    0x401007 &lt;func4+57&gt;  # 出口
   0x0000000000400ff2 &lt;+36&gt;:	mov    $0x0,%eax  # %eax &#x3D; 0
   0x0000000000400ff7 &lt;+41&gt;:	cmp    %edi,%ecx  # n1, 7 
   0x0000000000400ff9 &lt;+43&gt;:	jge    0x401007 &lt;func4+57&gt; # n1&gt;&#x3D;7跳转到func7 出口
   0x0000000000400ffb &lt;+45&gt;:	lea    0x1(%rcx),%esi  # ecx是rcx的低32位     0x1+7&#x3D;&gt;esi&#x3D;8 
   0x0000000000400ffe &lt;+48&gt;:	call   0x400fce &lt;func4&gt;	  # 跳转
   0x0000000000401003 &lt;+53&gt;:	lea    0x1(%rax,%rax,1),%eax # 0x1 + func4+func4&#x3D;&gt;eax
   0x0000000000401007 &lt;+57&gt;:	add    $0x8,%rsp
   0x000000000040100b &lt;+61&gt;:	ret    
</code></pre>
<p>看看这个</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">0x0000000000401051 &lt;+69&gt;:	cmpl   $0x0,0xc(%rsp)	#比较第二个数与0的大小关系
  0x0000000000401056 &lt;+74&gt;:	je     0x40105d &lt;phase_4+81&gt; #相等就跳转结尾

0x000000000040104d &lt;+65&gt;:	test   %eax,%eax	# 按位逻辑与操作
  0x000000000040104f &lt;+67&gt;:	jne    0x401058 &lt;phase_4+76&gt; # 如果%eax不等于0,则跳转至爆炸</code></pre>
<p>所以n2必须等于0，n1的值要让函数func4的返回值为4，且n1∈[0,14]</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">&#x2F;&#x2F;a: %edi b:%esi c:%edx d: %ecx e:%eax
int func4(int a,int b,int c)
&#123;&#x2F;&#x2F;a in %rdi,b in %rsi,c in %rdx,e in %rax,d in %ecx
 &#x2F;&#x2F;y的初始值为0，z的初始值为14
  int t&#x3D;c-b;
  int d&#x3D;e&gt;&gt;31;
  e&#x3D;(e+d)&gt;&gt;1;
  d&#x3D;e+b;
  if(k&gt;a)
  &#123;
    c&#x3D;d-1;
    func4(a,b,c);
    e*&#x3D;2;
    return e;
  &#125;
  else
   &#123;
     e&#x3D;0;
     if(d&lt;a)
     &#123;
        b&#x3D;da+1;
        func4(a,b,c);
        e&#x3D;2*e+1;
        return e;
     &#125;
     else
         return e;   &#x2F;&#x2F;要使返回值e（%eax）为0，其中一个答案为a&#x3D;d&#x3D;7
   &#125;
&#125;</code></pre>
<p>分析可得一个答案 7 0<br>其余的挨个带进去试</p>
<h3 id="答案-3"><a href="#答案-3" class="headerlink" title="答案"></a>答案</h3><blockquote>
<p>7 0</p>
</blockquote>
<h2 id="phase-5-指针-字符串比较"><a href="#phase-5-指针-字符串比较" class="headerlink" title="phase_5 指针 字符串比较"></a>phase_5 指针 字符串比较</h2><p>phase_5的汇编代码</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">Dump of assembler code for function phase_5:
   0x0000000000401062 &lt;+0&gt;:	push   %rbx
   0x0000000000401063 &lt;+1&gt;:	sub    $0x20,%rsp
   0x0000000000401067 &lt;+5&gt;:	mov    %rdi,%rbx   #%rbx存放我们输入的字符串地址
   0x000000000040106a &lt;+8&gt;:	mov    %fs:0x28,%rax	# 栈破坏检测,csapp P199页(金丝雀值),即在栈帧的任何局部缓冲区与栈状态之间存储一个值,在程序返回前检查该值，若该值发生变化，程序提前终止
   0x0000000000401073 &lt;+17&gt;:	mov    %rax,0x18(%rsp) 
   0x0000000000401078 &lt;+22&gt;:	xor    %eax,%eax        # 异或清零
   0x000000000040107a &lt;+24&gt;:	call   0x40131b &lt;string_length&gt; 
   0x000000000040107f &lt;+29&gt;:	cmp    $0x6,%eax
   0x0000000000401082 &lt;+32&gt;:	je     0x4010d2 &lt;phase_5+112&gt; # 输入的字符个数必须等于6，否则爆炸
   0x0000000000401084 &lt;+34&gt;:	call   0x40143a &lt;explode_bomb&gt;
   0x0000000000401089 &lt;+39&gt;:	jmp    0x4010d2 &lt;phase_5+112&gt; 
   0x000000000040108b &lt;+41&gt;:	movzbl (%rbx,%rax,1),%ecx # rbx就是我们输入的字符串地址 翻译成语句:%ecx &#x3D; %rbx + %rax*1 &#x3D; %rbx+0*1&#x3D;%rbx&#x3D;我们输入的第一个字符
   0x000000000040108f &lt;+45&gt;:	mov    %cl,(%rsp)    # %cl是%ecx的低8位 
   0x0000000000401092 &lt;+48&gt;:	mov    (%rsp),%rdx   # %rdx保存我们输入的一位字符
   0x0000000000401096 &lt;+52&gt;:	and    $0xf,%edx     # edx是rdx的低32位，取出低4位
   0x0000000000401099 &lt;+55&gt;:	movzbl 0x4024b0(%rdx),%edx # 0x40240b0是字符串&quot;maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?&quot;的基址，设该字符串为str
							   # edx &#x3D; str[rdx]
   0x00000000004010a0 &lt;+62&gt;:	mov    %dl,0x10(%rsp,%rax,1) # %dl是rdx的低4位
   0x00000000004010a4 &lt;+66&gt;:	add    $0x1,%rax      # 加一
   0x00000000004010a8 &lt;+70&gt;:	cmp    $0x6,%rax      # 和6相比
   0x00000000004010ac &lt;+74&gt;:	jne    0x40108b &lt;phase_5+41&gt; # 不等于6跳转
   0x00000000004010ae &lt;+76&gt;:	movb   $0x0,0x16(%rsp)
   0x00000000004010b3 &lt;+81&gt;:	mov    $0x40245e,%esi  #0x40245e是字符串flyers的地址，用立即数来表示的，应该是内置的
   0x00000000004010b8 &lt;+86&gt;:	lea    0x10(%rsp),%rdi # rdi是aduier的地址 ，结合下面的strings_not_equal函数来看，应该是要把我们输入的东西和flyers比较，由于我们输入的是abcdef,a的ASCII码是97，低4位是0001，所以取得是索引为1的,接下来就是要改变我们输入的东西，让其在str中截取得到的字符串为flyers即可
   0x00000000004010bd &lt;+91&gt;:	call   0x401338 &lt;strings_not_equal&gt;
   0x00000000004010c2 &lt;+96&gt;:	test   %eax,%eax 
   0x00000000004010c4 &lt;+98&gt;:	je     0x4010d9 &lt;phase_5+119&gt;  #相等跳转
   0x00000000004010c6 &lt;+100&gt;:	call   0x40143a &lt;explode_bomb&gt; #不相等就炸
   0x00000000004010cb &lt;+105&gt;:	nopl   0x0(%rax,%rax,1)
   0x00000000004010d0 &lt;+110&gt;:	jmp    0x4010d9 &lt;phase_5+119&gt;
   0x00000000004010d2 &lt;+112&gt;:	mov    $0x0,%eax  # %eax清零
   0x00000000004010d7 &lt;+117&gt;:	jmp    0x40108b &lt;phase_5+41&gt; 
   0x00000000004010d9 &lt;+119&gt;:	mov    0x18(%rsp),%rax
   0x00000000004010de &lt;+124&gt;:	xor    %fs:0x28,%rax
   0x00000000004010e7 &lt;+133&gt;:	je     0x4010ee &lt;phase_5+140&gt;
   0x00000000004010e9 &lt;+135&gt;:	call   0x400b30 &lt;__stack_chk_fail@plt&gt;
   0x00000000004010ee &lt;+140&gt;:	add    $0x20,%rsp
   0x00000000004010f2 &lt;+144&gt;:	pop    %rbx
   0x00000000004010f3 &lt;+145&gt;:	ret    
</code></pre>

<p>所以过关条件就是通过我们输入的六个字符的ASCII码的低4位作为索引,取切maduier那一大串的东西且返回的结果必须是flyers<br>下面是flyers中各字符在maduier中的位置</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>位置</th>
</tr>
</thead>
<tbody><tr>
<td>f</td>
<td>9</td>
</tr>
<tr>
<td>I</td>
<td>15</td>
</tr>
<tr>
<td>y</td>
<td>14</td>
</tr>
<tr>
<td>e</td>
<td>5</td>
</tr>
<tr>
<td>r</td>
<td>6</td>
</tr>
<tr>
<td>s</td>
<td>7</td>
</tr>
</tbody></table>
<p>找到六个字符，他们的ASCII码值的低4位要是表格中的(从上到下，依次符合即可)<br>接下来就是找字符</p>
<h4 id="答案-4"><a href="#答案-4" class="headerlink" title="答案"></a>答案</h4><p>不唯一</p>
<blockquote>
<p>9?&gt;uvw<br>IONEFG</p>
</blockquote>
<h3 id="phase6-链表"><a href="#phase6-链表" class="headerlink" title="phase6 链表"></a>phase6 链表</h3><p>这个我确实是很蒙，我尽力记录清楚,过段时间我再回顾一下，我画点图来帮助理解<br>第一部分</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">Dump of assembler code for function phase_6:
   0x00000000004010f4 &lt;+0&gt;:	push   %r14
   0x00000000004010f6 &lt;+2&gt;:	push   %r13
   0x00000000004010f8 &lt;+4&gt;:	push   %r12
   0x00000000004010fa &lt;+6&gt;:	push   %rbp
   0x00000000004010fb &lt;+7&gt;:	push   %rbx
   0x00000000004010fc &lt;+8&gt;:	sub    $0x50,%rsp
   0x0000000000401100 &lt;+12&gt;:	mov    %rsp,%r13
   0x0000000000401103 &lt;+15&gt;:	mov    %rsp,%rsi
   0x0000000000401106 &lt;+18&gt;:	call   0x40145c &lt;read_six_numbers&gt;
   0x000000000040110b &lt;+23&gt;:	mov    %rsp,%r14 # 保存我们输入的数的
   0x000000000040110e &lt;+26&gt;:	mov    $0x0,%r12d # 
   0x0000000000401114 &lt;+32&gt;:	mov    %r13,%rbp  
   0x0000000000401117 &lt;+35&gt;:	mov    0x0(%r13),%eax # %eax &#x3D; nums[0]
   0x000000000040111b &lt;+39&gt;:	sub    $0x1,%eax   # %eax-&#x3D;1
   0x000000000040111e &lt;+42&gt;:	cmp    $0x5,%eax  # eax-1&lt;&#x3D;5
   0x0000000000401121 &lt;+45&gt;:	jbe    0x401128 &lt;phase_6+52&gt;
   0x0000000000401123 &lt;+47&gt;:	call   0x40143a &lt;explode_bomb&gt;

   0x0000000000401128 &lt;+52&gt;:	add    $0x1,%r12d # r12d&#x3D;1
   0x000000000040112c &lt;+56&gt;:	cmp    $0x6,%r12d 
   0x0000000000401130 &lt;+60&gt;:	je     0x401153 &lt;phase_6+95&gt;  
   0x0000000000401132 &lt;+62&gt;:	mov    %r12d,%ebx # %ebx &#x3D; 1  退出循环的条件是遍历完6个数字

   0x0000000000401135 &lt;+65&gt;:	movslq %ebx,%rax  # rax &#x3D; 1
   0x0000000000401138 &lt;+68&gt;:	mov    (%rsp,%rax,4),%eax  # eax &#x3D;  2 拿到下一个元素给eax  4是int类型的4个字节
   0x000000000040113b &lt;+71&gt;:	cmp    %eax,0x0(%rbp)  # nums[i] !&#x3D;nums[0]
   0x000000000040113e &lt;+74&gt;:	jne    0x401145 &lt;phase_6+81&gt;
   0x0000000000401140 &lt;+76&gt;:	call   0x40143a &lt;explode_bomb&gt; 
   0x0000000000401145 &lt;+81&gt;:	add    $0x1,%ebx  # ebx&#x3D;2
   0x0000000000401148 &lt;+84&gt;:	cmp    $0x5,%ebx  # ebx&lt;&#x3D;5
   0x000000000040114b &lt;+87&gt;:	jle    0x401135 &lt;phase_6+65&gt; # 这个循环是判断数组运算是否相等
   0x000000000040114d &lt;+89&gt;:	add    $0x4,%r13
   0x0000000000401151 &lt;+93&gt;:	jmp    0x401114 &lt;phase_6+32&gt;
   

   0x0000000000401153 &lt;+95&gt;:	lea    0x18(%rsp),%rsi
   0x0000000000401158 &lt;+100&gt;:	mov    %r14,%rax
   0x000000000040115b &lt;+103&gt;:	mov    $0x7,%ecx
   0x0000000000401160 &lt;+108&gt;:	mov    %ecx,%edx
   0x0000000000401162 &lt;+110&gt;:	sub    (%rax),%edx
   0x0000000000401164 &lt;+112&gt;:	mov    %edx,(%rax)
   0x0000000000401166 &lt;+114&gt;:	add    $0x4,%rax</code></pre>
<p>伪代码</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">r14 &#x3D; rsp  nums[0]
rbp &#x3D; r13  nums[0]
eax &#x3D; nums[0]
eax -&#x3D;1
for(r12d &#x3D;0;r12d&lt;6;r12d++)&#123;
if(eax&gt;6)
    explode_bomb();
r12d++
 if(r12d&#x3D;&#x3D;6)
	break
 ebx &#x3D; r12d
 for(ebx&#x3D;r12d;ebx&lt;&#x3D;5;ebx++)&#123;
	rax &#x3D; nums[rbx]
 	if(nums[rbx] !&#x3D; rbp)
	&#123;ebx++;&#125;
  else 
    explode_bomb();
&#125;
r13++; &#x2F;&#x2F;(这里是加1，但是反应在内存上是加上了1*int类型所占的字节)
&#125;
&#125;</code></pre>
<p><strong>也就是说每个数字必须&lt;&#x3D;6,且6个数字互不相等</strong><br>第二部分</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">0x0000000000401153 &lt;+95&gt;:	lea    0x18(%rsp),%rsi # rsi &#x3D; 0 ,判定是否遍历完了，第六个元素后面的那个存储单元没有值，那就是0，0x18&#x3D;&gt;24，是因为我们有六个元素，每个元素4个字节，拿到最后一个元素后要地址(0x14)要+4，所以是0x18
0x0000000000401158 &lt;+100&gt;:	mov    %r14,%rax  # *r14 &#x3D; 5 &#x3D; nums[0]
0x000000000040115b &lt;+103&gt;:	mov    $0x7,%ecx  # ecx &#x3D; 7
0x0000000000401160 &lt;+108&gt;:	mov    %ecx,%edx  # edx &#x3D; ecx &#x3D; 7
0x0000000000401162 &lt;+110&gt;:	sub    (%rax),%edx # edx &#x3D; edx  - *rax &#x3D; 7 - *rax
0x0000000000401164 &lt;+112&gt;:	mov    %edx,(%rax) # *rax &#x3D; edx
0x0000000000401166 &lt;+114&gt;:	add    $0x4,%rax   # rax+&#x3D;4 获取下一个元素
0x000000000040116a &lt;+118&gt;:	cmp    %rsi,%rax  # rax &#x3D;num[1]&#x3D;7-num[1]
0x000000000040116d &lt;+121&gt;:	jne    0x401160 &lt;phase_6+108&gt;</code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">rsi &#x3D; 0;&#x2F;&#x2F;实际上是nums[6]
ecx &#x3D; 7;
for(rax&#x3D;0;rax&lt;6;rax++) &#x2F;&#x2F;底层里面nums[6]&#x3D;0,要是不好理解，可以把中间的语句换成rax!&#x3D;rsi,应该好理解点
	nums[rax]&#x3D;7-nums[rax];
	</code></pre>
<p>第三部分<br>第三部分中有一条语句</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">0x0000000000401183 &lt;+143&gt;:	mov    $0x6032d0,%edx  </code></pre>
<p>通过x&#x2F;30来查看 0x6032d0发现<br><img src="/../images/bomb6.3.jpg" alt="在这里插入图片描述"><br>这是一个链表,但是前面的14c不知道是什么东西，结点如下</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">struct node&#123;
	int value;
	int number;
	node* next;
&#125;</code></pre>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">0x000000000040116f &lt;+123&gt;:	mov    $0x0,%esi  # esi &#x3D; 0 
0x0000000000401174 &lt;+128&gt;:	jmp    0x401197 &lt;phase_6+163&gt;
0x0000000000401176 &lt;+130&gt;:	mov    0x8(%rdx),%rdx # 是一个node类型 rdx &#x3D; 当前结点的next值
0x000000000040117a &lt;+134&gt;:	add    $0x1,%eax   # eax +&#x3D;1
0x000000000040117d &lt;+137&gt;:	cmp    %ecx,%eax   
0x000000000040117f &lt;+139&gt;:	jne    0x401176 &lt;phase_6+130&gt; # 不相等继续遍历，rdx最终指向链表的第%eax个结点
0x0000000000401181 &lt;+141&gt;:	jmp    0x401188 &lt;phase_6+148&gt;
0x0000000000401183 &lt;+143&gt;:	mov    $0x6032d0,%edx  # 0x6032d0是node1的地址
0x0000000000401188 &lt;+148&gt;:	mov    %rdx,0x20(%rsp,%rsi,2) # (rsp+32+rsi*2)&#x3D;rdx
0x000000000040118d &lt;+153&gt;:	add    $0x4,%rsi # rsi+&#x3D;4 
0x0000000000401191 &lt;+157&gt;:	cmp    $0x18,%rsi # 24
0x0000000000401195 &lt;+161&gt;:	je     0x4011ab &lt;phase_6+183&gt;
0x0000000000401197 &lt;+163&gt;:	mov    (%rsp,%rsi,1),%ecx  # ecx &#x3D; *(rsp + rsi) 
0x000000000040119a &lt;+166&gt;:	cmp    $0x1,%ecx # ecx&lt;&#x3D;1
0x000000000040119d &lt;+169&gt;:	jle    0x401183 &lt;phase_6+143&gt;
0x000000000040119f &lt;+171&gt;:	mov    $0x1,%eax # eax &#x3D; 1
0x00000000004011a4 &lt;+176&gt;:	mov    $0x6032d0,%edx # 前面的那个立即数是一个node类型的指针,x&#x2F;30 0x6032d0查看他附近的30个字节
0x00000000004011a9 &lt;+181&gt;:	jmp    0x401176 &lt;phase_6+130&gt;</code></pre>
<p>这部分我很蒙<br>第四部分</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">for(int i&#x3D;6;i&gt;&#x3D;1;i--)
	node[i].next&#x3D;node[i-1]; 183~220
   0x00000000004011ab &lt;+183&gt;:	mov    0x20(%rsp),%rbx  # rbx &#x3D; (0x20+rsp)
   0x00000000004011b0 &lt;+188&gt;:	lea    0x28(%rsp),%rax  # rax &#x3D; (0x28+rsp)
   0x00000000004011b5 &lt;+193&gt;:	lea    0x50(%rsp),%rsi  # rsi &#x3D; (0x50+rsp) 0x50是链表的尾端
   0x00000000004011ba &lt;+198&gt;:	mov    %rbx,%rcx   
   0x00000000004011bd &lt;+201&gt;:	mov    (%rax),%rdx  # rdx &#x3D; *rax
   0x00000000004011c0 &lt;+204&gt;:	mov    %rdx,0x8(%rcx) &#x2F;&#x2F;栈
   0x00000000004011c4 &lt;+208&gt;:	add    $0x8,%rax
   0x00000000004011c8 &lt;+212&gt;:	cmp    %rsi,%rax
   0x00000000004011cb &lt;+215&gt;:	je     0x4011d2 &lt;phase_6+222&gt;
   0x00000000004011cd &lt;+217&gt;:	mov    %rdx,%rcx
   0x00000000004011d0 &lt;+220&gt;:	jmp    0x4011bd &lt;phase_6+201&gt;
   # 这里改一下输入,改成6 5 4 3 2 1

   0x00000000004011d2 &lt;+222&gt;:	movq   $0x0,0x8(%rdx)  # 把最后一个结点的next域赋值为0
   0x00000000004011da &lt;+230&gt;:	mov    $0x5,%ebp       # ebp &#x3D; 5
   0x00000000004011df &lt;+235&gt;:	mov    0x8(%rbx),%rax  # 指向重排后的第i个(1&lt;&#x3D;i&lt;&#x3D;5)
   0x00000000004011e3 &lt;+239&gt;:	mov    (%rax),%eax    # 
   0x00000000004011e5 &lt;+241&gt;:	cmp    %eax,(%rbx)    # rbx指向的是重排后的第i+1个 第1个大于等于第二个,要呈现单调递减的顺序，而且比较的是类似于权重
   0x00000000004011e7 &lt;+243&gt;:	jge    0x4011ee &lt;phase_6+250&gt;  # 必须要单调递减
   0x00000000004011e9 &lt;+245&gt;:	call   0x40143a &lt;explode_bomb&gt;
   0x00000000004011ee &lt;+250&gt;:	mov    0x8(%rbx),%rbx
   0x00000000004011f2 &lt;+254&gt;:	sub    $0x1,%ebp
   0x00000000004011f5 &lt;+257&gt;:	jne    0x4011df &lt;phase_6+235&gt;
   0x00000000004011f7 &lt;+259&gt;:	add    $0x50,%rsp
   0x00000000004011fb &lt;+263&gt;:	pop    %rbx
   0x00000000004011fc &lt;+264&gt;:	pop    %rbp
   0x00000000004011fd &lt;+265&gt;:	pop    %r12
   
   0x00000000004011ff &lt;+267&gt;:	pop    %r13
   0x0000000000401201 &lt;+269&gt;:	pop    %r14
   0x0000000000401203 &lt;+271&gt;:	ret    </code></pre>

<p>梳理<br>1.输入六个数(&lt;&#x3D;6且互不相同)<br>2.nums[i]&#x3D;7-nums[i]<br>7 -nums[0]&#x3D;nums[0]<br>7 -nums[1]&#x3D;nums[1]<br>7 -nums[2]&#x3D;nums[2]<br>7 -nums[3]&#x3D;nums[3]<br>7 -nums[4]&#x3D;nums[4]<br>7 -nums[5]&#x3D;nums[5]<br>1   2   3   4   5   6<br>332 168 924 691 477 443  这个是各个结点的权重,<br><img src="/../images/image1.jpg" alt="在这里插入图片描述"></p>
<p>根据nums[i]的内容对node进行重排，确保重排后的各个结点的权重呈单调递减</p>
<blockquote>
<p>答案: 4 3 2 1 6 5</p>
</blockquote>
<p>全部的分析过程</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">Dump of assembler code for function phase_6:
   0x00000000004010f4 &lt;+0&gt;:	push   %r14
   0x00000000004010f6 &lt;+2&gt;:	push   %r13
   0x00000000004010f8 &lt;+4&gt;:	push   %r12
   0x00000000004010fa &lt;+6&gt;:	push   %rbp
   0x00000000004010fb &lt;+7&gt;:	push   %rbx
   0x00000000004010fc &lt;+8&gt;:	sub    $0x50,%rsp
   0x0000000000401100 &lt;+12&gt;:	mov    %rsp,%r13
   0x0000000000401103 &lt;+15&gt;:	mov    %rsp,%rsi
   0x0000000000401106 &lt;+18&gt;:	call   0x40145c &lt;read_six_numbers&gt;
   0x000000000040110b &lt;+23&gt;:	mov    %rsp,%r14 # nums[0] 基址
   0x000000000040110e &lt;+26&gt;:	mov    $0x0,%r12d # 
   0x0000000000401114 &lt;+32&gt;:	mov    %r13,%rbp  # nums[0]
   0x0000000000401117 &lt;+35&gt;:	mov    0x0(%r13),%eax # %eax &#x3D; nums[0]
   0x000000000040111b &lt;+39&gt;:	sub    $0x1,%eax   # %eax-&#x3D;1
   0x000000000040111e &lt;+42&gt;:	cmp    $0x5,%eax  # eax-1&lt;&#x3D;5
   0x0000000000401121 &lt;+45&gt;:	jbe    0x401128 &lt;phase_6+52&gt;
   0x0000000000401123 &lt;+47&gt;:	call   0x40143a &lt;explode_bomb&gt;

   0x0000000000401128 &lt;+52&gt;:	add    $0x1,%r12d # r12d&#x3D;1
   0x000000000040112c &lt;+56&gt;:	cmp    $0x6,%r12d 
   0x0000000000401130 &lt;+60&gt;:	je     0x401153 &lt;phase_6+95&gt;  
   0x0000000000401132 &lt;+62&gt;:	mov    %r12d,%ebx # %ebx &#x3D; 1  退出循环的条件是遍历完6个数字

   0x0000000000401135 &lt;+65&gt;:	movslq %ebx,%rax  # rax &#x3D; 1
   0x0000000000401138 &lt;+68&gt;:	mov    (%rsp,%rax,4),%eax  # eax &#x3D;  2 拿到下一个元素给eax  4是int类型的4个字节
   0x000000000040113b &lt;+71&gt;:	cmp    %eax,0x0(%rbp)  # nums[i] !&#x3D;nums[0]
   0x000000000040113e &lt;+74&gt;:	jne    0x401145 &lt;phase_6+81&gt;
   0x0000000000401140 &lt;+76&gt;:	call   0x40143a &lt;explode_bomb&gt; 
   0x0000000000401145 &lt;+81&gt;:	add    $0x1,%ebx  # ebx&#x3D;2
   0x0000000000401148 &lt;+84&gt;:	cmp    $0x5,%ebx  # ebx&lt;&#x3D;5
   0x000000000040114b &lt;+87&gt;:	jle    0x401135 &lt;phase_6+65&gt; # 这个循环是判断数组运算是否相等
   0x000000000040114d &lt;+89&gt;:	add    $0x4,%r13
   0x0000000000401151 &lt;+93&gt;:	jmp    0x401114 &lt;phase_6+32&gt;
   

   0x0000000000401153 &lt;+95&gt;:	lea    0x18(%rsp),%rsi # rsi &#x3D; 0 
   0x0000000000401158 &lt;+100&gt;:	mov    %r14,%rax  # *r14 &#x3D; 5
   0x000000000040115b &lt;+103&gt;:	mov    $0x7,%ecx  # ecx &#x3D; 7
   0x0000000000401160 &lt;+108&gt;:	mov    %ecx,%edx  # edx &#x3D; ecx &#x3D; 7
   0x0000000000401162 &lt;+110&gt;:	sub    (%rax),%edx # *edx &#x3D; *edx  - *rax &#x3D; 7 - *rax
   0x0000000000401164 &lt;+112&gt;:	mov    %edx,(%rax) # *rax &#x3D; edx
   0x0000000000401166 &lt;+114&gt;:	add    $0x4,%rax   # rax+&#x3D;4 获取下一个元素
   0x000000000040116a &lt;+118&gt;:	cmp    %rsi,%rax  # rax &#x3D;num[1]&#x3D;7-num[1]
   0x000000000040116d &lt;+121&gt;:	jne    0x401160 &lt;phase_6+108&gt;

4 3 2 1 5 6

   0x000000000040116f &lt;+123&gt;:	mov    $0x0,%esi  # esi &#x3D; 0 
   0x0000000000401174 &lt;+128&gt;:	jmp    0x401197 &lt;phase_6+163&gt;
   0x0000000000401176 &lt;+130&gt;:	mov    0x8(%rdx),%rdx # 是一个node类型 rdx &#x3D; 当前结点的next值
   0x000000000040117a &lt;+134&gt;:	add    $0x1,%eax   # eax +&#x3D;1
   0x000000000040117d &lt;+137&gt;:	cmp    %ecx,%eax   
   0x000000000040117f &lt;+139&gt;:	jne    0x401176 &lt;phase_6+130&gt; # 不相等继续遍历，rdx最终指向链表的第%eax个结点
   0x0000000000401181 &lt;+141&gt;:	jmp    0x401188 &lt;phase_6+148&gt;
   0x0000000000401183 &lt;+143&gt;:	mov    $0x6032d0,%edx  # 0x6032d0是node1的地址
   0x0000000000401188 &lt;+148&gt;:	mov    %rdx,0x20(%rsp,%rsi,2) # (rsp+32+rsi*2)&#x3D;rdx
   0x000000000040118d &lt;+153&gt;:	add    $0x4,%rsi # rsi+&#x3D;4 
   0x0000000000401191 &lt;+157&gt;:	cmp    $0x18,%rsi # 24
   0x0000000000401195 &lt;+161&gt;:	je     0x4011ab &lt;phase_6+183&gt;

   0x0000000000401197 &lt;+163&gt;:	mov    (%rsp,%rsi,1),%ecx  # ecx &#x3D; *(rsp + rsi) 

   0x000000000040119a &lt;+166&gt;:	cmp    $0x1,%ecx # ecx&lt;&#x3D;1
   0x000000000040119d &lt;+169&gt;:	jle    0x401183 &lt;phase_6+143&gt;
   0x000000000040119f &lt;+171&gt;:	mov    $0x1,%eax # eax &#x3D; 1
   0x00000000004011a4 &lt;+176&gt;:	mov    $0x6032d0,%edx # 前面的那个立即数是一个node类型的指针,x&#x2F;30 0x6032d0查看他附近的30个字节
   0x00000000004011a9 &lt;+181&gt;:	jmp    0x401176 &lt;phase_6+130&gt;

   for(int i&#x3D;6;i&gt;&#x3D;1;i--)
	node[i].next&#x3D;node[i-1]; 183~220
   0x00000000004011ab &lt;+183&gt;:	mov    0x20(%rsp),%rbx  # rbx &#x3D; (0x20+rsp)
   0x00000000004011b0 &lt;+188&gt;:	lea    0x28(%rsp),%rax  # rax &#x3D; (0x28+rsp)
   0x00000000004011b5 &lt;+193&gt;:	lea    0x50(%rsp),%rsi  # rsi &#x3D; (0x50+rsp) 0x50是链表的尾端
   0x00000000004011ba &lt;+198&gt;:	mov    %rbx,%rcx   
   0x00000000004011bd &lt;+201&gt;:	mov    (%rax),%rdx  # rdx &#x3D; *rax
   0x00000000004011c0 &lt;+204&gt;:	mov    %rdx,0x8(%rcx) &#x2F;&#x2F;栈
   0x00000000004011c4 &lt;+208&gt;:	add    $0x8,%rax
   0x00000000004011c8 &lt;+212&gt;:	cmp    %rsi,%rax
   0x00000000004011cb &lt;+215&gt;:	je     0x4011d2 &lt;phase_6+222&gt;
   0x00000000004011cd &lt;+217&gt;:	mov    %rdx,%rcx
   0x00000000004011d0 &lt;+220&gt;:	jmp    0x4011bd &lt;phase_6+201&gt;
   # 这里改一下输入,改成6 5 4 3 2 1

   0x00000000004011d2 &lt;+222&gt;:	movq   $0x0,0x8(%rdx)  # 把最后一个结点的next域赋值为0
   0x00000000004011da &lt;+230&gt;:	mov    $0x5,%ebp       # ebp &#x3D; 5
   0x00000000004011df &lt;+235&gt;:	mov    0x8(%rbx),%rax  # 指向重排后的第i个(1&lt;&#x3D;i&lt;&#x3D;5)
   0x00000000004011e3 &lt;+239&gt;:	mov    (%rax),%eax    # 
   0x00000000004011e5 &lt;+241&gt;:	cmp    %eax,(%rbx)    # rbx指向的是重排后的第i+1个 第1个大于等于第二个,要呈现单调递减的顺序，而且比较的是类似于权重
   0x00000000004011e7 &lt;+243&gt;:	jge    0x4011ee &lt;phase_6+250&gt;  # 必须要单调递减
   0x00000000004011e9 &lt;+245&gt;:	call   0x40143a &lt;explode_bomb&gt;
   0x00000000004011ee &lt;+250&gt;:	mov    0x8(%rbx),%rbx
   0x00000000004011f2 &lt;+254&gt;:	sub    $0x1,%ebp
   0x00000000004011f5 &lt;+257&gt;:	jne    0x4011df &lt;phase_6+235&gt;
   0x00000000004011f7 &lt;+259&gt;:	add    $0x50,%rsp
   0x00000000004011fb &lt;+263&gt;:	pop    %rbx
   0x00000000004011fc &lt;+264&gt;:	pop    %rbp
   0x00000000004011fd &lt;+265&gt;:	pop    %r12
   0x00000000004011ff &lt;+267&gt;:	pop    %r13
   0x0000000000401201 &lt;+269&gt;:	pop    %r14
   0x0000000000401203 &lt;+271&gt;:	ret    </code></pre>

<p>finish<br>明天试试隐藏关</p>
]]></content>
      <tags>
        <tag>CSAPP Lab</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言中的随机数</title>
    <url>//post/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0.html</url>
    <content><![CDATA[<p>今天在一个小程序中看到了一个随机函数，心血来潮，来记录一下，顺便回忆一下c#(有点懒，c#部分后期再补)</p>
<h1 id="c语言中产生随机数"><a href="#c语言中产生随机数" class="headerlink" title="c语言中产生随机数"></a>c语言中产生随机数</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;&#x2F;&#x2F;这里要注意，必须写，不然vs报错，因为rand函数在stdlib下面
#include &lt;time.h&gt;&#x2F;&#x2F;这里要注意，因为随机数是根据系统日期所产生的.
int main()
&#123;
	srand(time(0));&#x2F;&#x2F;根据当前系统日期产生随机数
	&#x2F;&#x2F;srand((unsigned) time(NULL));也可以这样写
	int num&#x3D;rand()%201-100;
	&#x2F;&#x2F;产生一个-100到100之间的数
	printf(&quot;你产生的随机数是%d\n&quot;,num);
&#125;</code></pre>
<p>运行结果<br>第一次<br><img src="/../images/1.jpg" alt="第一次运行结果">)<br>第二次<br><img src="/../images/2.jpg" alt="第二次运行结果"></p>
<h2 id="rand"><a href="#rand" class="headerlink" title="rand()"></a>rand()</h2><p>rand函数指定数字范围原理<br>要让随机数限定在一个范围，可以采用模除加加法的方式。<br>要产生随机数r， 其范围为 m&lt;&#x3D;r&lt;&#x3D;n，可以使用如下公式：<br>rand()%(n-m+1)+m<br>其原理为，对于任意数，<br>0&lt;&#x3D;rand()%(n-m+1)&lt;&#x3D;n-m<br>同时加上m<br>0+m&lt;&#x3D;rand()%(n-m+1)+m&lt;&#x3D;n-m+m<br>得到<br>m&lt;&#x3D;rand()%(n-m+1)+m&lt;&#x3D;n</p>
<h2 id="rand的例子"><a href="#rand的例子" class="headerlink" title="rand的例子"></a>rand的例子</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">#include&lt;stdio.h&gt;
#include&lt;time.h&gt;
#include&lt;stdlib.h&gt;
int main()
&#123;
	&#x2F;&#x2F;产生一个-200到200之间的数
	srand((unsigned)time(NULL));
	&#x2F;&#x2F;rand()%(200-(-200)+1)+(-200)
	&#x2F;&#x2F;rand()%401-200
	int num&#x3D;rand()%401-200;
	printf(&quot;随机数的结果为%d\n&quot;,num);
	return 0;
&#125;
</code></pre>
<h2 id="不足点"><a href="#不足点" class="headerlink" title="不足点"></a>不足点</h2><ol>
<li>没有说清楚srand和time的细节部分</li>
<li>rand细节部分</li>
</ol>
]]></content>
      <tags>
        <tag>C语言</tag>
        <tag>随机函数</tag>
      </tags>
  </entry>
  <entry>
    <title>SearchSkills</title>
    <url>//post/SearchSkills.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>技巧</th>
<th>说明</th>
<th>例子</th>
<th>常用</th>
</tr>
</thead>
<tbody><tr>
<td>“content”</td>
<td>内容中必须完整的包含content</td>
<td>“IT行业报告”</td>
<td></td>
</tr>
<tr>
<td>intitle:Exception</td>
<td>要求标题中必须包含Exception</td>
<td>intitle:犹太人</td>
<td></td>
</tr>
<tr>
<td>allintitle:标题1 标题2</td>
<td>要求标题中必须包含标题1和标题2</td>
<td>allintitle:王柠 天职师大</td>
<td></td>
</tr>
<tr>
<td>intext:content</td>
<td>限定内容关键词</td>
<td>intext:”沈峰” “浙江大学”</td>
<td></td>
</tr>
<tr>
<td>inurl:url</td>
<td>限定网址关键词</td>
<td>inurl:cctv</td>
<td></td>
</tr>
<tr>
<td>site:url</td>
<td>限定网址来源</td>
<td>“Sql Exception”site:stackoverflow.com</td>
<td></td>
</tr>
<tr>
<td>imagesize:widthxheight</td>
<td>限定图片尺寸</td>
<td>imagesize:100x200</td>
<td></td>
</tr>
<tr>
<td>filetype:文件类型名</td>
<td>限定文件格式</td>
<td>“IT行业报告” filetype:pdf</td>
<td>快速了解行业的情况用这个</td>
</tr>
</tbody></table>
<p>快速找到免费报告的网站<br>filetype:pdf</p>
<ol>
<li>用inurl:baogao 搜出一堆的网站</li>
<li>再用Similar Sites把上面的网址丢进去，找到类似的网站<br>xx行业&#x2F;岗位必逛的网站<br>websites programmer should visit</li>
</ol>
<p>找论文的<br>Google学术搜索<br>sci-hub</p>
<p>电子书<br>中文的 鸠摩搜书<br>英文的 直接Google，网站:zlibrary,manybooks,<a href="http://www.pdfbooksworld.com,谷歌图书kindle/">www.pdfbooksworld.com,谷歌图书Kindle</a></p>
<p>在线视频<br>Google搜索best online learning websites</p>
<p>百度网盘搜索引擎<br>学搜搜 盘搜搜 云盘狗，或者直接Google一下百度网盘搜索引擎</p>
<p>高清视频素材网站<br>w<a href="http://www.pexels.com/">www.pexels.com</a><br>w<a href="http://www.pixabay.com/">www.pixabay.com</a><br>w<a href="http://www.videvo.net/">www.videvo.net</a><br>w<a href="http://www.mixkit.co/">www.mixkit.co</a><br>或直接Google搜索best sites for free stock videos</p>
<p>youtube上下载视频,在www.后面输入9x,下载4K的网站 save.tube<br>199it.com  专业研究报告的<br>国产普通化妆品备案信息<br>2023年为基准<br>15年前<br>百度知道<br>百度贴吧<br>10年前<br>知乎<br>微信公众号(搜狗搜索或直接在微信公众号里面搜)<br>5年前<br>小红书，抖音，B站，快手，视频号，得到</p>
]]></content>
      <tags>
        <tag>particle skills</tag>
        <tag>Search skill</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2019中出现【Windows SDK】找不到 Windows SDK 版本10.0.18362.0的解决办法</title>
    <url>//post/VS2019%E4%B8%AD%E5%87%BA%E7%8E%B0%E3%80%90Windows-SDK%E3%80%91%E6%89%BE%E4%B8%8D%E5%88%B0-Windows-SDK-%E7%89%88%E6%9C%AC10-0-18362-0%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</url>
    <content><![CDATA[<h1 id="VS2019中出现【Windows-SDK】找不到-Windows-SDK-版本10-0-18362-0的解决办法"><a href="#VS2019中出现【Windows-SDK】找不到-Windows-SDK-版本10-0-18362-0的解决办法" class="headerlink" title="VS2019中出现【Windows SDK】找不到 Windows SDK 版本10.0.18362.0的解决办法"></a>VS2019中出现【Windows SDK】找不到 Windows SDK 版本10.0.18362.0的解决办法</h1><h2 id="方法一：在项目上右击选择重定目标解决方案，将windosSdk的版本号选择10-0-18362-0"><a href="#方法一：在项目上右击选择重定目标解决方案，将windosSdk的版本号选择10-0-18362-0" class="headerlink" title="方法一：在项目上右击选择重定目标解决方案，将windosSdk的版本号选择10.0.18362.0"></a>方法一：在项目上右击选择重定目标解决方案，将windosSdk的版本号选择10.0.18362.0</h2><p><img src="/../images/1.jpg" alt="选择"><br><img src="/../images/2.jpg" alt="在这里插入图片描述"><br>如果这个不能解决问题<br>请看这里<br>在Visual Studio Installer中<img src="/../images/3.jpg" alt="修改"><br><img src="/../images/4.jpg" alt="勾选Windows 10 SDK(10.0.17764.0)点击修改即可"><br>勾选Windows 10 SDK(10.0.17764.0)点击修改即可<br>完成</p>
<p>是在不行，自己到微软官网上下载一个，<a href="https://developer.microsoft.com/zh-cn/windows/downloads/sdk-archive/">请点击这里</a></p>
]]></content>
      <tags>
        <tag>VS报错</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言里面的进制输出</title>
    <url>//post/c%E8%AF%AD%E8%A8%80%E9%87%8C%E9%9D%A2%E7%9A%84%E8%BF%9B%E5%88%B6%E8%BE%93%E5%87%BA.html</url>
    <content><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c">   int num &#x3D; 0;
scanf_s(&quot;%d&quot;,&amp;num);
char str[256] &#x3D; &#123; 0 &#125;;
_itoa_s(num, str, 64,2);&#x2F;&#x2F;这个64是代表着str的长度应该是，超过了str的长度就会报str附近的堆栈已经损坏
&#x2F;&#x2F;num是进行转换的数
&#x2F;&#x2F;str是存放结果的字符数组
&#x2F;&#x2F;64我也不清楚，
&#x2F;&#x2F;2是进制，后面的一次类推
printf(&quot;%s\n&quot;,str);

_itoa_s(num, str, 64, 8);
printf(&quot;%s\n&quot;, str);

_itoa_s(num, str, 64, 10);
printf(&quot;%s\n&quot;, str);

_itoa_s(num, str, 64, 16);
printf(&quot;%s\n&quot;, str);
return 0;
</code></pre>
<p>很简单对吧，如果要将其结果输入或者输出至文本文件中呢?</p>
<h1 id="输入输出至文本文件中"><a href="#输入输出至文本文件中" class="headerlink" title="输入输出至文本文件中"></a>输入输出至文本文件中</h1><p>首先介绍一下在cmd中 &lt; &gt;是什么意思，这个是重定向符号<br>例子  进制转换.exe &lt;1.txt 把1.txt中的内容输入至进制转换.exe中<br>进制转换.exe &gt; 1.txt 把进制转换.exe中的结果输出至1.txt</p>
<p>ok,<br>例子<br>把十进制分别转换成B&#x2F;D&#x2F;O&#x2F;H并写入指定的文本文件中<br>win+r 进入cmd界面<br>切换到程序所在的目录，再切换到Debug文件夹下(这是VS2019,其他的我不清楚，只要能找到那个以exe结尾的可执行文件就行)<br>输入 程序名.exe &lt;1.txt<br>输出 程序名.exe &gt;2.txt<br>图片以后再补充</p>
]]></content>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>修改试试</title>
    <url>//post/first-blog.html</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>测试,123</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>//post/hello-world.html</url>
    <content><![CDATA[<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>介绍性的东西</p>
<h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>Hexo、博客、创建、配置、插件、主题</p>
<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="1-1-背景"><a href="#1-1-背景" class="headerlink" title="1.1 背景"></a>1.1 背景</h3><p>随着互联网的发展，越来越多的人开始在网络上分享自己的知识和经验。博客是一种非常流行的方式，让人们可以轻松地创建和发布自己的文章。Hexo 是一个非常快速、简单且强大的博客框架，可以帮助人们快速创建自己的博客。</p>
<h3 id="1-2-目的"><a href="#1-2-目的" class="headerlink" title="1.2 目的"></a>1.2 目的</h3><p>在这篇文章中，我们将介绍如何创建和配置 Hexo 博客，以及如何使用一些常用的插件和主题来提升博客的体验。通过这篇文章，希望能够帮助读者快速上手 Hexo，并开始创建自己的博客。</p>
<h3 id="1-3-结构"><a href="#1-3-结构" class="headerlink" title="1.3 结构"></a>1.3 结构</h3><p>本文分为以下几个部分：<br>1.1 Hexo 简介<br>1.2 安装和配置 Hexo<br>1.3 使用插件和主题<br>1.4 总结</p>
<h2 id="安装和配置-Hexo"><a href="#安装和配置-Hexo" class="headerlink" title="安装和配置 Hexo"></a>安装和配置 Hexo</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><p>要在本地安装 Hexo，请遵循以下步骤：</p>
<ol>
<li>访问 Hexo 官网（<a href="https://hexo.io/%EF%BC%89%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84">https://hexo.io/）下载最新版本的</a> Hexo。  </li>
<li>将下载的压缩包解压到一个文件夹中。  </li>
<li>进入解压后的文件夹，并运行以下命令安装依赖：</li>
</ol>
<h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h3><p>安装完成后，需要对 Hexo 进行一些基本配置。打开解压后的文件夹，找到 <code>config/config.yml</code> 文件，并编辑如下内容：</p>
<h2 id="使用插件和主题"><a href="#使用插件和主题" class="headerlink" title="使用插件和主题"></a>使用插件和主题</h2><h3 id="3-1-安装插件"><a href="#3-1-安装插件" class="headerlink" title="3.1 安装插件"></a>3.1 安装插件</h3><p>要安装插件，请进入解压后的文件夹，并运行以下命令：</p>
<h3 id="3-2-配置插件"><a href="#3-2-配置插件" class="headerlink" title="3.2 配置插件"></a>3.2 配置插件</h3><p>安装完成后，找到 <code>themes/theme-chalk/config/config.yml</code> 文件，添加以下内容：</p>
<h3 id="3-3-安装主题"><a href="#3-3-安装主题" class="headerlink" title="3.3 安装主题"></a>3.3 安装主题</h3><p>要安装主题，请进入解压后的文件夹，并运行以下命令：</p>
<h3 id="3-4-配置主题"><a href="#3-4-配置主题" class="headerlink" title="3.4 配置主题"></a>3.4 配置主题</h3><p>安装完成后，找到 <code>themes/theme-chalk/config/config.yml</code> 文件，添加以下内容：</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这篇文章中，我们介绍了如何创建和配置 Hexo 博客，以及如何使用一些常用的插件和主题来提升博客的体验。通过这篇文章，希望能够帮助读者快速上手 Hexo，并开始创建自己的博客。</p>
<p>感谢您的阅读，希望您喜欢这篇文章！  </p>
]]></content>
  </entry>
  <entry>
    <title>java环境搭建 Ubuntu Linux</title>
    <url>//post/java%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-Ubuntu-Linux.html</url>
    <content><![CDATA[<h1 id="jdk的安装和配置环境变量"><a href="#jdk的安装和配置环境变量" class="headerlink" title="jdk的安装和配置环境变量"></a>jdk的安装和配置环境变量</h1><ul>
<li>Ubuntu 22.04 LTS</li>
</ul>
<h2 id="使用apt"><a href="#使用apt" class="headerlink" title="使用apt"></a>使用apt</h2><p>这个最简单</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt install default-jdk</code></pre>
<p>若是安装成功了在终端输入java -version来查看是否安装成功</p>
<h2 id="使用官网下载的jdk包-离线安装"><a href="#使用官网下载的jdk包-离线安装" class="headerlink" title="使用官网下载的jdk包(离线安装)"></a>使用官网下载的jdk包(离线安装)</h2><p>直接在百度上搜索jdk，选择图片这个<br><img src="https://img-blog.csdnimg.cn/2ad26025dac042a0a32035a5b214fa41.png" alt="在这里插入图片描述"><br>网址:<a href="https://www.oracle.com/java/technologies/downloads/">jdk下载网址</a><br><img src="https://img-blog.csdnimg.cn/8f3caa75a4bd4e52964da0d8f13632e2.png" alt="在这里插入图片描述"><br>在linux中使用uname -m查看<br>若上面的命令结果是arm就选择带有arm的，反之选择x64的<br>切换到包所在的目录，打开终端，输入tar -zxf 包名<br>切换到解压后的目录当中，复制该路径，我这里是&#x2F;usr&#x2F;java&#x2F;jdk<br>打开终端输入vim &#x2F;etc&#x2F;profile,输入i进入插入模式<br>在尾部追加<br>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk<br>export CLASSPATH&#x3D;$:CLASSPATH:$JAVA_HOME&#x2F;lib&#x2F;<br>export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin</p>
<p>按ESC键，输入:wq按下回车<br>在终端输入source &#x2F;etc&#x2F;profile<br>在终端输入java -version,看看版本，若有反应则安装成功</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>错误	C2371	Cheer 重定义；不同的基类型</title>
    <url>//post/%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9F%BA%E7%B1%BB%E5%9E%8B.html</url>
    <content><![CDATA[<p>错误	C2371	“Cheer”: 重定义；不同的基类型</p>
<p>问题区: <img src="/../images/1.jpg" alt="报错"></p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>这是因为c语言编译器是从上往下执行的，也就是说你必须要把使用的函数名放在main函数之前，编译器把你写的代码读进去，每看到一个函数，就记下他的名字</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>把调用的函数写到main函数前面；<br>如<br><img src="/../images/2.jpg" alt="方法一"></p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>我教程上面说可以把函数头写到main函数前面，什么叫做函数头？</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">void Cheer()&#x2F;&#x2F;这个就是函数头</code></pre>
<p><img src="/../images/3.jpg" alt="方法2"><br>若上面的有错误，请各位大佬指出，谢谢</p>
]]></content>
      <tags>
        <tag>VS报错</tag>
      </tags>
  </entry>
</search>
